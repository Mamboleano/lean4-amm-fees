import AMMLib.Swap.Basic
import AMMLib.Networth

@[simp] theorem swap_price_mint_denumz
{c: Cfg} {s: Œì} (sw: Swap c s)
(m: ùïã‚ÇÅ)
: sw.apply.ùïã‚ÇÅPrice_denumz m = s.ùïã‚ÇÅPrice_denumz m := by
simp [Œì.ùïã‚ÇÅPrice_denumz]

@[simp] theorem swap_price_mint_diff_num_addend1z
{c: Cfg} {s: Œì} (sw: Swap c s)
(m: ùïã‚ÇÅ) (hdif: m ‚â† sw.mint)
: sw.apply.ùïã‚ÇÅPrice_num_addend1z c.o m = s.ùïã‚ÇÅPrice_num_addend1z c.o m := by
  simp [Œì.ùïã‚ÇÅPrice_num_addend1z]; left
  simp [Swap.apply, hdif]
  rw [‚Üê ùïã‚ÇÅ.choose_eq m] at hdif
  unfold Swap.mint at hdif
  have hdif' := ùïã‚ÇÄ.toMint_diff hdif
  simp [ùïä‚Çê.sub_r1, hdif']
  simp [ùïä‚Çê.add_r0, hdif']

@[simp] theorem swap_price_mint_diff_num_addend2z
{c: Cfg} {s: Œì} (sw: Swap c s)
(m: ùïã‚ÇÅ) (hdif: m ‚â† sw.mint)
: sw.apply.ùïã‚ÇÅPrice_num_addend2z c.o m = s.ùïã‚ÇÅPrice_num_addend2z c.o m := by
  simp [Œì.ùïã‚ÇÅPrice_num_addend2z]; left;
  simp [Swap.apply, hdif]
  rw [‚Üê ùïã‚ÇÅ.choose_eq m] at hdif
  unfold Swap.mint at hdif
  have hdif' := ùïã‚ÇÄ.toMint_diff hdif
  simp [ùïä‚Çê.sub_r1, hdif']
  simp [ùïä‚Çê.add_r0, hdif']

@[simp] theorem swap_price_mint_diff_numz
{c: Cfg} {s: Œì} (sw: Swap c s)
(m: ùïã‚ÇÅ) (hdif: m ‚â† sw.mint)
: sw.apply.ùïã‚ÇÅPrice_numz c.o m = s.ùïã‚ÇÅPrice_numz c.o m := by
simp [Œì.ùïã‚ÇÅPrice_numz]
simp [hdif]

@[simp] theorem swap_price_mint_diff
{c: Cfg} {s: Œì} (sw: Swap c s)
(m: ùïã‚ÇÅ) (hdif: m ‚â† sw.mint)
: sw.apply.ùïã‚ÇÅPricez c.o m = s.ùïã‚ÇÅPricez c.o m := by
  simp [Œì.ùïã‚ÇÅPricez]
  simp [hdif]

/-
I must prove
ùïé‚ÇÅ.networth (Finsupp.erase (ùïã‚ÇÄ.toMint (_ : sw.t0 ‚â† sw.t1)) (sw.apply.mints sw.a)) (Swap.apply sw) c.o

is equal to

ùïé‚ÇÅ.networth (Finsupp.erase (ùïã‚ÇÄ.toMint (_ : sw.t0 ‚â† sw.t1)) (s sw.a)) (Swap.apply sw) c.o
-/

theorem bruh
{c: Cfg} {s: Œì} (sw: Swap c s) (a: ùî∏):
‚àÄ (m: ùïã‚ÇÅ), m ‚àà (Finsupp.erase sw.mint (sw.apply.mints a)).support ‚Üí (mintedworth sw.apply c.o) m ((Finsupp.erase sw.mint (sw.apply.mints a)) m) = (mintedworth s c.o) m ((Finsupp.erase sw.mint (sw.apply.mints a)) m)
:= by
  intro m hin
  simp at hin
  have hdif := hin.1
  simp [mintedworth, hdif]

@[simp] theorem networth_erase
{c: Cfg} {s: Œì} (sw: Swap c s) (a: ùî∏):
ùïé‚ÇÅ.networth (Finsupp.erase sw.mint (sw.apply.mints a)) sw.apply c.o
=
ùïé‚ÇÅ.networth (Finsupp.erase sw.mint (s.mints a)) s c.o
:= by
  simp [ùïé‚ÇÅ.networth]
  rw [@Finsupp.sum_congr ùïã‚ÇÅ NNReal NNReal _ _ _ (mintedworth (sw.apply) c.o) (mintedworth s c.o) (bruh sw a)]
  simp [Swap.apply]

@[simp] theorem Swap.apply_mints
{c: Cfg} {s: Œì} (sw: Swap c s):
sw.apply.mints = s.mints := by
simp [apply]

@[simp] theorem networth_erase'
{c: Cfg} {s: Œì} (sw: Swap c s) (a: ùî∏):
ùïé‚ÇÅ.networth (Finsupp.erase sw.mint (s.mints a)) sw.apply c.o
=
ùïé‚ÇÅ.networth (Finsupp.erase sw.mint (s.mints a)) s c.o
:= by
  have h := networth_erase sw a
  simp only [Swap.apply_mints] at h
  exact h

theorem lemma32_same
{c: Cfg} {s: Œì} (sw: Swap c s)
: 
(sw.a.gain c s sw.apply)
=
sw.v0*((c.sx sw.v0 (s.amms.fp sw.exi).fst (s.amms.fp sw.exi).snd)*(c.o sw.t1) - (c.o sw.t0))*(1 - (s.mints sw.a sw.mint)/(s.mints.supply sw.mint))
:= by
  unfold ùî∏.gain
  unfold Œì.networth
  rw [ùïé‚ÇÄ.networth_destruct _ c.o sw.t0]
  rw [ùïé‚ÇÄ.networth_destruct _ c.o sw.t1]
  rw [ùïé‚ÇÄ.networth_destruct (s.atoms sw.a) c.o sw.t0]
  rw [ùïé‚ÇÄ.networth_destruct (Finsupp.erase sw.t0 (s.atoms sw.a)) c.o sw.t1]
  simp only [Swap.acc_t0_after_swap]
  rw [Finsupp.erase_ne (ùïä‚Çê.exists_imp_dif sw.exi).symm]
  rw [Finsupp.erase_ne (ùïä‚Çê.exists_imp_dif sw.exi).symm]
  simp only [Swap.acc_t1_after_swap]
  rw [ùïé‚ÇÅ.networth_destruct _ (sw.apply) c.o sw.mint]
  rw [ùïé‚ÇÅ.networth_destruct _ s c.o sw.mint]
  simp [Œì.ùïã‚ÇÅPricez, Œì.ùïã‚ÇÅPrice_numz, Œì.ùïã‚ÇÅPrice_denumz, Œì.ùïã‚ÇÅPrice_num_addend1z, Œì.ùïã‚ÇÅPrice_num_addend2z]

  unfold Swap.mint
  cases (ùïã‚ÇÄ.toMint_t0_cases (ùïä‚Çê.exists_imp_dif sw.exi)) 
  with
  | inl chooseEq
  | inr chooseEq =>
      simp [chooseEq]
      simp [Œì.mintsupply, sw.enough, le_of_lt sw.nodrain,
            ùïä‚Çê.reorder_fst _ sw.t1 sw.t0,
            ùïä‚Çê.reorder_snd _ sw.t1 sw.t0]
      field_simp
      ring_nf

theorem lemma32_diff
{c: Cfg} {s: Œì} (sw: Swap c s)
(a: ùî∏) (adif: a ‚â† sw.a)
: 
(a.gain c s sw.apply)
=
-sw.v0*((c.sx sw.v0 (s.amms.fp sw.exi).fst (s.amms.fp sw.exi).snd)*(c.o sw.t1) - (c.o sw.t0))*((s.mints a sw.mint)/(s.mints.supply sw.mint))
:= by
  unfold ùî∏.gain
  unfold Œì.networth
  rw [ùïé‚ÇÄ.networth_destruct _ c.o sw.t0]
  rw [ùïé‚ÇÄ.networth_destruct _ c.o sw.t1]
  rw [ùïé‚ÇÄ.networth_destruct (s.atoms a) c.o sw.t0]
  rw [ùïé‚ÇÄ.networth_destruct (Finsupp.erase sw.t0 (s.atoms a)) c.o sw.t1]
  rw [Finsupp.erase_ne (ùïä‚Çê.exists_imp_dif sw.exi).symm]
  rw [Finsupp.erase_ne (ùïä‚Çê.exists_imp_dif sw.exi).symm]
  simp only [Swap.acc_diff_t1]
  rw [ùïé‚ÇÅ.networth_destruct _ (sw.apply) c.o sw.mint]
  rw [ùïé‚ÇÅ.networth_destruct _ s c.o sw.mint]
  simp [Œì.ùïã‚ÇÅPricez, Œì.ùïã‚ÇÅPrice_numz, Œì.ùïã‚ÇÅPrice_denumz, Œì.ùïã‚ÇÅPrice_num_addend1z, Œì.ùïã‚ÇÅPrice_num_addend2z]
  rw [Swap.acc_diff_t0 sw a adif]

  unfold Swap.mint
  cases (ùïã‚ÇÄ.toMint_t0_cases (ùïä‚Çê.exists_imp_dif sw.exi)) 
  with
  | inl chooseEq
  | inr chooseEq =>
      simp [chooseEq]
      simp [Œì.mintsupply, sw.enough, le_of_lt sw.nodrain,
            ùïä‚Çê.reorder_fst _ sw.t1 sw.t0,
            ùïä‚Çê.reorder_snd _ sw.t1 sw.t0]
      field_simp
      ring_nf

theorem lemma33
{c: Cfg} {s: Œì} (sw: Swap c s)
(hzero: s.mints sw.a sw.mint = 0):
cmp (sw.a.gain c s sw.apply) 0
=
cmp ((c.sx sw.v0 (s.amms.fp sw.exi).fst (s.amms.fp sw.exi).snd): ‚Ñù) ((c.o sw.t0) / (c.o sw.t1))
:= by 
  simp [lemma32_same, hzero, PReal.coe_div]

  generalize c.sx sw.v0 (s.amms.fp sw.exi).fst (s.amms.fp sw.exi).snd = y at *
  generalize (c.o sw.t0) = p0 at *
  generalize (c.o sw.t1) = p1 at *
  generalize sw.v0 = x at *

  rw [‚Üê (mul_zero (x: ‚Ñù))]
  rw [cmp_mul_pos_left x.coe_pos (y*p1 - p0) 0]
  rw [‚Üê cmp_add_right ((y: ‚Ñù)*p1 - p0) 0 p0]
  rw [zero_add, sub_add, sub_self, sub_zero]
  rw [div_eq_mul_inv (p0: ‚Ñù) p1]
  rw [‚Üê cmp_mul_pos_right (inv_pos_of_pos p1.coe_pos) (y*p1) p0]
  rw [mul_inv_cancel_right‚ÇÄ p1.coe_ne_zero y]