{"name":"Lean.Meta.Tactic.Grind.Arith.Cutsat.Types","instances":[{"typeNames":["Int.Linear.Poly"],"name":"Lean.Meta.Grind.Arith.Cutsat.instHashablePoly_lean","className":"Hashable"},{"typeNames":["Lean.Meta.Grind.Arith.Cutsat.DvdCnstr"],"name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedDvdCnstr","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Arith.Cutsat.State"],"name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedState","className":"Inhabited"}],"imports":["Init.Data.Int.Linear","Std.Internal.Rat","Lean.Data.PersistentArray","Lean.Meta.Tactic.Grind.ENodeKey","Lean.Meta.Tactic.Grind.Arith.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L225-L225","name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedState","line":225,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L220-L220","name":"Lean.Meta.Grind.Arith.Cutsat.State.diseqSplits","line":220,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.diseqSplits","doc":"Cache decision variables used when splitting on disequalities.\nThis is necessary because the same disequality may be in different conflicts.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.diseqSplits\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">diseqSplits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L215-L215","name":"Lean.Meta.Grind.Arith.Cutsat.State.conflict?","line":215,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.conflict?","doc":"`conflict?` is `some ..` if a contradictory constraint was derived.\nThis field is only set when `caseSplits` is `true`. Otherwise, we\ncan convert `UnsatProof` into a Lean term and close the current `grind` goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.conflict?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">conflict?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof\">UnsatProof</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L209-L209","name":"Lean.Meta.Grind.Arith.Cutsat.State.caseSplits","line":209,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.caseSplits","doc":"`caseSplits` is `true` if cutsat is searching for model and already performed case splits.\nThis information is used to decide whether a conflict should immediately close the\ncurrent `grind` goal or not.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.caseSplits\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">caseSplits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L203-L203","name":"Lean.Meta.Grind.Arith.Cutsat.State.nextCnstrId","line":203,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.nextCnstrId","doc":"Next unique id for a constraint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.nextCnstrId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">nextCnstrId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L201-L201","name":"Lean.Meta.Grind.Arith.Cutsat.State.assignment","line":201,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.assignment","doc":"Partial assignment being constructed by cutsat. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">assignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Std/Internal/Rat.html#Std.Internal.Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L199-L199","name":"Lean.Meta.Grind.Arith.Cutsat.State.occurs","line":199,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.occurs","doc":"Mapping from variable to occurrences. For example, an entry `x ↦ {y, z}` means that `x` may occur in `dvdCnstrs`, `lowers`, or `uppers` of\nvariables `y` and `z`.\nIf `x` occurs in `dvdCnstrs[y]`, `lowers[y]`, or `uppers[y]`, then `y` is in `occurs[x]`, but the reverse is not true.\nIf `x` is in `elimStack`, then `occurs[x]` is the empty set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.occurs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">occurs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.VarSet\">VarSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L192-L192","name":"Lean.Meta.Grind.Arith.Cutsat.State.terms","line":192,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.terms","doc":"Mapping from terms (e.g., `x + 2*y + 2`, `3*x`, `5`) to polynomials representing them.\nThese are terms used to propagate equalities between this module and the congruence closure module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.terms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">terms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ENodeKey.html#Lean.Meta.Grind.ENodeKey\">ENodeKey</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L187-L187","name":"Lean.Meta.Grind.Arith.Cutsat.State.elimStack","line":187,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.elimStack","doc":"Elimination stack. For every variable in `elimStack`. If `x` in `elimStack`, then `elimEqs[x]` is not `none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.elimStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">elimStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L183-L183","name":"Lean.Meta.Grind.Arith.Cutsat.State.elimEqs","line":183,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.elimEqs","doc":"Mapping from variable to equation constraint used to eliminate it. `solved` variables should not occur in\n`dvdCnstrs`, `lowers`, or `uppers`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.elimEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">elimEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L178-L178","name":"Lean.Meta.Grind.Arith.Cutsat.State.diseqs","line":178,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.diseqs","doc":"Mapping from variables to their disequalities. We say a disequality constraint `c` is a disequality for a variable `x`\nif `x` is the maximal variable in `c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.diseqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">diseqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L173-L173","name":"Lean.Meta.Grind.Arith.Cutsat.State.uppers","line":173,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.uppers","doc":"Mapping from variables to their \"upper\" bounds. We say a relational constraint `c` is a upper bound for a variable `x`\nif `x` is the maximal variable in `c`, and `x` coefficient in `c` is positive.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.uppers\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">uppers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L168-L168","name":"Lean.Meta.Grind.Arith.Cutsat.State.lowers","line":168,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.lowers","doc":"Mapping from variables to their \"lower\" bounds. We say a relational constraint `c` is a lower bound for a variable `x`\nif `x` is the maximal variable in `c`, and `x` coefficient in `c` is negative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.lowers\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">lowers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L163-L163","name":"Lean.Meta.Grind.Arith.Cutsat.State.dvds","line":163,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.dvds","doc":"Mapping from variables to divisibility constraints. Recall that we keep the divisibility constraint in solved form.\nThus, we have at most one divisibility per variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.dvds\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">dvds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L159-L159","name":"Lean.Meta.Grind.Arith.Cutsat.State.varMap","line":159,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.varMap","doc":"Mapping from `Expr` to a variable representing it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.varMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">varMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ENodeKey.html#Lean.Meta.Grind.ENodeKey\">ENodeKey</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L157-L157","name":"Lean.Meta.Grind.Arith.Cutsat.State.vars","line":157,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.vars","doc":"Mapping from variables to their denotations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">vars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L155-L155","name":"Lean.Meta.Grind.Arith.Cutsat.State.mk","line":155,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vars</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ENodeKey.html#Lean.Meta.Grind.ENodeKey\">ENodeKey</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dvds</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lowers </span><span class=\"fn\">uppers</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diseqs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimEqs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimStack</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">terms</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ENodeKey.html#Lean.Meta.Grind.ENodeKey\">ENodeKey</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occurs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.VarSet\">VarSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Std/Internal/Rat.html#Std.Internal.Rat\">Rat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextCnstrId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">caseSplits</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">conflict?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof\">UnsatProof</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diseqSplits</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L154-L225","name":"Lean.Meta.Grind.Arith.Cutsat.State","line":154,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State","doc":"State of the cutsat procedure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L152-L152","name":"Lean.Meta.Grind.Arith.Cutsat.VarSet","line":152,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.VarSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.VarSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">VarSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L149-L150","name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedDvdCnstr","line":149,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedDvdCnstr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedDvdCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">instInhabitedDvdCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L145-L145","name":"Lean.Meta.Grind.Arith.Cutsat.UnsatProof.diseq","line":145,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof.diseq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof.diseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">UnsatProof</span>.<span class=\"name\">diseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof\">UnsatProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L144-L144","name":"Lean.Meta.Grind.Arith.Cutsat.UnsatProof.eq","line":144,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">UnsatProof</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof\">UnsatProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L143-L143","name":"Lean.Meta.Grind.Arith.Cutsat.UnsatProof.le","line":143,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof.le\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">UnsatProof</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof\">UnsatProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L142-L142","name":"Lean.Meta.Grind.Arith.Cutsat.UnsatProof.dvd","line":142,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof.dvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof.dvd\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">UnsatProof</span>.<span class=\"name\">dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof\">UnsatProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L137-L145","name":"Lean.Meta.Grind.Arith.Cutsat.UnsatProof","line":137,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof","doc":"A proof of `False`.\nRemark: We will later add support for a backtraking search inside of cutsat.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">UnsatProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L135-L135","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.subst","line":135,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L134-L134","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.neg","line":134,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L133-L133","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.divCoeffs","line":133,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.divCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.divCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">divCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L132-L132","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.norm","line":132,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L131-L131","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.core","line":131,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L130-L130","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.expr","line":130,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstrProof</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L129-L135","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof","line":129,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstrProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L127-L127","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.id","line":127,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L126-L126","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.h","line":126,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.h","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof\">DiseqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L125-L125","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.p","line":125,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.p","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.p\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">p</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L124-L124","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.mk","line":124,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstrProof\">DiseqCnstrProof</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L123-L127","name":"Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr","line":123,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr","doc":"A disequality constraint and its justification/proof. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DiseqCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L120-L120","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.ofDiseqSplit","line":120,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.ofDiseqSplit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.ofDiseqSplit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstrProof</span>.<span class=\"name\">ofDiseqSplit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decVar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof\">UnsatProof</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\">LeCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L119-L119","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.ofLeDiseq","line":119,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.ofLeDiseq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.ofLeDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstrProof</span>.<span class=\"name\">ofLeDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\">LeCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L118-L118","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.subst","line":118,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstrProof</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\">LeCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L117-L117","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.combine","line":117,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstrProof</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\">LeCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L116-L116","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.divCoeffs","line":116,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.divCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.divCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstrProof</span>.<span class=\"name\">divCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\">LeCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L115-L115","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.norm","line":115,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstrProof</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\">LeCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L114-L114","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.notExpr","line":114,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.notExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.notExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstrProof</span>.<span class=\"name\">notExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\">LeCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L113-L113","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.expr","line":113,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstrProof</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\">LeCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L112-L120","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof","line":112,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstrProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L110-L110","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstr.id","line":110,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstr</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L109-L109","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstr.h","line":109,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr.h","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstr</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\">LeCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L108-L108","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstr.p","line":108,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr.p","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr.p\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstr</span>.<span class=\"name\">p</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L107-L107","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstr.mk","line":107,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstrProof\">LeCnstrProof</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L106-L110","name":"Lean.Meta.Grind.Arith.Cutsat.LeCnstr","line":106,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr","doc":"An inequality constraint and its justification/proof. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">LeCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L104-L104","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.subst","line":104,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstrProof</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\">DvdCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L103-L103","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.ofEq","line":103,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.ofEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.ofEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstrProof</span>.<span class=\"name\">ofEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\">DvdCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L102-L102","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.elim","line":102,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.elim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.elim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstrProof</span>.<span class=\"name\">elim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\">DvdCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L101-L101","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.solveElim","line":101,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.solveElim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.solveElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstrProof</span>.<span class=\"name\">solveElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\">DvdCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L100-L100","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.solveCombine","line":100,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.solveCombine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.solveCombine\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstrProof</span>.<span class=\"name\">solveCombine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\">DvdCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L99-L99","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.divCoeffs","line":99,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.divCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.divCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstrProof</span>.<span class=\"name\">divCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\">DvdCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L98-L98","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.norm","line":98,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstrProof</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\">DvdCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L97-L97","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.expr","line":97,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstrProof</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\">DvdCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L96-L104","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof","line":96,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstrProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L94-L94","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.id","line":94,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.id","doc":"Unique id for caching proofs in `ProofM` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstr</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L92-L92","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.h","line":92,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.h","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstr</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\">DvdCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L91-L91","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.p","line":91,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.p","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.p\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstr</span>.<span class=\"name\">p</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L90-L90","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.d","line":90,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.d","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.d\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstr</span>.<span class=\"name\">d</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L89-L89","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.mk","line":89,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstrProof\">DvdCnstrProof</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\">DvdCnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L88-L94","name":"Lean.Meta.Grind.Arith.Cutsat.DvdCnstr","line":88,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr","doc":"A divisibility constraint and its justification/proof. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DvdCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">DvdCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L86-L86","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.ofLeGe","line":86,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.ofLeGe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.ofLeGe\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">ofLeGe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.LeCnstr\">LeCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L85-L85","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.subst","line":85,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.subst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L84-L84","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.divCoeffs","line":84,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.divCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.divCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">divCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L83-L83","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.norm","line":83,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L82-L82","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.core","line":82,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L81-L81","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.expr","line":81,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstrProof</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L80-L86","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof","line":80,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstrProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L78-L78","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstr.id","line":78,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L77-L77","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstr.h","line":77,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr.h","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof\">EqCnstrProof</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L76-L76","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstr.p","line":76,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr.p","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr.p\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">p</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L75-L75","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstr.mk","line":75,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstrProof\">EqCnstrProof</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\">EqCnstr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L74-L78","name":"Lean.Meta.Grind.Arith.Cutsat.EqCnstr","line":74,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr","doc":"A equality constraint and its justification/proof. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.EqCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">EqCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.lean#L18-L18","name":"Lean.Meta.Grind.Arith.Cutsat.instHashablePoly_lean","line":18,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.instHashablePoly_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.instHashablePoly_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">instHashablePoly_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></div></div>"}]}