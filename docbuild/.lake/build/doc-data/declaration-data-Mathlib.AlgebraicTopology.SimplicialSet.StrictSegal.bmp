{"name":"Mathlib.AlgebraicTopology.SimplicialSet.StrictSegal","instances":[{"typeNames":["CategoryTheory.nerve"],"name":"CategoryTheory.Nerve.strictSegal","className":"SSet.StrictSegal"}],"imports":["Init","Mathlib.AlgebraicTopology.SimplicialSet.Nerve","Mathlib.AlgebraicTopology.SimplicialSet.Path","Mathlib.CategoryTheory.Functor.KanExtension.Adjunction","Mathlib.CategoryTheory.Functor.KanExtension.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L169-L189","name":"CategoryTheory.Nerve.strictSegal","line":169,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#CategoryTheory.Nerve.strictSegal","doc":"Simplices in the nerve of categories are uniquely determined by their spine. Indeed, this\nproperty describes the essential image of the nerve functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#CategoryTheory.Nerve.strictSegal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Nerve</span>.<span class=\"name\">strictSegal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerve\">nerve</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L150-L159","name":"SSet.StrictSegal.spine_δ_arrow_eq","line":150,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_eq","doc":"If we take the path along the spine of a face of a `spineToSimplex`, the\narrows not contained in the original path can be recovered as the diagonal edge\nof the `spineToSimplex` that \"composes\" arrows `i` and `i + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_eq\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_arrow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.δ\">CategoryTheory.SimplicialObject.δ</a> <span class=\"fn\">X</span> <span class=\"fn\">j</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToDiagonal\">spineToDiagonal</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.interval\">interval</a></span> <span class=\"fn\">(↑<span class=\"fn\">i</span>)</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L140-L148","name":"SSet.StrictSegal.spine_δ_arrow_gt","line":140,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_gt","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\nan arrow `i` with `i + 1 > j` can be identified with arrow `i + 1` in the\noriginal path. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_gt\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_arrow_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.δ\">CategoryTheory.SimplicialObject.δ</a> <span class=\"fn\">X</span> <span class=\"fn\">j</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L130-L138","name":"SSet.StrictSegal.spine_δ_arrow_lt","line":130,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_lt","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\nthe common arrows will agree with those of the original path `f`. In particular,\nan arrow `i` with `i + 1 < j` can be identified with the same arrow in `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_arrow_lt\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_arrow_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.δ\">CategoryTheory.SimplicialObject.δ</a> <span class=\"fn\">X</span> <span class=\"fn\">j</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L117-L128","name":"SSet.StrictSegal.spine_δ_vertex_ge","line":117,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_vertex_ge","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\na vertex `i` with `i ≥ j` can be identified with vertex `i + 1` in the original\npath. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_vertex_ge\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_vertex_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.δ\">CategoryTheory.SimplicialObject.δ</a> <span class=\"fn\">X</span> <span class=\"fn\">j</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.vertex\">vertex</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.vertex\">vertex</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L104-L115","name":"SSet.StrictSegal.spine_δ_vertex_lt","line":104,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_vertex_lt","doc":"If we take the path along the spine of the `j`th face of a `spineToSimplex`,\nthe common vertices will agree with those of the original path `f`. In particular,\na vertex `i` with `i < j` can be identified with the same vertex in `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_δ_vertex_lt\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_δ_vertex_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.δ\">CategoryTheory.SimplicialObject.δ</a> <span class=\"fn\">X</span> <span class=\"fn\">j</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.vertex\">vertex</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.vertex\">vertex</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L93-L102","name":"SSet.StrictSegal.spineToSimplex_map","line":93,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_map","doc":"For any `σ : X ⟶ Y` between `StrictSegal` simplicial sets, `spineToSimplex`\ncommutes with `Path.map`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_map\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.map\">map</a></span> <span class=\"fn\">σ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L85-L91","name":"SSet.StrictSegal.spineToSimplex_edge","line":85,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_edge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_edge\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j </span><span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hjl</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.intervalEdge\">SimplexCategory.intervalEdge</a> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToDiagonal\">spineToDiagonal</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.interval\">interval</a></span> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L74-L83","name":"SSet.StrictSegal.spineToSimplex_interval","line":74,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_interval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_interval\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_interval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j </span><span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hjl</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.subinterval\">SimplexCategory.subinterval</a> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.interval\">interval</a></span> <span class=\"fn\">j</span> <span class=\"fn\">l</span> <span class=\"fn\">hjl</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L70-L72","name":"SSet.StrictSegal.spineToDiagonal","line":70,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToDiagonal","doc":"In the presence of the strict Segal condition, a path of length `n` can be \"composed\" by taking\nthe diagonal edge of the resulting `n`-simplex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToDiagonal\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToDiagonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">1</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L65-L68","name":"SSet.StrictSegal.spineToSimplex_arrow","line":65,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_arrow\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.mkOfSucc\">SimplexCategory.mkOfSucc</a> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.arrow\">arrow</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L60-L63","name":"SSet.StrictSegal.spineToSimplex_vertex","line":60,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_vertex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_vertex\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_vertex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">0</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.const\">const</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path.vertex\">vertex</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L58-L58","name":"SSet.StrictSegal.spineInjective","line":58,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineInjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineInjective\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineInjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineEquiv\">spineEquiv</a> <span class=\"fn\">n</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L51-L56","name":"SSet.StrictSegal.spineEquiv","line":51,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineEquiv","doc":"The fields of `StrictSegal` define an equivalence between `X _⦋n⦌` and `Path X n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineEquiv\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L46-L46","name":"SSet.StrictSegal.spineToSimplex_spine","line":46,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_spine","doc":"`spineToSimplex` is a left inverse to `X.spine n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex_spine\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex_spine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Δ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">Δ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Δ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L44-L44","name":"SSet.StrictSegal.spine_spineToSimplex","line":44,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_spineToSimplex","doc":"`spineToSimplex` is a right inverse to `X.spine n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spine_spineToSimplex\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spine_spineToSimplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\">spineToSimplex</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L42-L42","name":"SSet.StrictSegal.spineToSimplex","line":42,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex","doc":"The inverse to `X.spine n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.spineToSimplex\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">spineToSimplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L40-L40","name":"SSet.StrictSegal.mk","line":40,"kind":"ctor","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal.mk\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spineToSimplex</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spine_spineToSimplex</span> : <span class=\"fn\">∀ {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.Path\">Path</a></span> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\">spineToSimplex</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spineToSimplex_spine</span> : <span class=\"fn\">∀ {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} (<span class=\"fn\">Δ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span>), <span class=\"fn\"><span class=\"fn\">spineToSimplex</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Path.html#SSet.spine\">spine</a></span> <span class=\"fn\">n</span> <span class=\"fn\">Δ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Δ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.lean#L38-L46","name":"SSet.StrictSegal","line":38,"kind":"class","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal","doc":"A simplicial set `X` satisfies the strict Segal condition if its simplices are uniquely\ndetermined by their spine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}