{"log":
 [{"message":
   ".> ELAN=elan ELAN_HOME=/Users/marcodessalvi/.elan ELAN_TOOLCHAIN=leanprover/lean4:v4.18.0 LAKE=/Users/marcodessalvi/.elan/toolchains/leanprover--lean4---v4.18.0/bin/lake LAKE_HOME=/Users/marcodessalvi/.elan/toolchains/leanprover--lean4---v4.18.0 LAKE_PKG_URL_MAP={} LEAN=/Users/marcodessalvi/.elan/toolchains/leanprover--lean4---v4.18.0/bin/lean LEAN_GITHASH=11ccbced796476be020459a83c599b301a765d3e LEAN_SYSROOT=/Users/marcodessalvi/.elan/toolchains/leanprover--lean4---v4.18.0 LEAN_AR=/Users/marcodessalvi/.elan/toolchains/leanprover--lean4---v4.18.0/bin/llvm-ar LEAN_CC= LEAN_PATH=././../.lake/packages/batteries/.lake/build/lib/lean:././../.lake/packages/Qq/.lake/build/lib/lean:././../.lake/packages/aesop/.lake/build/lib/lean:././../.lake/packages/proofwidgets/.lake/build/lib/lean:././../.lake/packages/importGraph/.lake/build/lib/lean:././../.lake/packages/LeanSearchClient/.lake/build/lib/lean:././../.lake/packages/plausible/.lake/build/lib/lean:././../.lake/packages/mathlib/.lake/build/lib/lean:././../.lake/packages/MD4Lean/.lake/build/lib/lean:././../.lake/packages/BibtexQuery/.lake/build/lib/lean:././../.lake/packages/UnicodeBasic/.lake/build/lib/lean:././../.lake/packages/Cli/.lake/build/lib/lean:./././..//.lake/build/lib/lean:././../.lake/packages/doc-gen4/.lake/build/lib/lean:././.lake/build/lib/lean:/Users/marcodessalvi/.elan/toolchains/leanprover--lean4---v4.18.0/lib/lean LEAN_SRC_PATH=././../.lake/packages/batteries/./.:././../.lake/packages/batteries/./.:././../.lake/packages/Qq/./.:././../.lake/packages/aesop/./.:././../.lake/packages/aesop/./.:././../.lake/packages/proofwidgets/./.:././../.lake/packages/proofwidgets/./.:././../.lake/packages/importGraph/./.:././../.lake/packages/importGraph/./.:././../.lake/packages/LeanSearchClient/./.:././../.lake/packages/LeanSearchClient/./.:././../.lake/packages/plausible/./.:././../.lake/packages/plausible/./.:././../.lake/packages/mathlib/./.:././../.lake/packages/mathlib/./.:././../.lake/packages/mathlib/./.:././../.lake/packages/mathlib/./.:././../.lake/packages/mathlib/./.:././../.lake/packages/mathlib/./.:././../.lake/packages/mathlib/./.:././../.lake/packages/MD4Lean/./.:././../.lake/packages/MD4Lean/./.:././../.lake/packages/BibtexQuery/./.:././../.lake/packages/UnicodeBasic/./.:././../.lake/packages/UnicodeBasic/./.:././../.lake/packages/Cli/./.:./././..//./.:./././..//./.:././../.lake/packages/doc-gen4/./.:/Users/marcodessalvi/.elan/toolchains/leanprover--lean4---v4.18.0/src/lean/lake PATH DYLD_LIBRARY_PATH=././.lake/build/lib:././../.lake/packages/doc-gen4/.lake/build/lib:./././..//.lake/build/lib:././../.lake/packages/Cli/.lake/build/lib:././../.lake/packages/UnicodeBasic/.lake/build/lib:././../.lake/packages/BibtexQuery/.lake/build/lib:././../.lake/packages/MD4Lean/.lake/build/lib:././../.lake/packages/mathlib/.lake/build/lib:././../.lake/packages/plausible/.lake/build/lib:././../.lake/packages/LeanSearchClient/.lake/build/lib:././../.lake/packages/importGraph/.lake/build/lib:././../.lake/packages/proofwidgets/.lake/build/lib:././../.lake/packages/aesop/.lake/build/lib:././../.lake/packages/Qq/.lake/build/lib:././../.lake/packages/batteries/.lake/build/lib:/Users/marcodessalvi/.elan/toolchains/leanprover--lean4---v4.18.0/lib/lean:/Users/marcodessalvi/.elan/toolchains/leanprover--lean4---v4.18.0/lib ././../.lake/packages/doc-gen4/.lake/build/bin/doc-gen4 genCore Lean --build ././.lake/build",
   "level": "trace"},
  {"message":
   "stdout:\nWARNING: Failed to calculate equational lemmata for Lean.Meta.LazyDiscrTree.blacklistInsertion: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Meta.reduceNat?: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Syntax.isQuot: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.diagnose.transformEquation: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Server.FileWorker.setupFile: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Meta.FindSplitImpl.visit: maximum recursion depth has been reached\nuse `set_option maxRecDepth <num>` to increase limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Meta.caseValues.loop: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Eqns.removeUnusedEqnHypotheses.go: tactic 'simp' failed, nested error:\n(deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.\n\nAdditional diagnostic information may be available using the `set_option diagnostics true` command.\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Term.Quotation.ArrayStxBuilder.mkNode: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Command.elabMacroRulesAux: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Compiler.LCNF.AlphaEqv.eqvType: tactic 'simp' failed, nested error:\n(deterministic) timeout at `simp`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.\n\nAdditional diagnostic information may be available using the `set_option diagnostics true` command.\nWARNING: Failed to calculate equational lemmata for Lean.Server.Watchdog.handleRequest: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Expr.hasAnyFVar.visit: tactic 'simp' failed, nested error:\n(deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.\n\nAdditional diagnostic information may be available using the `set_option diagnostics true` command.\nWARNING: Failed to calculate equational lemmata for Lean.Meta.kabstract.visit: tactic 'simp' failed, nested error:\n(deterministic) timeout at `simp`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.\n\nAdditional diagnostic information may be available using the `set_option diagnostics true` command.\nWARNING: Failed to calculate equational lemmata for Lean.Server.Completion.dotIdCompletion: (deterministic) timeout at `isDefEq`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Expr.replaceNoCache: tactic 'simp' failed, nested error:\n(deterministic) timeout at `simp`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.\n\nAdditional diagnostic information may be available using the `set_option diagnostics true` command.\nWARNING: Failed to calculate equational lemmata for Lean.Expr.isAppOfArity': (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Tactic.Ext.realizeExtIffTheorem: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.CodeAction.holeCodeActionProvider: failed to generate equality theorems for `match` expression `Lean.CodeAction.holeCodeActionProvider.match_3`\ncase isTrue\nmotive : Array (Lean.Elab.ContextInfo × Lean.Elab.TermInfo) → Sort u_1\nx✝¹ : Array (Lean.Elab.ContextInfo × Lean.Elab.TermInfo)\nh_1 : (ctx : Lean.Elab.ContextInfo) → (info : Lean.Elab.TermInfo) → motive #[(ctx, info)]\nh_2 : (x : Array (Lean.Elab.ContextInfo × Lean.Elab.TermInfo)) → motive x\nx✝ : ∀ (ctx : Lean.Elab.ContextInfo) (info : Lean.Elab.TermInfo), x✝¹ = #[(ctx, info)] → False\nh✝ : x✝¹.size = 1\n⊢ (⋯ ▸ fun (h : 1 = x✝¹.size) =>\n        ⋯ ▸ Prod.casesOn (x✝¹.getLit 0 ⋯ ⋯) fun (fst : Lean.Elab.ContextInfo) (snd : Lean.Elab.TermInfo) => h_1 fst snd)\n      ⋯ =\n    h_2 x✝¹\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Tactic.evalGrindCore: (deterministic) timeout at `isDefEq`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Expr.instantiateLevelParamsCore.replaceFn: maximum recursion depth has been reached\nuse `set_option maxRecDepth <num>` to increase limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Server.Watchdog.handleNotification: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Command.elabElabRulesAux: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.ForEachExpr.visit: tactic 'simp' failed, nested error:\n(deterministic) timeout at `isDefEq`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.\n\nAdditional diagnostic information may be available using the `set_option diagnostics true` command.\nWARNING: Failed to calculate equational lemmata for Lean.Expr.stripArgsN: tactic 'simp' failed, nested error:\n(deterministic) timeout at `isDefEq`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.\n\nAdditional diagnostic information may be available using the `set_option diagnostics true` command.\nWARNING: Failed to calculate equational lemmata for Lean.PrettyPrinter.Delaborator.SubExpr.withBoundedAppFnArgs: failed to generate equational theorem for 'Lean.PrettyPrinter.Delaborator.SubExpr.withBoundedAppFnArgs'\ncase succ\nα : Type\nm : Type → Type\ninst : Monad m\ninst_1 : MonadReaderOf Lean.SubExpr m\ninst_2 : MonadWithReaderOf Lean.SubExpr m\nxf : m α\nxa : α → m α\nn : Nat\n⊢ (do\n      let __do_lift ← Lean.PrettyPrinter.Delaborator.SubExpr.getExpr\n      (match (motive :=\n            (maxArgs : Nat) →\n              Lean.Expr → Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => (m α → (α → m α) → m α) ×' n_ih) maxArgs → m α)\n            n.succ, __do_lift with\n          | maxArgs'.succ, fn.app arg =>\n            fun\n              (x :\n                (m α → (α → m α) → m α) ×'\n                  Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => (m α → (α → m α) → m α) ×' n_ih) maxArgs') =>\n            do\n            let acc ← Lean.PrettyPrinter.Delaborator.SubExpr.withAppFn (x.1 xf xa)\n            Lean.PrettyPrinter.Delaborator.SubExpr.withAppArg (xa acc)\n          | x, x_1 => fun (x : Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => (m α → (α → m α) → m α) ×' n_ih) x) => xf)\n          (Nat.rec\n            ⟨fun (xf : m α) (xa : α → m α) => do\n              let _ ← Lean.PrettyPrinter.Delaborator.SubExpr.getExpr\n              xf, PUnit.unit⟩\n            (fun (n : Nat)\n                (n_ih :\n                  (m α → (α → m α) → m α) ×'\n                    Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => (m α → (α → m α) → m α) ×' n_ih) n) =>\n              ⟨fun (xf : m α) (xa : α → m α) => do\n                let __do_lift ← Lean.PrettyPrinter.Delaborator.SubExpr.getExpr\n                (match (motive :=\n                      (maxArgs : Nat) →\n                        Lean.Expr →\n                          Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => (m α → (α → m α) → m α) ×' n_ih) maxArgs → m α)\n                      n.succ, __do_lift with\n                    | maxArgs'.succ, fn.app arg =>\n                      fun\n                        (x :\n                          (m α → (α → m α) → m α) ×'\n                            Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => (m α → (α → m α) → m α) ×' n_ih) maxArgs') =>\n                      do\n                      let acc ← Lean.PrettyPrinter.Delaborator.SubExpr.withAppFn (x.1 xf xa)\n                      Lean.PrettyPrinter.Delaborator.SubExpr.withAppArg (xa acc)\n                    | x, x_1 =>\n                      fun (x : Nat.rec PUnit (fun (n : Nat) (n_ih : Type) => (m α → (α → m α) → m α) ×' n_ih) x) => xf)\n                    n_ih,\n                n_ih⟩)\n            n)) =\n    do\n    let __do_lift ← Lean.PrettyPrinter.Delaborator.SubExpr.getExpr\n    match n.succ, __do_lift with\n      | maxArgs'.succ, fn.app arg => do\n        let acc ←\n          Lean.PrettyPrinter.Delaborator.SubExpr.withAppFn\n              (Lean.PrettyPrinter.Delaborator.SubExpr.withBoundedAppFnArgs maxArgs' xf xa)\n        Lean.PrettyPrinter.Delaborator.SubExpr.withAppArg (xa acc)\n      | x, x_1 => xf\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Term.resolveId?: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Term.mkCoe: maximum recursion depth has been reached\nuse `set_option maxRecDepth <num>` to increase limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.Meta.CheckAssignmentQuick.checkImpl.visit: maximum recursion depth has been reached\nuse `set_option maxRecDepth <num>` to increase limit\nuse `set_option diagnostics true` to get diagnostic information\nWARNING: Failed to calculate equational lemmata for Lean.IR.Expr.alphaEqv: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.IR.EmitC.emitDeclAux: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Meta.AC.toACExpr.toPreExpr: tactic 'simp' failed, nested error:\n(deterministic) timeout at `simp`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.\n\nAdditional diagnostic information may be available using the `set_option diagnostics true` command.\nWARNING: Failed to calculate equational lemmata for Lean.Server.moduleFromDocumentUri: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Compiler.atMostOnce.visit: tactic 'simp' failed, nested error:\n(deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.\n\nAdditional diagnostic information may be available using the `set_option diagnostics true` command.\nWARNING: Failed to calculate equational lemmata for Lean.Server.FileWorker.handleNotification: (deterministic) timeout at `isDefEq`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Elab.Term.withRestoreOrSaveFull: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for Lean.Expr.name?: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)\nWARNING: Failed to calculate equational lemmata for System.SearchPath.searchModuleNameOfUri: (deterministic) timeout at `whnf`, maximum number of heartbeats (5000) has been reached\nUse `set_option maxHeartbeats <num>` to set the limit.(invalid MessageData.lazy, missing context)",
   "level": "info"}],
 "depHash": "7418905925098472973"}