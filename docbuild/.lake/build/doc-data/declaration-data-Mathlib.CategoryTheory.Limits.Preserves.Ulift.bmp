{"name":"Mathlib.CategoryTheory.Limits.Preserves.Ulift","instances":[{"typeNames":["CategoryTheory.uliftFunctor"],"name":"CategoryTheory.Limits.Types.instPreservesLimitsOfSizeUliftFunctor","className":"CategoryTheory.Limits.PreservesLimitsOfSize"},{"typeNames":["CategoryTheory.uliftFunctor"],"name":"CategoryTheory.Limits.Types.instCreatesLimitsOfSizeUliftFunctor","className":"CategoryTheory.CreatesLimitsOfSize"},{"typeNames":["CategoryTheory.uliftFunctor"],"name":"CategoryTheory.Limits.Types.instPreservesColimitsOfSizeUliftFunctor","className":"CategoryTheory.Limits.PreservesColimitsOfSize"},{"typeNames":["CategoryTheory.uliftFunctor"],"name":"CategoryTheory.Limits.Types.instCreatesColimitsOfSizeUliftFunctor","className":"CategoryTheory.CreatesColimitsOfSize"}],"imports":["Init","Mathlib.CategoryTheory.Limits.Creates","Mathlib.CategoryTheory.Limits.Types","Mathlib.Data.Set.Subsingleton"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/CategoryTheory/Limits/Preserves/Ulift.lean#L71-L76","name":"CategoryTheory.Limits.Types.instCreatesColimitsOfSizeUliftFunctor","line":71,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Ulift.html#CategoryTheory.Limits.Types.instCreatesColimitsOfSizeUliftFunctor","doc":"The functor `uliftFunctor : Type u ⥤ Type (max u v)` creates `u`-small colimits.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Preserves/Ulift.html#CategoryTheory.Limits.Types.instCreatesColimitsOfSizeUliftFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">Types</span>.<span class=\"name\">instCreatesColimitsOfSizeUliftFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Creates.html#CategoryTheory.CreatesColimitsOfSize\">CreatesColimitsOfSize.{w, u, u, max u v, u + 1, max (u + 1) (v + 1)}</a> <a href=\"./Mathlib/CategoryTheory/Types.html#CategoryTheory.uliftFunctor\">uliftFunctor.{v, u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/CategoryTheory/Limits/Preserves/Ulift.lean#L60-L69","name":"CategoryTheory.Limits.Types.instPreservesColimitsOfSizeUliftFunctor","line":60,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Ulift.html#CategoryTheory.Limits.Types.instPreservesColimitsOfSizeUliftFunctor","doc":"The functor `uliftFunctor : Type u ⥤ Type (max u v)` preserves colimits of arbitrary size.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Preserves/Ulift.html#CategoryTheory.Limits.Types.instPreservesColimitsOfSizeUliftFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">Types</span>.<span class=\"name\">instPreservesColimitsOfSizeUliftFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesColimitsOfSize\">PreservesColimitsOfSize.{w', w, u, max u v, u + 1, max (u + 1) (v + 1)}</a> <a href=\"./Mathlib/CategoryTheory/Types.html#CategoryTheory.uliftFunctor\">uliftFunctor.{v, u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/CategoryTheory/Limits/Preserves/Ulift.lean#L51-L55","name":"CategoryTheory.Limits.Types.instCreatesLimitsOfSizeUliftFunctor","line":51,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Ulift.html#CategoryTheory.Limits.Types.instCreatesLimitsOfSizeUliftFunctor","doc":"The functor `uliftFunctor : Type u ⥤ Type (max u v)` creates `u`-small limits.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Preserves/Ulift.html#CategoryTheory.Limits.Types.instCreatesLimitsOfSizeUliftFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">Types</span>.<span class=\"name\">instCreatesLimitsOfSizeUliftFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Creates.html#CategoryTheory.CreatesLimitsOfSize\">CreatesLimitsOfSize.{w, u, u, max u v, u + 1, max (u + 1) (v + 1)}</a> <a href=\"./Mathlib/CategoryTheory/Types.html#CategoryTheory.uliftFunctor\">uliftFunctor.{v, u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/CategoryTheory/Limits/Preserves/Ulift.lean#L38-L49","name":"CategoryTheory.Limits.Types.instPreservesLimitsOfSizeUliftFunctor","line":38,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Ulift.html#CategoryTheory.Limits.Types.instPreservesLimitsOfSizeUliftFunctor","doc":"The functor `uliftFunctor : Type u ⥤ Type (max u v)` preserves limits of arbitrary size.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Preserves/Ulift.html#CategoryTheory.Limits.Types.instPreservesLimitsOfSizeUliftFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">Types</span>.<span class=\"name\">instPreservesLimitsOfSizeUliftFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Basic.html#CategoryTheory.Limits.PreservesLimitsOfSize\">PreservesLimitsOfSize.{w', w, u, max u v, u + 1, max (u + 1) (v + 1)}</a> <a href=\"./Mathlib/CategoryTheory/Types.html#CategoryTheory.uliftFunctor\">uliftFunctor.{v, u}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/CategoryTheory/Limits/Preserves/Ulift.lean#L26-L36","name":"CategoryTheory.Limits.Types.sectionsEquiv","line":26,"kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Preserves/Ulift.html#CategoryTheory.Limits.Types.sectionsEquiv","doc":"The equivalence between `K.sections` and `(K ⋙ uliftFunctor.{v, u}).sections`. This is used to show\nthat `uliftFunctor` preserves limits that are potentially too large to exist in the source\ncategory.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Preserves/Ulift.html#CategoryTheory.Limits.Types.sectionsEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">Types</span>.<span class=\"name\">sectionsEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">J</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">J</span> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">K</span>.<a href=\"./Mathlib/CategoryTheory/Types.html#CategoryTheory.Functor.sections\">sections</a></span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">K</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <a href=\"./Mathlib/CategoryTheory/Types.html#CategoryTheory.uliftFunctor\">uliftFunctor.{v, u}</a>)</span>.<a href=\"./Mathlib/CategoryTheory/Types.html#CategoryTheory.Functor.sections\">sections</a></span></span></div></div>"}]}