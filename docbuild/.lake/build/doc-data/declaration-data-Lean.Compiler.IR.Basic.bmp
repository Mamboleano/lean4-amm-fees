{"name":"Lean.Compiler.IR.Basic","instances":[{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instInhabitedVarId","className":"Inhabited"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instReprVarId","className":"Repr"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instInhabitedJoinPointId","className":"Inhabited"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instReprJoinPointId","className":"Repr"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instBEqVarId","className":"BEq"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instToStringVarId","className":"ToString"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instToFormatVarId","className":"Std.ToFormat"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instHashableVarId","className":"Hashable"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instBEqJoinPointId","className":"BEq"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instToStringJoinPointId","className":"ToString"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instToFormatJoinPointId","className":"Std.ToFormat"},{"typeNames":["Lean.IR.JoinPointId"],"name":"Lean.IR.instHashableJoinPointId","className":"Hashable"},{"typeNames":["Lean.IR.IRType"],"name":"Lean.IR.instInhabitedIRType","className":"Inhabited"},{"typeNames":["Lean.IR.IRType"],"name":"Lean.IR.instReprIRType","className":"Repr"},{"typeNames":["Lean.IR.IRType"],"name":"Lean.IR.IRType.instBEq","className":"BEq"},{"typeNames":["Lean.IR.Arg"],"name":"Lean.IR.instInhabitedArg","className":"Inhabited"},{"typeNames":["Lean.IR.Arg"],"name":"Lean.IR.instBEqArg","className":"BEq"},{"typeNames":["Lean.IR.LitVal"],"name":"Lean.IR.instBEqLitVal","className":"BEq"},{"typeNames":["Lean.IR.CtorInfo"],"name":"Lean.IR.instReprCtorInfo","className":"Repr"},{"typeNames":["Lean.IR.CtorInfo"],"name":"Lean.IR.instBEqCtorInfo","className":"BEq"},{"typeNames":["Lean.IR.Param"],"name":"Lean.IR.instInhabitedParam","className":"Inhabited"},{"typeNames":["Lean.IR.Param"],"name":"Lean.IR.instReprParam","className":"Repr"},{"typeNames":["Lean.IR.FnBody"],"name":"Lean.IR.instInhabitedFnBody","className":"Inhabited"},{"typeNames":["Lean.IR.Alt"],"name":"Lean.IR.instInhabitedAlt","className":"Inhabited"},{"typeNames":["Lean.IR.Decl"],"name":"Lean.IR.instInhabitedDecl","className":"Inhabited"},{"typeNames":["Lean.IR.IndexSet"],"name":"Lean.IR.instInhabitedIndexSet","className":"Inhabited"},{"typeNames":["Lean.IR.VarId"],"name":"Lean.IR.instAlphaEqvVarId","className":"Lean.IR.AlphaEqv"},{"typeNames":["Lean.IR.Arg"],"name":"Lean.IR.instAlphaEqvArg","className":"Lean.IR.AlphaEqv"},{"typeNames":["Array"],"name":"Lean.IR.instAlphaEqvArrayArg","className":"Lean.IR.AlphaEqv"},{"typeNames":["Lean.IR.Expr"],"name":"Lean.IR.instAlphaEqvExpr","className":"Lean.IR.AlphaEqv"},{"typeNames":["Lean.IR.FnBody"],"name":"Lean.IR.instBEqFnBody","className":"BEq"},{"typeNames":["Lean.IR.VarIdSet"],"name":"Lean.IR.instInhabitedVarIdSet","className":"Inhabited"}],"imports":["Lean.Data.KVMap","Lean.Data.Name","Lean.Data.Format","Lean.Compiler.ExternAttr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L615-L622","name":"Lean.IR.getUnboxOpName","line":615,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.getUnboxOpName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.getUnboxOpName\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">getUnboxOpName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L609-L613","name":"Lean.IR.mkIf","line":609,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIf\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkIf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L607-L607","name":"Lean.IR.instInhabitedVarIdSet","line":607,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarIdSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarIdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedVarIdSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarIdSet\">VarIdSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L606-L606","name":"Lean.IR.VarIdSet","line":606,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarIdSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarIdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarIdSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L604-L604","name":"Lean.IR.instBEqFnBody","line":604,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L601-L602","name":"Lean.IR.FnBody.beq","line":601,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L577-L599","name":"Lean.IR.FnBody.alphaEqv","line":577,"kind":"opaque","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.alphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L568-L575","name":"Lean.IR.addParamsRename","line":568,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamsRename","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamsRename\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">addParamsRename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps₁ </span><span class=\"fn\">ps₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L562-L566","name":"Lean.IR.addParamRename","line":562,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamRename","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamRename\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">addParamRename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L559-L560","name":"Lean.IR.addVarRename","line":559,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.addVarRename","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.addVarRename\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">addVarRename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L557-L557","name":"Lean.IR.instAlphaEqvExpr","line":557,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L541-L555","name":"Lean.IR.Expr.alphaEqv","line":541,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.alphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L539-L539","name":"Lean.IR.instAlphaEqvArrayArg","line":539,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArrayArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArrayArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvArrayArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L536-L537","name":"Lean.IR.args.alphaEqv","line":536,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.args.alphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.args.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">args</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args₁ </span><span class=\"fn\">args₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L534-L534","name":"Lean.IR.instAlphaEqvArg","line":534,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L529-L532","name":"Lean.IR.Arg.alphaEqv","line":529,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.alphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L527-L527","name":"Lean.IR.instAlphaEqvVarId","line":527,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L522-L525","name":"Lean.IR.VarId.alphaEqv","line":522,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.alphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v₁ </span><span class=\"fn\">v₂</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L518-L518","name":"Lean.IR.AlphaEqv.aeqv","line":518,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.aeqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.aeqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">aeqv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L517-L517","name":"Lean.IR.AlphaEqv.mk","line":517,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aeqv</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L517-L518","name":"Lean.IR.AlphaEqv","line":517,"kind":"class","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AlphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L515-L515","name":"Lean.IR.IndexRenaming","line":515,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IndexRenaming</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L510-L513","name":"Lean.IR.LocalContext.getValue","line":510,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getValue\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L504-L508","name":"Lean.IR.LocalContext.getType","line":504,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L501-L502","name":"Lean.IR.LocalContext.eraseJoinPointDecl","line":501,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.eraseJoinPointDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.eraseJoinPointDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">eraseJoinPointDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L498-L499","name":"Lean.IR.LocalContext.contains","line":498,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L493-L496","name":"Lean.IR.LocalContext.isLocalVar","line":493,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isLocalVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isLocalVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isLocalVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L488-L491","name":"Lean.IR.LocalContext.isParam","line":488,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L483-L486","name":"Lean.IR.LocalContext.getJPParams","line":483,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getJPParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L478-L481","name":"Lean.IR.LocalContext.getJPBody","line":478,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getJPBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L473-L476","name":"Lean.IR.LocalContext.isJP","line":473,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L470-L471","name":"Lean.IR.LocalContext.addParams","line":470,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L467-L468","name":"Lean.IR.LocalContext.addParam","line":467,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L464-L465","name":"Lean.IR.LocalContext.addJP","line":464,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L461-L462","name":"Lean.IR.LocalContext.addLocal","line":461,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addLocal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addLocal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addLocal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L459-L459","name":"Lean.IR.LocalContext","line":459,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L457-L457","name":"Lean.IR.LocalContextEntry.joinPoint","line":457,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.joinPoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.joinPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span>.<span class=\"name\">joinPoint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\">LocalContextEntry</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L456-L456","name":"Lean.IR.LocalContextEntry.localVar","line":456,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.localVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.localVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span>.<span class=\"name\">localVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\">LocalContextEntry</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L455-L455","name":"Lean.IR.LocalContextEntry.param","line":455,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.param","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.param\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span>.<span class=\"name\">param</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\">LocalContextEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L454-L457","name":"Lean.IR.LocalContextEntry","line":454,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L451-L452","name":"Lean.IR.mkIndexSet","line":451,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIndexSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIndexSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkIndexSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet\">IndexSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L449-L449","name":"Lean.IR.instInhabitedIndexSet","line":449,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIndexSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIndexSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedIndexSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet\">IndexSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L447-L448","name":"Lean.IR.IndexSet","line":447,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet","doc":"Set of variable and join point names "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IndexSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L444-L445","name":"Lean.IR.mkDummyExternDecl","line":444,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkDummyExternDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkDummyExternDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkDummyExternDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L440-L441","name":"Lean.IR.mkExternDecl","line":440,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkExternDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkExternDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkExternDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/ExternAttr.html#Lean.ExternAttrData\">ExternAttrData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L437-L438","name":"Lean.IR.mkDecl","line":437,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L430-L433","name":"Lean.IR.Decl.updateBody!","line":430,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.updateBody!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.updateBody!\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">updateBody!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bNew</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L426-L428","name":"Lean.IR.Decl.getInfo","line":426,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.getInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.getInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">getInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">DeclInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L422-L424","name":"Lean.IR.Decl.isExtern","line":422,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.isExtern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.isExtern\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">isExtern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L418-L420","name":"Lean.IR.Decl.resultType","line":418,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.resultType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.resultType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">resultType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L414-L416","name":"Lean.IR.Decl.params","line":414,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.params","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.params\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L410-L412","name":"Lean.IR.Decl.name","line":410,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.name\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L406-L406","name":"Lean.IR.instInhabitedDecl","line":406,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L405-L405","name":"Lean.IR.Decl.extern","line":405,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.extern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.extern\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">extern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Lean/Compiler/ExternAttr.html#Lean.ExternAttrData\">ExternAttrData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L404-L404","name":"Lean.IR.Decl.fdecl","line":404,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.fdecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.fdecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">fdecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">DeclInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L403-L406","name":"Lean.IR.Decl","line":403,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L401-L401","name":"Lean.IR.DeclInfo.sorryDep?","line":401,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.sorryDep?","doc":"If `some <blame>`, then declaration depends on `<blame>` which uses a `sorry` axiom. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.sorryDep?\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">DeclInfo</span>.<span class=\"name\">sorryDep?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">DeclInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L399-L399","name":"Lean.IR.DeclInfo.mk","line":399,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">DeclInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sorryDep?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">DeclInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L398-L401","name":"Lean.IR.DeclInfo","line":398,"kind":"structure","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo","doc":"Extra information associated with a declaration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">DeclInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L395-L396","name":"Lean.IR.mkAlt","line":395,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cidx </span><span class=\"fn\">size </span><span class=\"fn\">usize </span><span class=\"fn\">ssize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L390-L393","name":"Lean.IR.mmodifyJPs","line":390,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mmodifyJPs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mmodifyJPs\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mmodifyJPs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L385-L388","name":"Lean.IR.modifyJPs","line":385,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.modifyJPs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.modifyJPs\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">modifyJPs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L382-L383","name":"Lean.IR.reshape","line":382,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.reshape","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.reshape\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">reshape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L374-L380","name":"Lean.IR.reshapeAux","line":374,"kind":"opaque","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.reshapeAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.reshapeAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">reshapeAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L371-L372","name":"Lean.IR.FnBody.flatten","line":371,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.flatten","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.flatten\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">flatten</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L367-L369","name":"Lean.IR.flattenAux","line":367,"kind":"opaque","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.flattenAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.flattenAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">flattenAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L363-L365","name":"Lean.IR.push","line":363,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.push\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L359-L361","name":"Lean.IR.Alt.isDefault","line":359,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.isDefault","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.isDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">isDefault</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L355-L357","name":"Lean.IR.AltCore.mmodifyBody","line":355,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.mmodifyBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.mmodifyBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">mmodifyBody</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L351-L353","name":"Lean.IR.AltCore.modifyBody","line":351,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.modifyBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.modifyBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">modifyBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L347-L349","name":"Lean.IR.AltCore.setBody","line":347,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.setBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.setBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">setBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L343-L345","name":"Lean.IR.AltCore.body","line":343,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.body","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.body\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">body</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L336-L341","name":"Lean.IR.FnBody.split","line":336,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.split","doc":"If b is a non terminal, then return a pair `(c, b')` s.t. `b == c <;> b'`,\nand c.body == FnBody.nil "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.split\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L333-L334","name":"Lean.IR.FnBody.resetBody","line":333,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.resetBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.resetBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">resetBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L320-L331","name":"Lean.IR.FnBody.setBody","line":320,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">setBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L307-L318","name":"Lean.IR.FnBody.body","line":307,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.body","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.body\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">body</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L300-L305","name":"Lean.IR.FnBody.isTerminal","line":300,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.isTerminal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.isTerminal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">isTerminal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L298-L298","name":"Lean.IR.instInhabitedAlt","line":298,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L296-L296","name":"Lean.IR.Alt.default","line":296,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L295-L295","name":"Lean.IR.Alt.ctor","line":295,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.ctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L294-L294","name":"Lean.IR.Alt","line":294,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L292-L292","name":"Lean.IR.mkUnreachable","line":292,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUnreachable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUnreachable\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkUnreachable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L291-L291","name":"Lean.IR.mkJmp","line":291,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkJmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L290-L290","name":"Lean.IR.mkRet","line":290,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkRet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkRet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkRet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L287-L289","name":"Lean.IR.mkCase","line":287,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkCase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkCase\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tid</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L286-L286","name":"Lean.IR.mkSSet","line":286,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkSSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkSSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkSSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L285-L285","name":"Lean.IR.mkUSet","line":285,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkUSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L284-L284","name":"Lean.IR.mkJDecl","line":284,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkJDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkJDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkJDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L283-L283","name":"Lean.IR.mkVDecl","line":283,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkVDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkVDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkVDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L281-L281","name":"Lean.IR.FnBody.nil","line":281,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.nil\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L279-L279","name":"Lean.IR.instInhabitedFnBody","line":279,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L277-L277","name":"Lean.IR.FnBody.unreachable","line":277,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.unreachable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.unreachable\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">unreachable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L275-L276","name":"Lean.IR.FnBody.jmp","line":275,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jmp","doc":"Jump to join point `j` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jmp\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">jmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L274-L274","name":"Lean.IR.FnBody.ret","line":274,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.ret\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">ret</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L273-L273","name":"Lean.IR.FnBody.case","line":273,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.case","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.case\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">case</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tid</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xType</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">AltCore</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L272-L272","name":"Lean.IR.FnBody.mdata","line":272,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.mdata","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.mdata\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">mdata</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.MData\">MData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L271-L271","name":"Lean.IR.FnBody.del","line":271,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.del","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.del\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">del</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L268-L270","name":"Lean.IR.FnBody.dec","line":268,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.dec","doc":"RC decrement for `object`. If c == `true`, then `inc` must check whether `x` is a tagged pointer or not.\nIf `persistent == true` then `x` is statically known to be a persistent object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.dec\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">dec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">persistent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L265-L267","name":"Lean.IR.FnBody.inc","line":265,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.inc","doc":"RC increment for `object`. If c == `true`, then `inc` must check whether `x` is a tagged pointer or not.\nIf `persistent == true` then `x` is statically known to be a persistent object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.inc\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">inc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">persistent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L262-L264","name":"Lean.IR.FnBody.sset","line":262,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.sset","doc":"Store `y : ty` at Position `sizeof(void*)*i + offset` in `x`. `x` must be a Constructor object and `RC(x)` must be 1.\n`ty` must not be `object`, `tobject`, `irrelevant` nor `Usize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.sset\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">sset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L260-L261","name":"Lean.IR.FnBody.uset","line":260,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.uset","doc":"Store `y : Usize` at Position `sizeof(void*)*i` in `x`. `x` must be a Constructor object and `RC(x)` must be 1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.uset\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">uset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L259-L259","name":"Lean.IR.FnBody.setTag","line":259,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setTag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setTag\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">setTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cidx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L256-L258","name":"Lean.IR.FnBody.set","line":256,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.set","doc":"Store `y` at Position `sizeof(void*)*i` in `x`. `x` must be a Constructor object and `RC(x)` must be 1.\nThis operation is not part of λPure is only used during optimization. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.set\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L254-L255","name":"Lean.IR.FnBody.jdecl","line":254,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jdecl","doc":"Join point Declaration `block_j (xs) := e; b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jdecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">jdecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L252-L253","name":"Lean.IR.FnBody.vdecl","line":252,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.vdecl","doc":"`let x : ty := e; b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.vdecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">vdecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L251-L277","name":"Lean.IR.FnBody","line":251,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L249-L249","name":"Lean.IR.AltCore.default","line":249,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">FnBody</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">FnBody</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">AltCore</a> <span class=\"fn\">FnBody</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L248-L248","name":"Lean.IR.AltCore.ctor","line":248,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.ctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">ctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">FnBody</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">FnBody</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\">AltCore</a> <span class=\"fn\">FnBody</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L247-L249","name":"Lean.IR.AltCore","line":247,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AltCore\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AltCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">FnBody</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L244-L245","name":"Lean.IR.mkParam","line":244,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">borrow</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L242-L242","name":"Lean.IR.instReprParam","line":242,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprParam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L242-L242","name":"Lean.IR.instInhabitedParam","line":242,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedParam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L241-L241","name":"Lean.IR.Param.ty","line":241,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.ty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.ty\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">ty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L240-L240","name":"Lean.IR.Param.borrow","line":240,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.borrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.borrow\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">borrow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L239-L239","name":"Lean.IR.Param.x","line":239,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.x","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.x\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">x</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L238-L238","name":"Lean.IR.Param.mk","line":238,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">borrow</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L238-L242","name":"Lean.IR.Param","line":238,"kind":"structure","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L236-L236","name":"Lean.IR.mkStrExpr","line":236,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkStrExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkStrExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkStrExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L235-L235","name":"Lean.IR.mkNumExpr","line":235,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkNumExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkNumExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkNumExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L234-L234","name":"Lean.IR.mkAppExpr","line":234,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkAppExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkAppExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkAppExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L233-L233","name":"Lean.IR.mkPAppExpr","line":233,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkPAppExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkPAppExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkPAppExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L232-L232","name":"Lean.IR.mkFAppExpr","line":232,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkFAppExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkFAppExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkFAppExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L231-L231","name":"Lean.IR.mkSProjExpr","line":231,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkSProjExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkSProjExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkSProjExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L230-L230","name":"Lean.IR.mkUProjExpr","line":230,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUProjExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkUProjExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkUProjExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L229-L229","name":"Lean.IR.mkProjExpr","line":229,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkProjExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkProjExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkProjExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L227-L228","name":"Lean.IR.mkCtorExpr","line":227,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkCtorExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkCtorExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkCtorExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cidx </span><span class=\"fn\">size </span><span class=\"fn\">usize </span><span class=\"fn\">ssize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L224-L225","name":"Lean.IR.Expr.isShared","line":224,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.isShared","doc":"Return `1 : uint8` Iff `RC(x) > 1` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.isShared\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isShared</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L223-L223","name":"Lean.IR.Expr.lit","line":223,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.lit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.lit\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">lit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L221-L222","name":"Lean.IR.Expr.unbox","line":221,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.unbox","doc":"Given `x : [t]object`, obtain the scalar value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.unbox\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">unbox</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L218-L220","name":"Lean.IR.Expr.box","line":218,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.box","doc":"Given `x : ty` where `ty` is a scalar type, this operation returns a value of Type `tobject`.\nFor small scalar values, the Result is a tagged pointer, and no memory allocation is performed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.box\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">box</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L216-L217","name":"Lean.IR.Expr.ap","line":216,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ap","doc":"Application. `x` must be a `pap` value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L214-L215","name":"Lean.IR.Expr.pap","line":214,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.pap","doc":"Partial application that creates a `pap` value (aka closure in our nonstandard terminology). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.pap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">pap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L212-L213","name":"Lean.IR.Expr.fap","line":212,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.fap","doc":"Full application. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.fap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">fap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L210-L211","name":"Lean.IR.Expr.sproj","line":210,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.sproj","doc":"Extract the scalar value at Position `sizeof(void*)*n + offset` from `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.sproj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sproj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L208-L209","name":"Lean.IR.Expr.uproj","line":208,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.uproj","doc":"Extract the `Usize` value at Position `sizeof(void*)*i` from `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.uproj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">uproj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L205-L207","name":"Lean.IR.Expr.proj","line":205,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.proj","doc":"Extract the `tobject` value at Position `sizeof(void*)*i` from `x`.\nWe also use `proj` for extracting fields from `struct` return values, and casting `union` return values. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L203-L204","name":"Lean.IR.Expr.reuse","line":203,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reuse","doc":"`reuse x in ctor_i ys` instruction in the paper. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reuse\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">reuse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">updtHeader</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L202-L202","name":"Lean.IR.Expr.reset","line":202,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reset\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">reset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L198-L201","name":"Lean.IR.Expr.ctor","line":198,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ctor","doc":"We use `ctor` mainly for constructing Lean object/tobject values `lean_ctor_object` in the runtime.\nThis instruction is also used to creat `struct` and `union` return values.\nFor `union`, only `i.cidx` is relevant. For `struct`, `i` is irrelevant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L197-L225","name":"Lean.IR.Expr","line":197,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L194-L195","name":"Lean.IR.CtorInfo.isScalar","line":194,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isScalar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isScalar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">isScalar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L191-L192","name":"Lean.IR.CtorInfo.isRef","line":191,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isRef\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">isRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L189-L189","name":"Lean.IR.instBEqCtorInfo","line":189,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqCtorInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqCtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqCtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L185-L187","name":"Lean.IR.CtorInfo.beq","line":185,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L183-L183","name":"Lean.IR.instReprCtorInfo","line":183,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprCtorInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprCtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprCtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L182-L182","name":"Lean.IR.CtorInfo.ssize","line":182,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.ssize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.ssize\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">ssize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L181-L181","name":"Lean.IR.CtorInfo.usize","line":181,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.usize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.usize\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">usize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L180-L180","name":"Lean.IR.CtorInfo.size","line":180,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.size\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L179-L179","name":"Lean.IR.CtorInfo.cidx","line":179,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.cidx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.cidx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">cidx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L178-L178","name":"Lean.IR.CtorInfo.name","line":178,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.name\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L177-L177","name":"Lean.IR.CtorInfo.mk","line":177,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cidx </span><span class=\"fn\">size </span><span class=\"fn\">usize </span><span class=\"fn\">ssize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L166-L183","name":"Lean.IR.CtorInfo","line":166,"kind":"structure","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo","doc":"Constructor information.\n\n   - `name` is the Name of the Constructor in Lean.\n   - `cidx` is the Constructor index (aka tag).\n   - `size` is the number of arguments of type `object/tobject`.\n   - `usize` is the number of arguments of type `usize`.\n   - `ssize` is the number of bytes used to store scalar values.\n\nRecall that a Constructor object contains a header, then a sequence of\npointers to other Lean objects, a sequence of `USize` (i.e., `size_t`)\nscalar values, and a sequence of other scalar values. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L164-L164","name":"Lean.IR.instBEqLitVal","line":164,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqLitVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqLitVal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqLitVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L159-L162","name":"Lean.IR.LitVal.beq","line":159,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L157-L157","name":"Lean.IR.LitVal.str","line":157,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.str\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L156-L156","name":"Lean.IR.LitVal.num","line":156,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.num","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.num\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L155-L157","name":"Lean.IR.LitVal","line":155,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L153-L153","name":"Lean.IR.mkVarArg","line":153,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkVarArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkVarArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkVarArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L151-L151","name":"Lean.IR.instBEqArg","line":151,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L146-L149","name":"Lean.IR.Arg.beq","line":146,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L144-L144","name":"Lean.IR.instInhabitedArg","line":144,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L143-L143","name":"Lean.IR.Arg.irrelevant","line":143,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.irrelevant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.irrelevant\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">irrelevant</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L142-L142","name":"Lean.IR.Arg.var","line":142,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.var\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L137-L144","name":"Lean.IR.Arg","line":137,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg","doc":"Arguments to applications, constructors, etc.\nWe use `irrelevant` for Lean types, propositions and proofs that have been erased.\nRecall that for a Function `f`, we also generate `f._rarg` which does not take\n`irrelevant` arguments. However, `f._rarg` is only safe to be used in full applications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L131-L133","name":"Lean.IR.IRType.isUnion","line":131,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isUnion\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isUnion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L127-L129","name":"Lean.IR.IRType.isStruct","line":127,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isStruct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L123-L125","name":"Lean.IR.IRType.isIrrelevant","line":123,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isIrrelevant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isIrrelevant\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isIrrelevant</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L118-L121","name":"Lean.IR.IRType.isObj","line":118,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isObj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isObj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isObj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L108-L116","name":"Lean.IR.IRType.isScalar","line":108,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isScalar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isScalar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isScalar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L106-L106","name":"Lean.IR.IRType.instBEq","line":106,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.instBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.instBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L91-L104","name":"Lean.IR.IRType.beq","line":91,"kind":"opaque","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L87-L87","name":"Lean.IR.instReprIRType","line":87,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprIRType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprIRType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprIRType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L87-L87","name":"Lean.IR.instInhabitedIRType","line":87,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIRType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIRType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedIRType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L86-L86","name":"Lean.IR.IRType.union","line":86,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.union\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leanTypeName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L85-L85","name":"Lean.IR.IRType.struct","line":85,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.struct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.struct\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">struct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leanTypeName</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L84-L84","name":"Lean.IR.IRType.float32","line":84,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.float32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.float32\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">float32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L83-L83","name":"Lean.IR.IRType.tobject","line":83,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.tobject","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.tobject\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">tobject</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L83-L83","name":"Lean.IR.IRType.object","line":83,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.object","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.object\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">object</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L83-L83","name":"Lean.IR.IRType.irrelevant","line":83,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.irrelevant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.irrelevant\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">irrelevant</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L82-L82","name":"Lean.IR.IRType.usize","line":82,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.usize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.usize\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">usize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L82-L82","name":"Lean.IR.IRType.uint64","line":82,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint64\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L82-L82","name":"Lean.IR.IRType.uint32","line":82,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint32\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L82-L82","name":"Lean.IR.IRType.uint16","line":82,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint16\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L82-L82","name":"Lean.IR.IRType.uint8","line":82,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint8\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L82-L82","name":"Lean.IR.IRType.float","line":82,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.float","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.float\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">float</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L49-L87","name":"Lean.IR.IRType","line":49,"kind":"inductive","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType","doc":"Low Level IR types. Most are self explanatory.\n\n   - `usize` represents the C++ `size_t` Type. We have it here\n      because it is 32-bit in 32-bit machines, and 64-bit in 64-bit machines,\n      and we want the C++ backend for our Compiler to generate platform independent code.\n\n   - `irrelevant` for Lean types, propositions and proofs.\n\n   - `object` a pointer to a value in the heap.\n\n   - `tobject` a pointer to a value in the heap or tagged pointer\n      (i.e., the least significant bit is 1) storing a scalar value.\n\n   - `struct` and `union` are used to return small values (e.g., `Option`, `Prod`, `Except`)\n      on the stack.\n\nRemark: the RC operations for `tobject` are slightly more expensive because we\nfirst need to test whether the `tobject` is really a pointer or not.\n\nRemark: the Lean runtime assumes that sizeof(void*) == sizeof(sizeT).\nLean cannot be compiled on old platforms where this is not True.\n\nSince values of type `struct` and `union` are only used to return values,\nWe assume they must be used/consumed \"linearly\". We use the term \"linear\" here\nto mean \"exactly once\" in each execution. That is, given `x : S`, where `S` is a struct,\nthen one of the following must hold in each (execution) branch.\n1- `x` occurs only at a single `ret x` instruction. That is, it is being consumed by being returned.\n2- `x` occurs only at a single `ctor`. That is, it is being \"consumed\" by being stored into another `struct/union`.\n3- We extract (aka project) every single field of `x` exactly once. That is, we are consuming `x` by consuming each\n   of one of its components. Minor refinement: we don't need to consume scalar fields or struct/union\n   fields that do not contain object fields.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L47-L47","name":"Lean.IR.MData.empty","line":47,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.MData.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.MData.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MData</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.MData\">MData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L46-L46","name":"Lean.IR.MData","line":46,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.MData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.MData\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L44-L44","name":"Lean.IR.instHashableJoinPointId","line":44,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instHashableJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L43-L43","name":"Lean.IR.instToFormatJoinPointId","line":43,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instToFormatJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instToFormatJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instToFormatJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L42-L42","name":"Lean.IR.instToStringJoinPointId","line":42,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instToStringJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L41-L41","name":"Lean.IR.instBEqJoinPointId","line":41,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L39-L39","name":"Lean.IR.instHashableVarId","line":39,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instHashableVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L38-L38","name":"Lean.IR.instToFormatVarId","line":38,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instToFormatVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instToFormatVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instToFormatVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L37-L37","name":"Lean.IR.instToStringVarId","line":37,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instToStringVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L36-L36","name":"Lean.IR.instBEqVarId","line":36,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L34-L34","name":"Lean.IR.Index.lt","line":34,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Index.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Index</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L32-L32","name":"Lean.IR.instReprJoinPointId","line":32,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L32-L32","name":"Lean.IR.instInhabitedJoinPointId","line":32,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedJoinPointId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L31-L31","name":"Lean.IR.JoinPointId.idx","line":31,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.idx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">JoinPointId</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L30-L30","name":"Lean.IR.JoinPointId.mk","line":30,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">JoinPointId</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L29-L32","name":"Lean.IR.JoinPointId","line":29,"kind":"structure","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId","doc":"Join point identifier "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">JoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L27-L27","name":"Lean.IR.instReprVarId","line":27,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L27-L27","name":"Lean.IR.instInhabitedVarId","line":27,"kind":"instance","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L26-L26","name":"Lean.IR.VarId.idx","line":26,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.idx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L25-L25","name":"Lean.IR.VarId.mk","line":25,"kind":"ctor","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L24-L27","name":"Lean.IR.VarId","line":24,"kind":"structure","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId","doc":"Variable identifier "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L23-L23","name":"Lean.IR.Index","line":23,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Index","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Index</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Compiler/IR/Basic.lean#L21-L22","name":"Lean.IR.FunId","line":21,"kind":"def","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId","doc":"Function identifier "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FunId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}