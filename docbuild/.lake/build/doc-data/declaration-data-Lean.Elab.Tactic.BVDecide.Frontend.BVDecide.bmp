{"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecide","instances":[],"imports":["Std.Sat.AIG.CNF","Std.Sat.AIG.RelabelNat","Std.Tactic.BVDecide.Bitblast","Std.Tactic.BVDecide.Syntax","Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.SatAtBVLogical","Lean.Elab.Tactic.BVDecide.Frontend.Normalize","Lean.Elab.Tactic.BVDecide.Frontend.LRAT"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L379-L387","name":"Lean.Elab.Tactic.BVDecide.Frontend.evalBvDecide","line":379,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.evalBvDecide","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.evalBvDecide\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">evalBvDecide</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L368-L377","name":"Lean.Elab.Tactic.BVDecide.Frontend.bvDecide","line":368,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvDecide","doc":"Call `bvDecide'` and throw a pretty error if a counter example ends up being produced.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvDecide\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">bvDecide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.TacticContext\">TacticContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result\">Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L357-L366","name":"Lean.Elab.Tactic.BVDecide.Frontend.bvDecide'","line":357,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvDecide'","doc":"Try to close `g` using a bitblaster. Return either a `CounterExample` if one is found or a `Result`\nif `g` is proven.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvDecide'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">bvDecide'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.TacticContext\">TacticContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result\">Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L355-L355","name":"Lean.Elab.Tactic.BVDecide.Frontend.Result.lratCert","line":355,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result.lratCert","doc":"If the normalization step was not enough to solve the goal this contains the LRAT proof\ncertificate.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result.lratCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Result</span>.<span class=\"name\">lratCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L350-L350","name":"Lean.Elab.Tactic.BVDecide.Frontend.Result.mk","line":350,"kind":"ctor","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lratCert</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result\">Result</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L347-L355","name":"Lean.Elab.Tactic.BVDecide.Frontend.Result","line":347,"kind":"structure","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result","doc":"The result of calling `bv_decide`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Result\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L341-L345","name":"Lean.Elab.Tactic.BVDecide.Frontend.bvUnsat","line":341,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.bvUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">bvUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.TacticContext\">TacticContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L323-L339","name":"Lean.Elab.Tactic.BVDecide.Frontend.closeWithBVReflection","line":323,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.closeWithBVReflection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.closeWithBVReflection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">closeWithBVReflection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unsatProver</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver\">UnsatProver</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L298-L320","name":"Lean.Elab.Tactic.BVDecide.Frontend.reflectBV","line":298,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.reflectBV","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.reflectBV\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">reflectBV</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L260-L295","name":"Lean.Elab.Tactic.BVDecide.Frontend.lratBitblaster","line":260,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.lratBitblaster","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.lratBitblaster\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">lratBitblaster</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.TacticContext\">TacticContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reflectionResult</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atomsAssignment</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result\">UnsatProver.Result</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L241-L258","name":"Lean.Elab.Tactic.BVDecide.Frontend.explainCounterExampleQuality","line":241,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.explainCounterExampleQuality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.explainCounterExampleQuality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">explainCounterExampleQuality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counterExample</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L238-L239","name":"Lean.Elab.Tactic.BVDecide.Frontend.explainers","line":238,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.explainers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.explainers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">explainers</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L233-L236","name":"Lean.Elab.Tactic.BVDecide.Frontend.unusedRelevantHypothesesExplainer","line":233,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.unusedRelevantHypothesesExplainer","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.unusedRelevantHypothesesExplainer\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">unusedRelevantHypothesesExplainer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L228-L231","name":"Lean.Elab.Tactic.BVDecide.Frontend.uninterpretedExplainer","line":228,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.uninterpretedExplainer","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.uninterpretedExplainer\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">uninterpretedExplainer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L166-L223","name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.diagnose.transformEquation","line":166,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.diagnose.transformEquation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.diagnose.transformEquation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">diagnose</span>.<span class=\"name\">transformEquation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">Std.Tactic.BVDecide.BVExpr.PackedBitVec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L153-L223","name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.diagnose","line":153,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.diagnose","doc":"Diagnose spurious counter examples, currently this checks:\n- Whether uninterpreted symbols were used\n- Whether all hypotheses which contain any variable that was bitblasted were included\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.diagnose\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">diagnose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L148-L151","name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.checkRelevantHypsUsed","line":148,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.checkRelevantHypsUsed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.checkRelevantHypsUsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">checkRelevantHypsUsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L144-L146","name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addDerivedEquation","line":144,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addDerivedEquation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addDerivedEquation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">addDerivedEquation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var </span><span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L140-L142","name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUnusedRelevantHypothesis","line":140,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUnusedRelevantHypothesis","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUnusedRelevantHypothesis\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">addUnusedRelevantHypothesis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L136-L138","name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUninterpretedSymbol","line":136,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUninterpretedSymbol","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.addUninterpretedSymbol\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">addUninterpretedSymbol</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L132-L134","name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.equations","line":132,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.equations","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.equations\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">equations</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">Std.Tactic.BVDecide.BVExpr.PackedBitVec</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L128-L130","name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.unusedHyps","line":128,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.unusedHyps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.unusedHyps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">unusedHyps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L123-L126","name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.run","line":123,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\">DiagnosisM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counterExample</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L119-L119","name":"Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM","line":119,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.DiagnosisM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">DiagnosisM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L117-L117","name":"Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.derivedEquations","line":117,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.derivedEquations","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.derivedEquations\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Diagnosis</span>.<span class=\"name\">derivedEquations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L116-L116","name":"Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.unusedRelevantHypotheses","line":116,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.unusedRelevantHypotheses","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.unusedRelevantHypotheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Diagnosis</span>.<span class=\"name\">unusedRelevantHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L115-L115","name":"Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.uninterpretedSymbols","line":115,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.uninterpretedSymbols","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.uninterpretedSymbols\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Diagnosis</span>.<span class=\"name\">uninterpretedSymbols</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L114-L114","name":"Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.mk","line":114,"kind":"ctor","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Diagnosis</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uninterpretedSymbols</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unusedRelevantHypotheses</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">derivedEquations</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\">Diagnosis</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L111-L117","name":"Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis","line":111,"kind":"structure","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis","doc":"The result of a spurious counter example diagnosis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.Diagnosis\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Diagnosis</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L108-L109","name":"Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver","line":108,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">UnsatProver</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L106-L106","name":"Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.lratCert","line":106,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.lratCert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.lratCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">UnsatProver</span>.<span class=\"name\">Result</span>.<span class=\"name\">lratCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L105-L105","name":"Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.proof","line":105,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.proof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">UnsatProver</span>.<span class=\"name\">Result</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L104-L104","name":"Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.mk","line":104,"kind":"ctor","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">UnsatProver</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lratCert</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/LRAT.html#Lean.Elab.Tactic.BVDecide.Frontend.LratCert\">LratCert</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result\">Result</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L104-L106","name":"Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result","line":104,"kind":"structure","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.UnsatProver.Result\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">UnsatProver</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L102-L102","name":"Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.equations","line":102,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.equations","doc":"The actual counter example as a list of equations denoted as `expr = value` pairs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.equations\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">CounterExample</span>.<span class=\"name\">equations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">Std.Tactic.BVDecide.BVExpr.PackedBitVec</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L98-L98","name":"Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.unusedHypotheses","line":98,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.unusedHypotheses","doc":"The set of unused but potentially relevant hypotheses. Useful for diagnosing spurious counter\nexamples.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.unusedHypotheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">CounterExample</span>.<span class=\"name\">unusedHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L93-L93","name":"Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.goal","line":93,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.goal","doc":"The goal in which to interpret this counter example.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.goal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">CounterExample</span>.<span class=\"name\">goal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L89-L89","name":"Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.mk","line":89,"kind":"ctor","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">CounterExample</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unusedHypotheses</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">equations</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">Std.Tactic.BVDecide.BVExpr.PackedBitVec</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\">CounterExample</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L86-L102","name":"Lean.Elab.Tactic.BVDecide.Frontend.CounterExample","line":86,"kind":"structure","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample","doc":"A counter example generated from the bitblaster.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.CounterExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">CounterExample</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L84-L84","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.unusedHypotheses","line":84,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.unusedHypotheses","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.unusedHypotheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span>.<span class=\"name\">unusedHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L83-L83","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.proveFalse","line":83,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.proveFalse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.proveFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span>.<span class=\"name\">proveFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L82-L82","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.bvExpr","line":82,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.bvExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.bvExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span>.<span class=\"name\">bvExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">Std.Tactic.BVDecide.BVLogicalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L81-L81","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.mk","line":81,"kind":"ctor","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bvExpr</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">Std.Tactic.BVDecide.BVLogicalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proveFalse</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unusedHypotheses</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\">ReflectionResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L81-L84","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult","line":81,"kind":"structure","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.ReflectionResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReflectionResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.lean#L27-L79","name":"Lean.Elab.Tactic.BVDecide.Frontend.reconstructCounterExample","line":27,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.reconstructCounterExample","doc":"Given:\n- `var2Cnf`: The mapping from AIG to CNF variables.\n- `assignments`: A model for the CNF as provided by a SAT solver.\n- `aigSize`: The amount of nodes in the AIG that was used to produce the CNF.\n- `atomsAssignment`: The mapping of the reflection monad from atom indices to `Expr`.\n\nReconstruct bit by bit which value expression must have had which `BitVec` value and return all\nexpression - pair values.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide.html#Lean.Elab.Tactic.BVDecide.Frontend.reconstructCounterExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">reconstructCounterExample</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var2Cnf</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVBit\">Std.Tactic.BVDecide.BVBit</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aigSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atomsAssignment</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVExpr.PackedBitVec\">Std.Tactic.BVDecide.BVExpr.PackedBitVec</a>)</span></div></div>"}]}