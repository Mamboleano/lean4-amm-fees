{"name":"Lean.Meta.Structure","instances":[],"imports":["Lean.AddDecl","Lean.Structure","Lean.Meta.AppBuilder"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Structure.lean#L36-L110","name":"Lean.Meta.mkProjections","line":36,"kind":"def","docLink":"./Lean/Meta/Structure.html#Lean.Meta.mkProjections","doc":"Adds projection functions to the environment for the one-constructor inductive type named `n`.\n- The `projName`s in each `StructProjDecl` are used for the names of the declarations added to the environment.\n- If `instImplicit` is true, then generates projections with `self` being instance implicit.\n\nNotes:\n- This function supports everything that `Expr.proj` supports (see `lean::type_checker::infer_proj`).\n  This means we can generate projections for inductive types with one-constructor,\n  even if it is an indexed family (which is not supported by the `structure` command).\n- We throw errors in the cases that `Expr.proj` is not type-correct.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Structure.html#Lean.Meta.mkProjections\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkProjections</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">projDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl\">StructProjDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instImplicit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Structure.lean#L34-L34","name":"Lean.Meta.StructProjDecl.projName","line":34,"kind":"def","docLink":"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl.projName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl.projName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">StructProjDecl</span>.<span class=\"name\">projName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl\">StructProjDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Structure.lean#L33-L33","name":"Lean.Meta.StructProjDecl.ref","line":33,"kind":"def","docLink":"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">StructProjDecl</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl\">StructProjDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Structure.lean#L32-L32","name":"Lean.Meta.StructProjDecl.mk","line":32,"kind":"ctor","docLink":"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">StructProjDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">projName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl\">StructProjDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Structure.lean#L29-L34","name":"Lean.Meta.StructProjDecl","line":29,"kind":"structure","docLink":"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl","doc":"Structure projection declaration for `mkProjections`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Structure.html#Lean.Meta.StructProjDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">StructProjDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Meta/Structure.lean#L17-L27","name":"Lean.Meta.getStructureName","line":17,"kind":"def","docLink":"./Lean/Meta/Structure.html#Lean.Meta.getStructureName","doc":"If `struct` is an application of the form `S ..` with `S` a constant for a structure,\nreturns the name of the structure, otherwise throws an error.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Structure.html#Lean.Meta.getStructureName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getStructureName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"}]}