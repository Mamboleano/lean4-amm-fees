{"name":"Mathlib.RepresentationTheory.GroupCohomology.Resolution","instances":[{"typeNames":["HomologicalComplex.X"],"name":"groupCohomology.resolution.x_projective","className":"CategoryTheory.Projective"},{"typeNames":["groupCohomology.resolution.εToSingle₀"],"name":"groupCohomology.resolution.instQuasiIsoNatRepεToSingle₀","className":"QuasiIso"},{"typeNames":["Rep"],"name":"instEnoughProjectivesRep","className":"CategoryTheory.EnoughProjectives"}],"imports":["Init","Mathlib.Algebra.Category.ModuleCat.Projective","Mathlib.AlgebraicTopology.ExtraDegeneracy","Mathlib.CategoryTheory.Abelian.Ext","Mathlib.GroupTheory.GroupAction.Ring","Mathlib.RepresentationTheory.Rep","Mathlib.RingTheory.TensorProduct.Free","Mathlib.CategoryTheory.Functor.ReflectsIso.Balanced"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L628-L634","name":"groupCohomology.extIso","line":628,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.extIso","doc":"Given a `k`-linear `G`-representation `V`, `Extⁿ(k, V)` (where `k` is a trivial `k`-linear\n`G`-representation) is isomorphic to the `n`th cohomology group of `Hom(P, V)`, where `P` is the\nstandard resolution of `k` called `groupCohomology.resolution k G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.extIso\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">extIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Abelian/Ext.html#Ext\">Ext</a> <span class=\"fn\">k</span> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span>)</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/ShortComplex/HomologicalComplex.html#HomologicalComplex.homology\">HomologicalComplex.homology</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Abelian/Ext.html#ChainComplex.linearYonedaObj\">linearYonedaObj</a></span> <span class=\"fn\">k</span> <span class=\"fn\">V</span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L624-L626","name":"instEnoughProjectivesRep","line":624,"kind":"instance","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#instEnoughProjectivesRep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#instEnoughProjectivesRep\"><span class=\"name\">instEnoughProjectivesRep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Basic.html#CategoryTheory.EnoughProjectives\">CategoryTheory.EnoughProjectives</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L620-L622","name":"groupCohomology.projectiveResolution","line":620,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.projectiveResolution","doc":"The standard projective resolution of `k` as a trivial `k`-linear `G`-representation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.projectiveResolution\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">projectiveResolution</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Resolution.html#CategoryTheory.ProjectiveResolution\">CategoryTheory.ProjectiveResolution</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L608-L610","name":"groupCohomology.resolution.instQuasiIsoNatRepεToSingle₀","line":608,"kind":"instance","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.instQuasiIsoNatRepεToSingle₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.instQuasiIsoNatRepεToSingle₀\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">instQuasiIsoNatRepεToSingle₀</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/QuasiIso.html#QuasiIso\">QuasiIso</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀\">εToSingle₀</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L602-L606","name":"groupCohomology.resolution.quasiIso_forget₂_εToSingle₀","line":602,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.quasiIso_forget₂_εToSingle₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.quasiIso_forget₂_εToSingle₀\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">quasiIso_forget₂_εToSingle₀</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/QuasiIso.html#QuasiIso\">QuasiIso</a>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Mathlib/Algebra/Homology/Additive.html#CategoryTheory.Functor.mapHomologicalComplex\">mapHomologicalComplex</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape.down\">ComplexShape.down</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀\">εToSingle₀</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L593-L600","name":"groupCohomology.resolution.εToSingle₀_comp_eq","line":593,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀_comp_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀_comp_eq\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">εToSingle₀_comp_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Mathlib/Algebra/Homology/Additive.html#CategoryTheory.Functor.mapHomologicalComplex\">mapHomologicalComplex</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape.down\">ComplexShape.down</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span>\n      <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀\">εToSingle₀</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/Additive.html#HomologicalComplex.singleMapHomologicalComplex\">HomologicalComplex.singleMapHomologicalComplex</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span>)</span>)</span>\n            <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape.down\">ComplexShape.down</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> <span class=\"fn\">0</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span>\n      <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv\">forget₂ToModuleCatHomotopyEquiv</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Algebra/Homology/Homotopy.html#HomotopyEquiv.hom\">hom</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L587-L591","name":"groupCohomology.resolution.εToSingle₀","line":587,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀","doc":"The chain map from the standard resolution of `k` to `k[0]` given by `∑ nᵢgᵢ ↦ ∑ nᵢ` in\ndegree zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.εToSingle₀\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">εToSingle₀</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/Single.html#ChainComplex.single₀\">ChainComplex.single₀</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L577-L585","name":"groupCohomology.resolution.d_comp_ε","line":577,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_comp_ε","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_comp_ε\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">d_comp_ε</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#HomologicalComplex.d\">d</a></span> <span class=\"fn\">1</span> <span class=\"fn\">0</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ε\">ε</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L548-L575","name":"groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv_f_0_eq","line":548,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv_f_0_eq","doc":"The homotopy equivalence of complexes of `k`-modules between the standard resolution of `k` as\na trivial `G`-representation, and the complex which is `k` at 0 and 0 everywhere else, acts as\n`∑ nᵢgᵢ ↦ ∑ nᵢ : k[G¹] → k` at 0. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv_f_0_eq\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">forget₂ToModuleCatHomotopyEquiv_f_0_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv\">forget₂ToModuleCatHomotopyEquiv</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Algebra/Homology/Homotopy.html#HomotopyEquiv.hom\">hom</a></span>.<a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#HomologicalComplex.Hom.f\">f</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ε\">ε</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L539-L546","name":"groupCohomology.resolution.ε","line":539,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ε","doc":"The hom of `k`-linear `G`-representations `k[G¹] → k` sending `∑ nᵢgᵢ ↦ ∑ nᵢ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ε\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">ε</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.ofMulAction\">Rep.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">1</span></span> → <span class=\"fn\">G</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L526-L537","name":"groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv","line":526,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv","doc":"As a complex of `k`-modules, the standard resolution of the trivial `G`-representation `k` is\nhomotopy equivalent to the complex which is `k` at 0 and 0 elsewhere. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCatHomotopyEquiv\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">forget₂ToModuleCatHomotopyEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/Homotopy.html#HomotopyEquiv\">HomotopyEquiv</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCat\">forget₂ToModuleCat</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>\n  <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/Single.html#ChainComplex.single₀\">ChainComplex.single₀</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">k</span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L514-L524","name":"groupCohomology.resolution.compForgetAugmentedIso","line":514,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.compForgetAugmentedIso","doc":"If we apply the free functor `Type u ⥤ ModuleCat.{u} k` to the universal cover of the\nclassifying space of `G` as a simplicial set, then take the alternating face map complex, the result\nis isomorphic to the standard resolution of the trivial `G`-representation `k` as a complex of\n`k`-modules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.compForgetAugmentedIso\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">compForgetAugmentedIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/AlternatingFaceMapComplex.html#AlgebraicTopology.AlternatingFaceMapComplex.obj\">AlgebraicTopology.AlternatingFaceMapComplex.obj</a>\n    <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.Augmented.drop\">CategoryTheory.SimplicialObject.Augmented.drop</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span>\n      <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented.toModule\">classifyingSpaceUniversalCover.compForgetAugmented.toModule</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCat\">forget₂ToModuleCat</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L509-L512","name":"groupCohomology.resolution.forget₂ToModuleCat","line":509,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCat","doc":"The standard resolution of `k` as a trivial representation as a complex of `k`-modules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.forget₂ToModuleCat\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">forget₂ToModuleCat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#HomologicalComplex\">HomologicalComplex</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape.down\">ComplexShape.down</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L485-L505","name":"groupCohomology.resolution.d_eq","line":485,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_eq","doc":"Simpler expression for the differential in the standard resolution of `k` as a\n`G`-representation. It sends `(g₀, ..., gₙ₊₁) ↦ ∑ (-1)ⁱ • (g₀, ..., ĝᵢ, ..., gₙ₊₁)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_eq\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">d_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#HomologicalComplex.d\">d</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.Hom.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d\">d</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L478-L483","name":"groupCohomology.resolution.x_projective","line":478,"kind":"instance","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.x_projective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.x_projective\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">x_projective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Basic.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#HomologicalComplex.X\">X</a></span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L473-L476","name":"groupCohomology.resolution.xIso","line":473,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.xIso","doc":"The `n`th object of the standard resolution of `k` is definitionally isomorphic to `k[Gⁿ⁺¹]`\nequipped with the representation induced by the diagonal action of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.xIso\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">xIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\">resolution</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#HomologicalComplex.X\">X</a></span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.ofMulAction\">Rep.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L464-L469","name":"groupCohomology.resolution.d_of","line":464,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d_of\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">d_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d\">d</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">c</span> <span class=\"fn\">1</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑ <span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Fin/Basic.html#Fin.succAbove\">succAbove</a></span>) (<span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L455-L460","name":"groupCohomology.resolution.d","line":455,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d","doc":"The `k`-linear map underlying the differential in the standard resolution of `k` as a trivial\n`k`-linear `G`-representation. It sends `(g₀, ..., gₙ) ↦ ∑ (-1)ⁱ • (g₀, ..., ĝᵢ, ..., gₙ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.d\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">d</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span>) <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L443-L447","name":"groupCohomology.resolution","line":443,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution","doc":"The standard resolution of `k` as a trivial representation, defined as the alternating\nface map complex of a simplicial `k`-linear `G`-representation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#ChainComplex\">ChainComplex</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L431-L437","name":"classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmentedToModule","line":431,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmentedToModule","doc":"If we augment the universal cover of the classifying space of `G` as a simplicial set by the\nmap from `Fin 1 → G` to the terminal object in `Type u`, then apply the free functor\n`Type u ⥤ ModuleCat.{u} k`, the resulting augmented simplicial `k`-module has an extra\ndegeneracy. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmentedToModule\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">extraDegeneracyCompForgetAugmentedToModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented.toModule\">compForgetAugmented.toModule</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/ExtraDegeneracy.html#CategoryTheory.SimplicialObject.Augmented.ExtraDegeneracy\">ExtraDegeneracy</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L425-L429","name":"classifyingSpaceUniversalCover.compForgetAugmented.toModule","line":425,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented.toModule","doc":"The free functor `Type u ⥤ ModuleCat.{u} k` applied to the universal cover of the classifying\nspace of `G` as a simplicial set, augmented by the map from `Fin 1 → G` to the terminal object\nin `Type u`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented.toModule\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">compForgetAugmented</span>.<span class=\"name\">toModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat\">ModuleCat</a> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L415-L423","name":"classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmented","line":415,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmented","doc":"The universal cover of the classifying space of `G` as a simplicial set, augmented by the map\nfrom `Fin 1 → G` to the terminal object in `Type u`, has an extra degeneracy. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyCompForgetAugmented\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">extraDegeneracyCompForgetAugmented</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented\">compForgetAugmented</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/ExtraDegeneracy.html#CategoryTheory.SimplicialObject.Augmented.ExtraDegeneracy\">ExtraDegeneracy</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L407-L413","name":"classifyingSpaceUniversalCover.extraDegeneracyAugmentedCechNerve","line":407,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyAugmentedCechNerve","doc":"The augmented Čech nerve of the map from `Fin 1 → G` to the terminal object in `Type u` has an\nextra degeneracy. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.extraDegeneracyAugmentedCechNerve\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">extraDegeneracyAugmentedCechNerve</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/Arrow.html#CategoryTheory.Arrow.mk\">CategoryTheory.Arrow.mk</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Terminal.html#CategoryTheory.Limits.terminal.from\">CategoryTheory.Limits.terminal.from</a> <span class=\"fn\">G</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.Arrow.augmentedCechNerve\">augmentedCechNerve</a></span>.<a href=\"./Mathlib/AlgebraicTopology/ExtraDegeneracy.html#CategoryTheory.SimplicialObject.Augmented.ExtraDegeneracy\">ExtraDegeneracy</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L401-L405","name":"classifyingSpaceUniversalCover.compForgetAugmented","line":401,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented","doc":"The universal cover of the classifying space of `G` as a simplicial set, augmented by the map\nfrom `Fin 1 → G` to the terminal object in `Type u`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.compForgetAugmented\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">compForgetAugmented</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject.Augmented\">CategoryTheory.SimplicialObject.Augmented</a> <a href=\"./foundational_types.html\">(Type</a> u)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L390-L395","name":"classifyingSpaceUniversalCover.cechNerveTerminalFromIsoCompForget","line":390,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.cechNerveTerminalFromIsoCompForget","doc":"As a simplicial set, `cechNerveTerminalFrom` of a monoid `G` is isomorphic to the universal\ncover of the classifying space of `G` as a simplicial set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.cechNerveTerminalFromIsoCompForget\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">cechNerveTerminalFromIsoCompForget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.cechNerveTerminalFrom\">CategoryTheory.cechNerveTerminalFrom</a> <span class=\"fn\">G</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">CategoryTheory.Functor.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover\">classifyingSpaceUniversalCover</a> <span class=\"fn\">G</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action\">Action</a> <a href=\"./foundational_types.html\">(Type</a> u) <span class=\"fn\">G</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L380-L388","name":"classifyingSpaceUniversalCover.cechNerveTerminalFromIso","line":380,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.cechNerveTerminalFromIso","doc":"When the category is `G`-Set, `cechNerveTerminalFrom` of `G` with the left regular action is\nisomorphic to `EG`, the universal cover of the classifying space of `G` as a simplicial `G`-set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover.cechNerveTerminalFromIso\"><span class=\"name\">classifyingSpaceUniversalCover</span>.<span class=\"name\">cechNerveTerminalFromIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/CechNerve.html#CategoryTheory.cechNerveTerminalFrom\">CategoryTheory.cechNerveTerminalFrom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Action/Concrete.html#Action.ofMulAction\">Action.ofMulAction</a> <span class=\"fn\">G</span> <span class=\"fn\">G</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover\">classifyingSpaceUniversalCover</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L364-L372","name":"classifyingSpaceUniversalCover","line":364,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover","doc":"The simplicial `G`-set sending `[n]` to `Gⁿ⁺¹` equipped with the diagonal action of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#classifyingSpaceUniversalCover\"><span class=\"name\">classifyingSpaceUniversalCover</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Monoid\">Monoid</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Basic.html#CategoryTheory.SimplicialObject\">CategoryTheory.SimplicialObject</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action\">Action</a> <a href=\"./foundational_types.html\">(Type</a> u) <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L346-L358","name":"Rep.diagonalHomEquiv_symm_partialProd_succ","line":346,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_symm_partialProd_succ","doc":"Auxiliary lemma for defining group cohomology, used to show that the isomorphism\n`diagonalHomEquiv` commutes with the differentials in two complexes which compute\ngroup cohomology. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_symm_partialProd_succ\"><span class=\"name\">Rep</span>.<span class=\"name\">diagonalHomEquiv_symm_partialProd_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span>)</span> → <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.V\">V</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv\">diagonalHomEquiv</a> <span class=\"fn\">n</span> <span class=\"fn\">A</span>)</span>.<a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.Hom.hom\">hom</a></span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> (<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Mathlib/Data/Fin/Basic.html#Fin.succAbove\">succAbove</a></span>) <span class=\"fn\">1</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.contractNth\">contractNth</a></span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">g</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L310-L344","name":"Rep.diagonalHomEquiv_symm_apply","line":310,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_symm_apply","doc":"Given a `k`-linear `G`-representation `A`, `diagonalHomEquiv` is a `k`-linear isomorphism of\nthe set of representation morphisms `Hom(k[Gⁿ⁺¹], A)` with `Fun(Gⁿ, A)`. This lemma says that the\ninverse map sends a function `f : Gⁿ → A` to the representation morphism sending\n`(g₀, ... gₙ) ↦ ρ(g₀)(f(g₀⁻¹g₁, g₁⁻¹g₂, ..., gₙ₋₁⁻¹gₙ))`, where `ρ` is the representation attached\nto `A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_symm_apply\"><span class=\"name\">Rep</span>.<span class=\"name\">diagonalHomEquiv_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span>)</span> → <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.V\">V</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv\">diagonalHomEquiv</a> <span class=\"fn\">n</span> <span class=\"fn\">A</span>)</span>.<a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv.symm\">symm</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.Hom.hom\">hom</a></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">x</span> <span class=\"fn\">1</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.ρ\">ρ</a></span> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">0</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L294-L308","name":"Rep.diagonalHomEquiv_apply","line":294,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_apply","doc":"Given a `k`-linear `G`-representation `A`, `diagonalHomEquiv` is a `k`-linear isomorphism of\nthe set of representation morphisms `Hom(k[Gⁿ⁺¹], A)` with `Fun(Gⁿ, A)`. This lemma says that this\nsends a morphism of representations `f : k[Gⁿ⁺¹] ⟶ A` to the function\n`(g₁, ..., gₙ) ↦ f(1, g₁, g₁g₂, ..., g₁g₂...gₙ).` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv_apply\"><span class=\"name\">Rep</span>.<span class=\"name\">diagonalHomEquiv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.diagonal\">diagonal</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv\">diagonalHomEquiv</a> <span class=\"fn\">n</span> <span class=\"fn\">A</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.Hom.hom\">hom</a></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L282-L290","name":"Rep.diagonalHomEquiv","line":282,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv","doc":"Given a `k`-linear `G`-representation `A`, the set of representation morphisms\n`Hom(k[Gⁿ⁺¹], A)` is `k`-linearly isomorphic to the set of functions `Gⁿ → A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#Rep.diagonalHomEquiv\"><span class=\"name\">Rep</span>.<span class=\"name\">diagonalHomEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep\">Rep</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.diagonal\">diagonal</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">A</span>) <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span>)</span> → <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.V\">V</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L268-L270","name":"groupCohomology.resolution.ofMulAction_free","line":268,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulAction_free","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulAction_free\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">ofMulAction_free</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/FreeModule/Basic.html#Module.Free\">Module.Free</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/MonoidAlgebra/Defs.html#MonoidAlgebra\">MonoidAlgebra</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Basic.html#Representation.ofMulAction\">Representation.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span>)</span>)</span>.<a href=\"./Mathlib/RepresentationTheory/Basic.html#Representation.asModule\">asModule</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L259-L266","name":"groupCohomology.resolution.ofMulActionBasis","line":259,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulActionBasis","doc":"A `k[G]`-basis of `k[Gⁿ⁺¹]`, coming from the `k[G]`-linear isomorphism\n`k[G] ⊗ₖ k[Gⁿ] ≃ k[Gⁿ⁺¹].` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulActionBasis\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">ofMulActionBasis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis/Defs.html#Basis\">Basis</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/MonoidAlgebra/Defs.html#MonoidAlgebra\">MonoidAlgebra</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Basic.html#Representation.ofMulAction\">Representation.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span>)</span>)</span>.<a href=\"./Mathlib/RepresentationTheory/Basic.html#Representation.asModule\">asModule</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L233-L257","name":"groupCohomology.resolution.ofMulActionBasisAux","line":233,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulActionBasisAux","doc":"The `k[G]`-linear isomorphism `k[G] ⊗ₖ k[Gⁿ] ≃ k[Gⁿ⁺¹]`, where the `k[G]`-module structure on\nthe lefthand side is `TensorProduct.leftModule`, whilst that of the righthand side comes from\n`Representation.asModule`. Allows us to use `Algebra.TensorProduct.basis` to get a `k[G]`-basis\nof the righthand side. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.ofMulActionBasisAux\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">ofMulActionBasisAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct\">TensorProduct</a> <span class=\"fn\">k</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/MonoidAlgebra/Defs.html#MonoidAlgebra\">MonoidAlgebra</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> (<span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span>)</span> <a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">≃ₗ[</a><span class=\"fn\"><a href=\"./Mathlib/Algebra/MonoidAlgebra/Defs.html#MonoidAlgebra\">MonoidAlgebra</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span></span><a href=\"./Mathlib/Algebra/Module/Equiv/Defs.html#LinearEquiv\">]</a>   <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Basic.html#Representation.ofMulAction\">Representation.ofMulAction</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span>)</span>)</span>.<a href=\"./Mathlib/RepresentationTheory/Basic.html#Representation.asModule\">asModule</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L217-L225","name":"groupCohomology.resolution.diagonalSucc_inv_single_right","line":217,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_right\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">diagonalSucc_inv_single_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc\">diagonalSucc</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.Hom.hom\">hom</a></span>)</span> (<span class=\"fn\">g</span> <a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">⊗ₜ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">f</span> <span class=\"fn\">r</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Finsupp/LSum.html#Finsupp.lift\">Finsupp.lift</a> (<span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span>) <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">G</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> (<span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">f</span></span>) <span class=\"fn\">r</span></span></span>)</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L206-L215","name":"groupCohomology.resolution.diagonalSucc_inv_single_left","line":206,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_left\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">diagonalSucc_inv_single_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc\">diagonalSucc</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.Hom.hom\">hom</a></span>)</span> (<span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">g</span> <span class=\"fn\">r</span></span> <a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">⊗ₜ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">]</a> <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Finsupp/LSum.html#Finsupp.lift\">Finsupp.lift</a> (<span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span>) <span class=\"fn\">k</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span>)</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>) =&gt;\n      <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> (<span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">f</span></span>) <span class=\"fn\">r</span></span></span>)</span>\n    <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L186-L204","name":"groupCohomology.resolution.diagonalSucc_inv_single_single","line":186,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_single","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_inv_single_single\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">diagonalSucc_inv_single_single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc\">diagonalSucc</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.Hom.hom\">hom</a></span>)</span> (<span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">⊗ₜ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">f</span> <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> (<span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">f</span></span>) (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L176-L184","name":"groupCohomology.resolution.diagonalSucc_hom_single","line":176,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_hom_single","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc_hom_single\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">diagonalSucc_hom_single</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc\">diagonalSucc</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.Hom.hom\">hom</a></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">0</span>)</span> <span class=\"fn\">1</span></span> <a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">⊗ₜ[</a><span class=\"fn\">k</span><a href=\"./Mathlib/LinearAlgebra/TensorProduct/Basic.html#TensorProduct.tmul\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finsupp/Single.html#Finsupp.single\">Finsupp.single</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span>)</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L164-L172","name":"groupCohomology.resolution.diagonalSucc","line":164,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc","doc":"An isomorphism of `k`-linear representations of `G` from `k[Gⁿ⁺¹]` to `k[G] ⊗ₖ k[Gⁿ]` (on\nwhich `G` acts by `ρ(g₁)(g₂ ⊗ x) = (g₁ * g₂) ⊗ x`) sending `(g₀, ..., gₙ)` to\n`g₀ ⊗ (g₀⁻¹g₁, g₁⁻¹g₂, ..., gₙ₋₁⁻¹gₙ)`. The inverse sends `g₀ ⊗ (g₁, ..., gₙ)` to\n`(g₀, g₀g₁, ..., g₀g₁...gₙ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.diagonalSucc\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">diagonalSucc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.diagonal\">Rep.diagonal</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategoryStruct.tensorObj</a> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.leftRegular\">Rep.leftRegular</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/Rep.html#Rep.trivial\">Rep.trivial</a> <span class=\"fn\">k</span> <span class=\"fn\">G</span> (<span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span>)</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">k</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L129-L156","name":"groupCohomology.resolution.actionDiagonalSucc_inv_apply","line":129,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc_inv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc_inv_apply\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">actionDiagonalSucc_inv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc\">actionDiagonalSucc</a> <span class=\"fn\">G</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.Hom.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">g</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">f</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Fin.html#Fin.partialProd\">Fin.partialProd</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L110-L127","name":"groupCohomology.resolution.actionDiagonalSucc_hom_apply","line":110,"kind":"theorem","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc_hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc_hom_apply\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">actionDiagonalSucc_hom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc\">actionDiagonalSucc</a> <span class=\"fn\">G</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/Action/Basic.html#Action.Hom.hom\">hom</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span>)</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/RepresentationTheory/GroupCohomology/Resolution.lean#L95-L108","name":"groupCohomology.resolution.actionDiagonalSucc","line":95,"kind":"def","docLink":"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc","doc":"An isomorphism of `G`-sets `Gⁿ⁺¹ ≅ G × Gⁿ`, where `G` acts by left multiplication on `Gⁿ⁺¹` and\n`G` but trivially on `Gⁿ`. The map sends `(g₀, ..., gₙ) ↦ (g₀, (g₀⁻¹g₁, g₁⁻¹g₂, ..., gₙ₋₁⁻¹gₙ))`,\nand the inverse is `(g₀, (g₁, ..., gₙ)) ↦ (g₀, g₀g₁, g₀g₁g₂, ..., g₀g₁...gₙ).` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RepresentationTheory/GroupCohomology/Resolution.html#groupCohomology.resolution.actionDiagonalSucc\"><span class=\"name\">groupCohomology</span>.<span class=\"name\">resolution</span>.<span class=\"name\">actionDiagonalSucc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Action/Concrete.html#Action.diagonal\">Action.diagonal</a> <span class=\"fn\">G</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorObj\">CategoryTheory.MonoidalCategoryStruct.tensorObj</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Action/Concrete.html#Action.leftRegular\">Action.leftRegular</a> <span class=\"fn\">G</span>)</span> <span class=\"fn\">{ <span class=\"fn\">V</span> := <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">G</span></span>, <span class=\"fn\">ρ</span> := <span class=\"fn\">1</span> }</span></span></div></div>"}]}