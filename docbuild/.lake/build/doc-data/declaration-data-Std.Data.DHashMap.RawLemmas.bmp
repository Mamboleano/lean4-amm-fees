{"name":"Std.Data.DHashMap.RawLemmas","instances":[],"imports":["Std.Data.DHashMap.Internal.Raw","Std.Data.DHashMap.Internal.RawLemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2891-L2894","name":"Std.DHashMap.Raw.Const.getKeyD_modify_self","line":2891,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2882-L2889","name":"Std.DHashMap.Raw.Const.getKeyD_modify","line":2882,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">fallback</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2875-L2880","name":"Std.DHashMap.Raw.Const.getKey_modify_self","line":2875,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2863-L2873","name":"Std.DHashMap.Raw.Const.getKey_modify","line":2863,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2858-L2861","name":"Std.DHashMap.Raw.Const.getKey!_modify_self","line":2858,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2849-L2856","name":"Std.DHashMap.Raw.Const.getKey!_modify","line":2849,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2844-L2847","name":"Std.DHashMap.Raw.Const.getKey?_modify_self","line":2844,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2835-L2842","name":"Std.DHashMap.Raw.Const.getKey?_modify","line":2835,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2830-L2833","name":"Std.DHashMap.Raw.Const.getD_modify_self","line":2830,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2822-L2828","name":"Std.DHashMap.Raw.Const.getD_modify","line":2822,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2817-L2820","name":"Std.DHashMap.Raw.Const.get!_modify_self","line":2817,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2809-L2815","name":"Std.DHashMap.Raw.Const.get!_modify","line":2809,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2800-L2807","name":"Std.DHashMap.Raw.Const.get_modify_self","line":2800,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2787-L2798","name":"Std.DHashMap.Raw.Const.get_modify","line":2787,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k'</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if heq : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span>)</span></span> else <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">k'</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2782-L2785","name":"Std.DHashMap.Raw.Const.get?_modify_self","line":2782,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2774-L2780","name":"Std.DHashMap.Raw.Const.get?_modify","line":2774,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2769-L2772","name":"Std.DHashMap.Raw.Const.size_modify","line":2769,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2764-L2767","name":"Std.DHashMap.Raw.Const.mem_modify","line":2764,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2759-L2762","name":"Std.DHashMap.Raw.Const.contains_modify","line":2759,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">contains_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2754-L2757","name":"Std.DHashMap.Raw.Const.isEmpty_modify","line":2754,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">isEmpty_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\">modify</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2745-L2748","name":"Std.DHashMap.Raw.getKeyD_modify_self","line":2745,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2736-L2743","name":"Std.DHashMap.Raw.getKeyD_modify","line":2736,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">fallback</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2729-L2734","name":"Std.DHashMap.Raw.getKey_modify_self","line":2729,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2717-L2727","name":"Std.DHashMap.Raw.getKey_modify","line":2717,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2712-L2715","name":"Std.DHashMap.Raw.getKey!_modify_self","line":2712,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2703-L2710","name":"Std.DHashMap.Raw.getKey!_modify","line":2703,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2698-L2701","name":"Std.DHashMap.Raw.getKey?_modify_self","line":2698,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2689-L2696","name":"Std.DHashMap.Raw.getKey?_modify","line":2689,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2684-L2687","name":"Std.DHashMap.Raw.getD_modify_self","line":2684,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2676-L2682","name":"Std.DHashMap.Raw.getD_modify","line":2676,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if heq : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2671-L2674","name":"Std.DHashMap.Raw.get!_modify_self","line":2671,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2663-L2669","name":"Std.DHashMap.Raw.get!_modify","line":2663,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k'</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if heq : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2655-L2661","name":"Std.DHashMap.Raw.get_modify_self","line":2655,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2642-L2653","name":"Std.DHashMap.Raw.get_modify","line":2642,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if heq : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span>)</span>)</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2637-L2640","name":"Std.DHashMap.Raw.get?_modify_self","line":2637,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_modify_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_modify_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_modify_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2629-L2635","name":"Std.DHashMap.Raw.get?_modify","line":2629,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2624-L2627","name":"Std.DHashMap.Raw.size_modify","line":2624,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2619-L2622","name":"Std.DHashMap.Raw.mem_modify","line":2619,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2614-L2617","name":"Std.DHashMap.Raw.contains_modify","line":2614,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2609-L2612","name":"Std.DHashMap.Raw.isEmpty_modify","line":2609,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\">modify</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2598-L2601","name":"Std.DHashMap.Raw.Const.getKeyD_alter_self","line":2598,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2590-L2596","name":"Std.DHashMap.Raw.Const.getKeyD_alter","line":2590,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">fallback</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2584-L2588","name":"Std.DHashMap.Raw.Const.getKey_alter_self","line":2584,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2572-L2582","name":"Std.DHashMap.Raw.Const.getKey_alter","line":2572,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if heq : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\">k</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2567-L2570","name":"Std.DHashMap.Raw.Const.getKey!_alter_self","line":2567,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2559-L2565","name":"Std.DHashMap.Raw.Const.getKey!_alter","line":2559,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2554-L2557","name":"Std.DHashMap.Raw.Const.getKey?_alter_self","line":2554,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2546-L2552","name":"Std.DHashMap.Raw.Const.getKey?_alter","line":2546,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2540-L2544","name":"Std.DHashMap.Raw.Const.getD_alter_self","line":2540,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2532-L2538","name":"Std.DHashMap.Raw.Const.getD_alter","line":2532,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2526-L2530","name":"Std.DHashMap.Raw.Const.get!_alter_self","line":2526,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2518-L2524","name":"Std.DHashMap.Raw.Const.get!_alter","line":2518,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2509-L2516","name":"Std.DHashMap.Raw.Const.get_alter_self","line":2509,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2496-L2507","name":"Std.DHashMap.Raw.Const.get_alter","line":2496,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k'</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if heq : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span> else <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">k'</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2491-L2494","name":"Std.DHashMap.Raw.Const.get?_alter_self","line":2491,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2483-L2489","name":"Std.DHashMap.Raw.Const.get?_alter","line":2483,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2479-L2481","name":"Std.DHashMap.Raw.Const.size_le_size_alter","line":2479,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_le_size_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_le_size_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_le_size_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2475-L2477","name":"Std.DHashMap.Raw.Const.size_alter_le_size","line":2475,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter_le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_alter_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2468-L2473","name":"Std.DHashMap.Raw.Const.size_alter_eq_self_of_mem","line":2468,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter_eq_self_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter_eq_self_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_alter_eq_self_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2461-L2466","name":"Std.DHashMap.Raw.Const.size_alter_eq_self_of_not_mem","line":2461,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter_eq_self_of_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter_eq_self_of_not_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_alter_eq_self_of_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2454-L2459","name":"Std.DHashMap.Raw.Const.size_alter_eq_sub_one","line":2454,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter_eq_sub_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter_eq_sub_one\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_alter_eq_sub_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2447-L2452","name":"Std.DHashMap.Raw.Const.size_alter_eq_add_one","line":2447,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter_eq_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter_eq_add_one\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_alter_eq_add_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2437-L2445","name":"Std.DHashMap.Raw.Const.size_alter","line":2437,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>\n  <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2432-L2435","name":"Std.DHashMap.Raw.Const.mem_alter_of_beq_eq_false","line":2432,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_alter_of_beq_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_alter_of_beq_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_alter_of_beq_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2427-L2430","name":"Std.DHashMap.Raw.Const.contains_alter_of_beq_eq_false","line":2427,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_alter_of_beq_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_alter_of_beq_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">contains_alter_of_beq_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2422-L2425","name":"Std.DHashMap.Raw.Const.mem_alter_self","line":2422,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2417-L2420","name":"Std.DHashMap.Raw.Const.contains_alter_self","line":2417,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">contains_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2413-L2415","name":"Std.DHashMap.Raw.Const.mem_alter_of_beq","line":2413,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_alter_of_beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_alter_of_beq\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_alter_of_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2409-L2411","name":"Std.DHashMap.Raw.Const.mem_alter","line":2409,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2404-L2407","name":"Std.DHashMap.Raw.Const.contains_alter","line":2404,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">contains_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2398-L2402","name":"Std.DHashMap.Raw.Const.isEmpty_alter","line":2398,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">isEmpty_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> ((<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span>) <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2393-L2396","name":"Std.DHashMap.Raw.Const.isEmpty_alter_eq_isEmpty_erase","line":2393,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_alter_eq_isEmpty_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_alter_eq_isEmpty_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">isEmpty_alter_eq_isEmpty_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\">alter</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2383-L2387","name":"Std.DHashMap.Raw.getKeyD_alter_self","line":2383,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2375-L2381","name":"Std.DHashMap.Raw.getKeyD_alter","line":2375,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">fallback</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2370-L2373","name":"Std.DHashMap.Raw.getKey_alter_self","line":2370,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2358-L2368","name":"Std.DHashMap.Raw.getKey_alter","line":2358,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if heq : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\">k</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2354-L2356","name":"Std.DHashMap.Raw.getKey!_alter_self","line":2354,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2346-L2352","name":"Std.DHashMap.Raw.getKey!_alter","line":2346,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2342-L2344","name":"Std.DHashMap.Raw.getKey?_alter_self","line":2342,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2334-L2340","name":"Std.DHashMap.Raw.getKey?_alter","line":2334,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2329-L2332","name":"Std.DHashMap.Raw.getD_alter_self","line":2329,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2321-L2327","name":"Std.DHashMap.Raw.getD_alter","line":2321,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if heq : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2316-L2319","name":"Std.DHashMap.Raw.get!_alter_self","line":2316,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2304-L2310","name":"Std.DHashMap.Raw.get!_alter","line":2304,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k'</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if heq : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2295-L2302","name":"Std.DHashMap.Raw.get_alter_self","line":2295,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2282-L2293","name":"Std.DHashMap.Raw.get_alter","line":2282,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hc</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if heq : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span>)</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2277-L2280","name":"Std.DHashMap.Raw.get?_alter_self","line":2277,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2271-L2275","name":"Std.DHashMap.Raw.get?_alter","line":2271,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2267-L2269","name":"Std.DHashMap.Raw.size_le_size_alter","line":2267,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_le_size_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_le_size_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_le_size_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2263-L2265","name":"Std.DHashMap.Raw.size_alter_le_size","line":2263,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter_le_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_alter_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2256-L2261","name":"Std.DHashMap.Raw.size_alter_eq_self_of_mem","line":2256,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter_eq_self_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter_eq_self_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_alter_eq_self_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2249-L2254","name":"Std.DHashMap.Raw.size_alter_eq_self_of_not_mem","line":2249,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter_eq_self_of_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter_eq_self_of_not_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_alter_eq_self_of_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2242-L2247","name":"Std.DHashMap.Raw.size_alter_eq_sub_one","line":2242,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter_eq_sub_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter_eq_sub_one\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_alter_eq_sub_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2235-L2240","name":"Std.DHashMap.Raw.size_alter_eq_add_one","line":2235,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter_eq_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter_eq_add_one\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_alter_eq_add_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2225-L2233","name":"Std.DHashMap.Raw.size_alter","line":2225,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>\n  <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2221-L2223","name":"Std.DHashMap.Raw.mem_alter_of_beq_eq_false","line":2221,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_alter_of_beq_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_alter_of_beq_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_alter_of_beq_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2217-L2219","name":"Std.DHashMap.Raw.contains_alter_of_beq_eq_false","line":2217,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_alter_of_beq_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_alter_of_beq_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_alter_of_beq_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2212-L2215","name":"Std.DHashMap.Raw.mem_alter_self","line":2212,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2207-L2210","name":"Std.DHashMap.Raw.contains_alter_self","line":2207,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_alter_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_alter_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_alter_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2203-L2205","name":"Std.DHashMap.Raw.mem_alter_of_beq","line":2203,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_alter_of_beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_alter_of_beq\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_alter_of_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2199-L2201","name":"Std.DHashMap.Raw.mem_alter","line":2199,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2195-L2197","name":"Std.DHashMap.Raw.contains_alter","line":2195,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2190-L2193","name":"Std.DHashMap.Raw.isEmpty_alter","line":2190,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> ((<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span>) <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2186-L2188","name":"Std.DHashMap.Raw.isEmpty_alter_eq_isEmpty_erase","line":2186,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_alter_eq_isEmpty_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_alter_eq_isEmpty_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_alter_eq_isEmpty_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\">alter</a></span> <span class=\"fn\">k</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isNone\">isNone</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2169-L2173","name":"Std.DHashMap.Raw.Const.getD_unitOfList","line":2169,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_unitOfList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2163-L2167","name":"Std.DHashMap.Raw.Const.get!_unitOfList","line":2163,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_unitOfList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2157-L2161","name":"Std.DHashMap.Raw.Const.get_unitOfList","line":2157,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_unitOfList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2150-L2155","name":"Std.DHashMap.Raw.Const.get?_unitOfList","line":2150,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_unitOfList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2144-L2148","name":"Std.DHashMap.Raw.Const.isEmpty_unitOfList","line":2144,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_unitOfList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">isEmpty_unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2139-L2142","name":"Std.DHashMap.Raw.Const.size_unitOfList_le","line":2139,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_unitOfList_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_unitOfList_le\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_unitOfList_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2133-L2137","name":"Std.DHashMap.Raw.Const.size_unitOfList","line":2133,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_unitOfList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2126-L2131","name":"Std.DHashMap.Raw.Const.getKeyD_unitOfList_of_mem","line":2126,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_unitOfList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_unitOfList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_unitOfList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2120-L2124","name":"Std.DHashMap.Raw.Const.getKeyD_unitOfList_of_contains_eq_false","line":2120,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_unitOfList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_unitOfList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_unitOfList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2113-L2118","name":"Std.DHashMap.Raw.Const.getKey!_unitOfList_of_mem","line":2113,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_unitOfList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_unitOfList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_unitOfList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2107-L2111","name":"Std.DHashMap.Raw.Const.getKey!_unitOfList_of_contains_eq_false","line":2107,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_unitOfList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_unitOfList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_unitOfList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2099-L2105","name":"Std.DHashMap.Raw.Const.getKey_unitOfList_of_mem","line":2099,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_unitOfList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_unitOfList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey_unitOfList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2093-L2097","name":"Std.DHashMap.Raw.Const.getKey?_unitOfList_of_mem","line":2093,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_unitOfList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_unitOfList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_unitOfList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2088-L2091","name":"Std.DHashMap.Raw.Const.getKey?_unitOfList_of_contains_eq_false","line":2088,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_unitOfList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_unitOfList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_unitOfList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2082-L2086","name":"Std.DHashMap.Raw.Const.mem_unitOfList","line":2082,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_unitOfList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2076-L2080","name":"Std.DHashMap.Raw.Const.contains_unitOfList","line":2076,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_unitOfList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">contains_unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2071-L2074","name":"Std.DHashMap.Raw.Const.unitOfList_cons","line":2071,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.unitOfList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.unitOfList_cons\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">unitOfList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hd</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> (<span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span> <span class=\"fn\">tl</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2065-L2069","name":"Std.DHashMap.Raw.Const.unitOfList_singleton","line":2065,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.unitOfList_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.unitOfList_singleton\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">unitOfList_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2059-L2063","name":"Std.DHashMap.Raw.Const.unitOfList_nil","line":2059,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.unitOfList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.unitOfList_nil\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">unitOfList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">unitOfList</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2053-L2057","name":"Std.DHashMap.Raw.Const.isEmpty_ofList","line":2053,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">isEmpty_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2048-L2051","name":"Std.DHashMap.Raw.Const.size_ofList_le","line":2048,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_ofList_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_ofList_le\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_ofList_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2043-L2046","name":"Std.DHashMap.Raw.Const.size_ofList","line":2043,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2035-L2041","name":"Std.DHashMap.Raw.Const.getKeyD_ofList_of_mem","line":2035,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2029-L2033","name":"Std.DHashMap.Raw.Const.getKeyD_ofList_of_contains_eq_false","line":2029,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2021-L2027","name":"Std.DHashMap.Raw.Const.getKey!_ofList_of_mem","line":2021,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2015-L2019","name":"Std.DHashMap.Raw.Const.getKey!_ofList_of_contains_eq_false","line":2015,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L2006-L2013","name":"Std.DHashMap.Raw.Const.getKey_ofList_of_mem","line":2006,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1998-L2004","name":"Std.DHashMap.Raw.Const.getKey?_ofList_of_mem","line":1998,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1992-L1996","name":"Std.DHashMap.Raw.Const.getKey?_ofList_of_contains_eq_false","line":1992,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1985-L1990","name":"Std.DHashMap.Raw.Const.getD_ofList_of_mem","line":1985,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1979-L1983","name":"Std.DHashMap.Raw.Const.getD_ofList_of_contains_eq_false","line":1979,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1972-L1977","name":"Std.DHashMap.Raw.Const.get!_ofList_of_mem","line":1972,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1966-L1970","name":"Std.DHashMap.Raw.Const.get!_ofList_of_contains_eq_false","line":1966,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1958-L1964","name":"Std.DHashMap.Raw.Const.get_ofList_of_mem","line":1958,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k'</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1951-L1956","name":"Std.DHashMap.Raw.Const.get?_ofList_of_mem","line":1951,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1945-L1949","name":"Std.DHashMap.Raw.Const.get?_ofList_of_contains_eq_false","line":1945,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1939-L1943","name":"Std.DHashMap.Raw.Const.mem_ofList","line":1939,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1933-L1937","name":"Std.DHashMap.Raw.Const.contains_ofList","line":1933,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">contains_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1928-L1931","name":"Std.DHashMap.Raw.Const.ofList_cons","line":1928,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.ofList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.ofList_cons\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">ofList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">tl</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1922-L1926","name":"Std.DHashMap.Raw.Const.ofList_singleton","line":1922,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.ofList_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.ofList_singleton\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">ofList_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1916-L1920","name":"Std.DHashMap.Raw.Const.ofList_nil","line":1916,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.ofList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.ofList_nil\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">ofList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">ofList</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1906-L1910","name":"Std.DHashMap.Raw.isEmpty_ofList","line":1906,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1901-L1904","name":"Std.DHashMap.Raw.size_ofList_le","line":1901,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_ofList_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_ofList_le\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_ofList_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1896-L1899","name":"Std.DHashMap.Raw.size_ofList","line":1896,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1888-L1894","name":"Std.DHashMap.Raw.getKeyD_ofList_of_mem","line":1888,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1882-L1886","name":"Std.DHashMap.Raw.getKeyD_ofList_of_contains_eq_false","line":1882,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1874-L1880","name":"Std.DHashMap.Raw.getKey!_ofList_of_mem","line":1874,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1868-L1872","name":"Std.DHashMap.Raw.getKey!_ofList_of_contains_eq_false","line":1868,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1859-L1866","name":"Std.DHashMap.Raw.getKey_ofList_of_mem","line":1859,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1851-L1857","name":"Std.DHashMap.Raw.getKey?_ofList_of_mem","line":1851,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1845-L1849","name":"Std.DHashMap.Raw.getKey?_ofList_of_contains_eq_false","line":1845,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1838-L1843","name":"Std.DHashMap.Raw.getD_ofList_of_mem","line":1838,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1832-L1836","name":"Std.DHashMap.Raw.getD_ofList_of_contains_eq_false","line":1832,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1825-L1830","name":"Std.DHashMap.Raw.get!_ofList_of_mem","line":1825,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k'</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1819-L1823","name":"Std.DHashMap.Raw.get!_ofList_of_contains_eq_false","line":1819,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1811-L1817","name":"Std.DHashMap.Raw.get_ofList_of_mem","line":1811,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1804-L1809","name":"Std.DHashMap.Raw.get?_ofList_of_mem","line":1804,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_ofList_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_ofList_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_ofList_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1798-L1802","name":"Std.DHashMap.Raw.get?_ofList_of_contains_eq_false","line":1798,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_ofList_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_ofList_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_ofList_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1792-L1796","name":"Std.DHashMap.Raw.mem_ofList","line":1792,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1786-L1790","name":"Std.DHashMap.Raw.contains_ofList","line":1786,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1781-L1784","name":"Std.DHashMap.Raw.ofList_cons","line":1781,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.ofList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.ofList_cons\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ofList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> (<span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">tl</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1775-L1779","name":"Std.DHashMap.Raw.ofList_singleton","line":1775,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.ofList_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.ofList_singleton\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ofList_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1769-L1773","name":"Std.DHashMap.Raw.ofList_nil","line":1769,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.ofList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.ofList_nil\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ofList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">ofList</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1753-L1757","name":"Std.DHashMap.Raw.Const.getD_insertManyIfNewUnit_list","line":1753,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1747-L1751","name":"Std.DHashMap.Raw.Const.get!_insertManyIfNewUnit_list","line":1747,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1741-L1745","name":"Std.DHashMap.Raw.Const.get_insertManyIfNewUnit_list","line":1741,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1733-L1739","name":"Std.DHashMap.Raw.Const.get?_insertManyIfNewUnit_list","line":1733,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1727-L1731","name":"Std.DHashMap.Raw.Const.isEmpty_insertManyIfNewUnit_list","line":1727,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">isEmpty_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1722-L1725","name":"Std.DHashMap.Raw.Const.size_insertManyIfNewUnit_list_le","line":1722,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_insertManyIfNewUnit_list_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_insertManyIfNewUnit_list_le\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_insertManyIfNewUnit_list_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1717-L1720","name":"Std.DHashMap.Raw.Const.size_le_size_insertManyIfNewUnit_list","line":1717,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_le_size_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_le_size_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_le_size_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1709-L1715","name":"Std.DHashMap.Raw.Const.size_insertManyIfNewUnit_list","line":1709,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1703-L1707","name":"Std.DHashMap.Raw.Const.getKeyD_insertManyIfNewUnit_list_of_mem","line":1703,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_insertManyIfNewUnit_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_insertManyIfNewUnit_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_insertManyIfNewUnit_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1696-L1701","name":"Std.DHashMap.Raw.Const.getKeyD_insertManyIfNewUnit_list_of_not_mem_of_mem","line":1696,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_insertManyIfNewUnit_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_insertManyIfNewUnit_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_insertManyIfNewUnit_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1688-L1694","name":"Std.DHashMap.Raw.Const.getKeyD_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false","line":1688,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1682-L1686","name":"Std.DHashMap.Raw.Const.getKey!_insertManyIfNewUnit_list_of_mem","line":1682,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_insertManyIfNewUnit_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_insertManyIfNewUnit_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_insertManyIfNewUnit_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1675-L1680","name":"Std.DHashMap.Raw.Const.getKey!_insertManyIfNewUnit_list_of_not_mem_of_mem","line":1675,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_insertManyIfNewUnit_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_insertManyIfNewUnit_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_insertManyIfNewUnit_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1668-L1673","name":"Std.DHashMap.Raw.Const.getKey!_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false","line":1668,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1660-L1666","name":"Std.DHashMap.Raw.Const.getKey_insertManyIfNewUnit_list_of_not_mem_of_mem","line":1660,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_insertManyIfNewUnit_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_insertManyIfNewUnit_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey_insertManyIfNewUnit_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1655-L1658","name":"Std.DHashMap.Raw.Const.getKey_insertManyIfNewUnit_list_of_mem","line":1655,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_insertManyIfNewUnit_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_insertManyIfNewUnit_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey_insertManyIfNewUnit_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">mem</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1649-L1653","name":"Std.DHashMap.Raw.Const.getKey?_insertManyIfNewUnit_list_of_mem","line":1649,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_insertManyIfNewUnit_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_insertManyIfNewUnit_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_insertManyIfNewUnit_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1642-L1647","name":"Std.DHashMap.Raw.Const.getKey?_insertManyIfNewUnit_list_of_not_mem_of_mem","line":1642,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_insertManyIfNewUnit_list_of_not_mem_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_insertManyIfNewUnit_list_of_not_mem_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_insertManyIfNewUnit_list_of_not_mem_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1635-L1640","name":"Std.DHashMap.Raw.Const.getKey?_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false","line":1635,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_insertManyIfNewUnit_list_of_not_mem_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1629-L1633","name":"Std.DHashMap.Raw.Const.mem_of_mem_insertManyIfNewUnit_list","line":1629,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_of_mem_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_of_mem_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_of_mem_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span> → <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1623-L1627","name":"Std.DHashMap.Raw.Const.mem_insertManyIfNewUnit_list","line":1623,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1617-L1621","name":"Std.DHashMap.Raw.Const.contains_insertManyIfNewUnit_list","line":1617,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">contains_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1612-L1615","name":"Std.DHashMap.Raw.Const.insertManyIfNewUnit_cons","line":1612,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit_cons\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertManyIfNewUnit_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1606-L1610","name":"Std.DHashMap.Raw.Const.insertManyIfNewUnit_list_singleton","line":1606,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit_list_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit_list_singleton\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertManyIfNewUnit_list_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1600-L1604","name":"Std.DHashMap.Raw.Const.insertManyIfNewUnit_nil","line":1600,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit_nil\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertManyIfNewUnit_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1592-L1596","name":"Std.DHashMap.Raw.Const.getD_insertMany_list_of_mem","line":1592,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1586-L1590","name":"Std.DHashMap.Raw.Const.getD_insertMany_list_of_contains_eq_false","line":1586,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1580-L1584","name":"Std.DHashMap.Raw.Const.get!_insertMany_list_of_mem","line":1580,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1574-L1578","name":"Std.DHashMap.Raw.Const.get!_insertMany_list_of_contains_eq_false","line":1574,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1568-L1572","name":"Std.DHashMap.Raw.Const.get_insertMany_list_of_mem","line":1568,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1560-L1566","name":"Std.DHashMap.Raw.Const.get_insertMany_list_of_contains_eq_false","line":1560,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1554-L1558","name":"Std.DHashMap.Raw.Const.get?_insertMany_list_of_mem","line":1554,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1548-L1552","name":"Std.DHashMap.Raw.Const.get?_insertMany_list_of_contains_eq_false","line":1548,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1542-L1546","name":"Std.DHashMap.Raw.Const.isEmpty_insertMany_list","line":1542,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">isEmpty_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1537-L1540","name":"Std.DHashMap.Raw.Const.size_insertMany_list_le","line":1537,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_insertMany_list_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_insertMany_list_le\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_insertMany_list_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1532-L1535","name":"Std.DHashMap.Raw.Const.size_le_size_insertMany_list","line":1532,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_le_size_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_le_size_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_le_size_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1524-L1530","name":"Std.DHashMap.Raw.Const.size_insertMany_list","line":1524,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.size_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">size_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1516-L1522","name":"Std.DHashMap.Raw.Const.getKeyD_insertMany_list_of_mem","line":1516,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1510-L1514","name":"Std.DHashMap.Raw.Const.getKeyD_insertMany_list_of_contains_eq_false","line":1510,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKeyD_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKeyD_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1502-L1508","name":"Std.DHashMap.Raw.Const.getKey!_insertMany_list_of_mem","line":1502,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1496-L1500","name":"Std.DHashMap.Raw.Const.getKey!_insertMany_list_of_contains_eq_false","line":1496,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey!_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey!_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1487-L1494","name":"Std.DHashMap.Raw.Const.getKey_insertMany_list_of_mem","line":1487,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1479-L1485","name":"Std.DHashMap.Raw.Const.getKey_insertMany_list_of_contains_eq_false","line":1479,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1471-L1477","name":"Std.DHashMap.Raw.Const.getKey?_insertMany_list_of_mem","line":1471,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1465-L1469","name":"Std.DHashMap.Raw.Const.getKey?_insertMany_list_of_contains_eq_false","line":1465,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getKey?_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getKey?_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1459-L1463","name":"Std.DHashMap.Raw.Const.mem_of_mem_insertMany_list","line":1459,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_of_mem_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_of_mem_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_of_mem_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1453-L1457","name":"Std.DHashMap.Raw.Const.mem_insertMany_list","line":1453,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1447-L1451","name":"Std.DHashMap.Raw.Const.contains_insertMany_list","line":1447,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">contains_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1441-L1445","name":"Std.DHashMap.Raw.Const.insertMany_cons","line":1441,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertMany_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertMany_cons\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertMany_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> (<a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1434-L1439","name":"Std.DHashMap.Raw.Const.insertMany_list_singleton","line":1434,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertMany_list_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertMany_list_singleton\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertMany_list_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1428-L1432","name":"Std.DHashMap.Raw.Const.insertMany_nil","line":1428,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertMany_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.insertMany_nil\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertMany_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">insertMany</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1418-L1422","name":"Std.DHashMap.Raw.isEmpty_insertMany_list","line":1418,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1413-L1416","name":"Std.DHashMap.Raw.size_insertMany_list_le","line":1413,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insertMany_list_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insertMany_list_le\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_insertMany_list_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1408-L1411","name":"Std.DHashMap.Raw.size_le_size_insertMany_list","line":1408,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_le_size_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_le_size_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_le_size_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1401-L1406","name":"Std.DHashMap.Raw.size_insertMany_list","line":1401,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1393-L1399","name":"Std.DHashMap.Raw.getKeyD_insertMany_list_of_mem","line":1393,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k' </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1387-L1391","name":"Std.DHashMap.Raw.getKeyD_insertMany_list_of_contains_eq_false","line":1387,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1379-L1385","name":"Std.DHashMap.Raw.getKey!_insertMany_list_of_mem","line":1379,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1373-L1377","name":"Std.DHashMap.Raw.getKey!_insertMany_list_of_contains_eq_false","line":1373,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1364-L1371","name":"Std.DHashMap.Raw.getKey_insertMany_list_of_mem","line":1364,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1356-L1362","name":"Std.DHashMap.Raw.getKey_insertMany_list_of_contains_eq_false","line":1356,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1348-L1354","name":"Std.DHashMap.Raw.getKey?_insertMany_list_of_mem","line":1348,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1342-L1346","name":"Std.DHashMap.Raw.getKey?_insertMany_list_of_contains_eq_false","line":1342,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1335-L1340","name":"Std.DHashMap.Raw.getD_insertMany_list_of_mem","line":1335,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1329-L1333","name":"Std.DHashMap.Raw.getD_insertMany_list_of_contains_eq_false","line":1329,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1322-L1327","name":"Std.DHashMap.Raw.get!_insertMany_list_of_mem","line":1322,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k'</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1316-L1320","name":"Std.DHashMap.Raw.get!_insertMany_list_of_contains_eq_false","line":1316,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1308-L1314","name":"Std.DHashMap.Raw.get_insertMany_list_of_mem","line":1308,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k'</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1300-L1306","name":"Std.DHashMap.Raw.get_insertMany_list_of_contains_eq_false","line":1300,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1293-L1298","name":"Std.DHashMap.Raw.get?_insertMany_list_of_mem","line":1293,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_insertMany_list_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_insertMany_list_of_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_insertMany_list_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k_beq</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distinct</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem</span> : <span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1287-L1291","name":"Std.DHashMap.Raw.get?_insertMany_list_of_contains_eq_false","line":1287,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_insertMany_list_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_insertMany_list_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_insertMany_list_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contains_eq_false</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1281-L1285","name":"Std.DHashMap.Raw.mem_of_mem_insertMany_list","line":1281,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_of_mem_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_of_mem_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_of_mem_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1275-L1279","name":"Std.DHashMap.Raw.mem_insertMany_list","line":1275,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1269-L1273","name":"Std.DHashMap.Raw.contains_insertMany_list","line":1269,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1263-L1267","name":"Std.DHashMap.Raw.insertMany_cons","line":1263,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.insertMany_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.insertMany_cons\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertMany_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> (<span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1257-L1261","name":"Std.DHashMap.Raw.insertMany_list_singleton","line":1257,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.insertMany_list_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.insertMany_list_singleton\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertMany_list_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1251-L1255","name":"Std.DHashMap.Raw.insertMany_nil","line":1251,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.insertMany_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.insertMany_nil\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertMany_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1242-L1245","name":"Std.DHashMap.Raw.Const.forIn_eq_forIn_keys","line":1242,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.forIn_eq_forIn_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.forIn_eq_forIn_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">forIn_eq_forIn_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.forIn\">forIn</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) (<span class=\"fn\">d</span> : <span class=\"fn\">δ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">d</span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1238-L1240","name":"Std.DHashMap.Raw.Const.forM_eq_forM_keys","line":1238,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.forM_eq_forM_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.forM_eq_forM_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">forM_eq_forM_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.forM\">forM</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span>.<a href=\"./Init/Data/List/Control.html#List.forM\">forM</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1234-L1236","name":"Std.DHashMap.Raw.Const.fold_eq_foldl_keys","line":1234,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.fold_eq_foldl_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.fold_eq_foldl_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">fold_eq_foldl_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.fold\">fold</a> <span class=\"fn\">(fun (<span class=\"fn\">d</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">d</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1229-L1232","name":"Std.DHashMap.Raw.Const.foldM_eq_foldlM_keys","line":1229,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.foldM_eq_foldlM_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.foldM_eq_foldlM_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">foldM_eq_foldlM_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.foldM\">foldM</a> <span class=\"fn\">(fun (<span class=\"fn\">d</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">d</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1222-L1225","name":"Std.DHashMap.Raw.Const.forIn_eq_forIn_toList","line":1222,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.forIn_eq_forIn_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.forIn_eq_forIn_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.forIn\">forIn</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">δ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1218-L1220","name":"Std.DHashMap.Raw.Const.forM_eq_forM_toList","line":1218,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.forM_eq_forM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.forM_eq_forM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">forM_eq_forM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.forM\">forM</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/List/Control.html#List.forM\">forM</a></span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1214-L1216","name":"Std.DHashMap.Raw.Const.fold_eq_foldl_toList","line":1214,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.fold_eq_foldl_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.fold_eq_foldl_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">fold_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.fold\">fold</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1209-L1212","name":"Std.DHashMap.Raw.Const.foldM_eq_foldlM_toList","line":1209,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.foldM_eq_foldlM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.foldM_eq_foldlM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">foldM_eq_foldlM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">δ</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.foldM\">foldM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1200-L1203","name":"Std.DHashMap.Raw.forIn_eq_forIn_toList","line":1200,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.forIn_eq_forIn_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.forIn_eq_forIn_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forIn_eq_forIn_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\">m</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1195-L1198","name":"Std.DHashMap.Raw.forIn_eq_forIn","line":1195,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.forIn_eq_forIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.forIn_eq_forIn\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forIn_eq_forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.forIn\">forIn</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\">m</span> <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) (<span class=\"fn\">b</span> : <span class=\"fn\">δ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1190-L1192","name":"Std.DHashMap.Raw.forM_eq_forM_toList","line":1190,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.forM_eq_forM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.forM_eq_forM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forM_eq_forM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span> → <span class=\"fn\"><span class=\"fn\">m'</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">ForM.forM</a> <span class=\"fn\">m</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span>.<a href=\"./Init/Data/List/Control.html#List.forM\">forM</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1185-L1188","name":"Std.DHashMap.Raw.forM_eq_forM","line":1185,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.forM_eq_forM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.forM_eq_forM\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forM_eq_forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m'</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.forM\">forM</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">ForM.forM</a> <span class=\"fn\">m</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1180-L1182","name":"Std.DHashMap.Raw.fold_eq_foldl_toList","line":1180,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.fold_eq_foldl_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.fold_eq_foldl_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">fold_eq_foldl_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.fold\">fold</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1175-L1178","name":"Std.DHashMap.Raw.foldM_eq_foldlM_toList","line":1175,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.foldM_eq_foldlM_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.foldM_eq_foldlM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">foldM_eq_foldlM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">δ</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.foldM\">foldM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1165-L1167","name":"Std.DHashMap.Raw.Const.distinct_keys_toList","line":1165,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.distinct_keys_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.distinct_keys_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">distinct_keys_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1157-L1163","name":"Std.DHashMap.Raw.Const.find?_toList_eq_none_iff_not_mem","line":1157,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.find?_toList_eq_none_iff_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.find?_toList_eq_none_iff_not_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">find?_toList_eq_none_iff_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1151-L1155","name":"Std.DHashMap.Raw.Const.find?_toList_eq_none_iff_contains_eq_false","line":1151,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.find?_toList_eq_none_iff_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.find?_toList_eq_none_iff_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">find?_toList_eq_none_iff_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1144-L1149","name":"Std.DHashMap.Raw.Const.find?_toList_eq_some_iff_getKey?_eq_some_and_get?_eq_some","line":1144,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.find?_toList_eq_some_iff_getKey?_eq_some_and_get?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.find?_toList_eq_some_iff_getKey?_eq_some_and_get?_eq_some\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">find?_toList_eq_some_iff_getKey?_eq_some_and_get?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1139-L1142","name":"Std.DHashMap.Raw.Const.get?_eq_some_iff_exists_beq_and_mem_toList","line":1139,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_iff_exists_beq_and_mem_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_iff_exists_beq_and_mem_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_eq_some_iff_exists_beq_and_mem_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">k'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1132-L1137","name":"Std.DHashMap.Raw.Const.mem_toList_iff_getKey?_eq_some_and_get?_eq_some","line":1132,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_toList_iff_getKey?_eq_some_and_get?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_toList_iff_getKey?_eq_some_and_get?_eq_some\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_toList_iff_getKey?_eq_some_and_get?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1126-L1130","name":"Std.DHashMap.Raw.Const.mem_toList_iff_get?_eq_some","line":1126,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_toList_iff_get?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.mem_toList_iff_get?_eq_some\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">mem_toList_iff_get?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1121-L1124","name":"Std.DHashMap.Raw.Const.isEmpty_toList","line":1121,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.isEmpty_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">isEmpty_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1116-L1119","name":"Std.DHashMap.Raw.Const.length_toList","line":1116,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.length_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.length_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">length_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1111-L1114","name":"Std.DHashMap.Raw.Const.map_prod_fst_toList_eq_keys","line":1111,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.map_prod_fst_toList_eq_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.map_prod_fst_toList_eq_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">map_prod_fst_toList_eq_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1106-L1109","name":"Std.DHashMap.Raw.Const.map_fst_toList_eq_keys","line":1106,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.map_fst_toList_eq_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.map_fst_toList_eq_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">map_fst_toList_eq_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\">toList</a> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1098-L1100","name":"Std.DHashMap.Raw.distinct_keys_toList","line":1098,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.distinct_keys_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.distinct_keys_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">distinct_keys_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1091-L1096","name":"Std.DHashMap.Raw.find?_toList_eq_none_iff_not_mem","line":1091,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.find?_toList_eq_none_iff_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.find?_toList_eq_none_iff_not_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">find?_toList_eq_none_iff_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1086-L1089","name":"Std.DHashMap.Raw.find?_toList_eq_none_iff_contains_eq_false","line":1086,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.find?_toList_eq_none_iff_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.find?_toList_eq_none_iff_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">find?_toList_eq_none_iff_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1081-L1084","name":"Std.DHashMap.Raw.find?_toList_eq_some_iff_get?_eq_some","line":1081,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.find?_toList_eq_some_iff_get?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.find?_toList_eq_some_iff_get?_eq_some\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">find?_toList_eq_some_iff_get?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1075-L1079","name":"Std.DHashMap.Raw.mem_toList_iff_get?_eq_some","line":1075,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_toList_iff_get?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_toList_iff_get?_eq_some\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_toList_iff_get?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⟨<span class=\"fn\">k</span>, <span class=\"fn\">v</span>⟩</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1070-L1073","name":"Std.DHashMap.Raw.isEmpty_toList","line":1070,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1065-L1068","name":"Std.DHashMap.Raw.length_toList","line":1065,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.length_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.length_toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">length_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1060-L1063","name":"Std.DHashMap.Raw.map_sigma_fst_toList_eq_keys","line":1060,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.map_sigma_fst_toList_eq_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.map_sigma_fst_toList_eq_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">map_sigma_fst_toList_eq_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1055-L1058","name":"Std.DHashMap.Raw.map_fst_toList_eq_keys","line":1055,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.map_fst_toList_eq_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.map_fst_toList_eq_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">map_fst_toList_eq_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Core.html#Sigma.fst\">Sigma.fst</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\">toList</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1051-L1053","name":"Std.DHashMap.Raw.distinct_keys","line":1051,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.distinct_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.distinct_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">distinct_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1045-L1049","name":"Std.DHashMap.Raw.mem_keys","line":1045,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1040-L1043","name":"Std.DHashMap.Raw.contains_keys","line":1040,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span>.<a href=\"./Init/Data/List/Basic.html#List.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1035-L1038","name":"Std.DHashMap.Raw.isEmpty_keys","line":1035,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1030-L1033","name":"Std.DHashMap.Raw.length_keys","line":1030,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.length_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.length_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">length_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\">keys</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1023-L1026","name":"Std.DHashMap.Raw.Const.getThenInsertIfNew?_snd","line":1023,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getThenInsertIfNew?_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getThenInsertIfNew?_snd\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getThenInsertIfNew?_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getThenInsertIfNew?\">getThenInsertIfNew?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1018-L1021","name":"Std.DHashMap.Raw.Const.getThenInsertIfNew?_fst","line":1018,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getThenInsertIfNew?_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getThenInsertIfNew?_fst\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getThenInsertIfNew?_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getThenInsertIfNew?\">getThenInsertIfNew?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1009-L1012","name":"Std.DHashMap.Raw.getThenInsertIfNew?_snd","line":1009,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getThenInsertIfNew?_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getThenInsertIfNew?_snd\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getThenInsertIfNew?_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getThenInsertIfNew?\">getThenInsertIfNew?</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L1004-L1007","name":"Std.DHashMap.Raw.getThenInsertIfNew?_fst","line":1004,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getThenInsertIfNew?_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getThenInsertIfNew?_fst\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getThenInsertIfNew?_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getThenInsertIfNew?\">getThenInsertIfNew?</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L997-L1002","name":"Std.DHashMap.Raw.getKeyD_insertIfNew","line":997,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L991-L995","name":"Std.DHashMap.Raw.getKey!_insertIfNew","line":991,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L985-L989","name":"Std.DHashMap.Raw.getKey_insertIfNew","line":985,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h₂ : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> then <span class=\"fn\">k</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L980-L983","name":"Std.DHashMap.Raw.getKey?_insertIfNew","line":980,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L972-L976","name":"Std.DHashMap.Raw.Const.getD_insertIfNew","line":972,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback </span><span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L967-L970","name":"Std.DHashMap.Raw.Const.get!_insertIfNew","line":967,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L960-L965","name":"Std.DHashMap.Raw.Const.get_insertIfNew","line":960,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h₂ : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> then <span class=\"fn\">v</span> else <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L955-L958","name":"Std.DHashMap.Raw.Const.get?_insertIfNew","line":955,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L944-L949","name":"Std.DHashMap.Raw.getD_insertIfNew","line":944,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L938-L942","name":"Std.DHashMap.Raw.get!_insertIfNew","line":938,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L931-L936","name":"Std.DHashMap.Raw.get_insertIfNew","line":931,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h₂ : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L924-L929","name":"Std.DHashMap.Raw.get?_insertIfNew","line":924,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span>)</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L920-L922","name":"Std.DHashMap.Raw.size_insertIfNew_le","line":920,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insertIfNew_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insertIfNew_le\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_insertIfNew_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L916-L918","name":"Std.DHashMap.Raw.size_le_size_insertIfNew","line":916,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_le_size_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_le_size_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_le_size_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L911-L914","name":"Std.DHashMap.Raw.size_insertIfNew","line":911,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L905-L909","name":"Std.DHashMap.Raw.mem_of_mem_insertIfNew'","line":905,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_of_mem_insertIfNew'","doc":"This is a restatement of `mem_of_mem_insertIfNew` that is written to exactly match the proof obligation\nin the statement of `get_insertIfNew`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_of_mem_insertIfNew'\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_of_mem_insertIfNew'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a>((<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>) → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L898-L903","name":"Std.DHashMap.Raw.contains_of_contains_insertIfNew'","line":898,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_of_contains_insertIfNew'","doc":"This is a restatement of `contains_of_contains_insertIfNew` that is written to exactly match the proof\nobligation in the statement of `get_insertIfNew`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_of_contains_insertIfNew'\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_of_contains_insertIfNew'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a>((<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L894-L896","name":"Std.DHashMap.Raw.mem_of_mem_insertIfNew","line":894,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_of_mem_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_of_mem_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_of_mem_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span> → <span class=\"fn\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L890-L892","name":"Std.DHashMap.Raw.contains_of_contains_insertIfNew","line":890,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_of_contains_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_of_contains_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_of_contains_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L886-L888","name":"Std.DHashMap.Raw.mem_insertIfNew_self","line":886,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_insertIfNew_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_insertIfNew_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_insertIfNew_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L882-L884","name":"Std.DHashMap.Raw.contains_insertIfNew_self","line":882,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_insertIfNew_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_insertIfNew_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_insertIfNew_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L877-L880","name":"Std.DHashMap.Raw.mem_insertIfNew","line":877,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L872-L875","name":"Std.DHashMap.Raw.contains_insertIfNew","line":872,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L867-L870","name":"Std.DHashMap.Raw.isEmpty_insertIfNew","line":867,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L862-L865","name":"Std.DHashMap.Raw.getKey!_eq_getKeyD_default","line":862,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_eq_getKeyD_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_eq_getKeyD_default\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_eq_getKeyD_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L858-L860","name":"Std.DHashMap.Raw.getKey_eq_getKeyD","line":858,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_eq_getKeyD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_eq_getKeyD\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_eq_getKeyD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h✝</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L854-L856","name":"Std.DHashMap.Raw.getKeyD_eq_getD_getKey?","line":854,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_eq_getD_getKey?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_eq_getD_getKey?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_eq_getD_getKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L850-L852","name":"Std.DHashMap.Raw.getKey?_eq_some_getKeyD","line":850,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_some_getKeyD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_some_getKeyD\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_eq_some_getKeyD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L845-L848","name":"Std.DHashMap.Raw.getKey?_eq_some_getKeyD_of_contains","line":845,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_some_getKeyD_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_some_getKeyD_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_eq_some_getKeyD_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L840-L843","name":"Std.DHashMap.Raw.getKeyD_erase_self","line":840,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L836-L838","name":"Std.DHashMap.Raw.getKeyD_erase","line":836,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">fallback</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L832-L834","name":"Std.DHashMap.Raw.getKeyD_eq_fallback","line":832,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_eq_fallback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_eq_fallback\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_eq_fallback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L827-L830","name":"Std.DHashMap.Raw.getKeyD_eq_fallback_of_contains_eq_false","line":827,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_eq_fallback_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_eq_fallback_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_eq_fallback_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L822-L825","name":"Std.DHashMap.Raw.getKeyD_insert_self","line":822,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L817-L820","name":"Std.DHashMap.Raw.getKeyD_insert","line":817,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L813-L815","name":"Std.DHashMap.Raw.getKeyD_of_isEmpty","line":813,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L808-L811","name":"Std.DHashMap.Raw.getKeyD_emptyc","line":808,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L803-L806","name":"Std.DHashMap.Raw.getKeyD_empty","line":803,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKeyD_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\">getKeyD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L799-L801","name":"Std.DHashMap.Raw.getKey_eq_getKey!","line":799,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_eq_getKey!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_eq_getKey!\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_eq_getKey!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h✝</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L795-L797","name":"Std.DHashMap.Raw.getKey!_eq_get!_getKey?","line":795,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_eq_get!_getKey?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_eq_get!_getKey?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_eq_get!_getKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L791-L793","name":"Std.DHashMap.Raw.getKey?_eq_some_getKey!","line":791,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_some_getKey!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_some_getKey!\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_eq_some_getKey!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L786-L789","name":"Std.DHashMap.Raw.getKey?_eq_some_getKey!_of_contains","line":786,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_some_getKey!_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_some_getKey!_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_eq_some_getKey!_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L781-L784","name":"Std.DHashMap.Raw.getKey!_erase_self","line":781,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L777-L779","name":"Std.DHashMap.Raw.getKey!_erase","line":777,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L773-L775","name":"Std.DHashMap.Raw.getKey!_eq_default","line":773,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_eq_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_eq_default\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_eq_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L768-L771","name":"Std.DHashMap.Raw.getKey!_eq_default_of_contains_eq_false","line":768,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_eq_default_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_eq_default_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_eq_default_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L762-L766","name":"Std.DHashMap.Raw.getKey!_insert_self","line":762,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L758-L760","name":"Std.DHashMap.Raw.getKey!_insert","line":758,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L754-L756","name":"Std.DHashMap.Raw.getKey!_of_isEmpty","line":754,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L749-L752","name":"Std.DHashMap.Raw.getKey!_emptyc","line":749,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L744-L747","name":"Std.DHashMap.Raw.getKey!_empty","line":744,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey!_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\">getKey!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L740-L742","name":"Std.DHashMap.Raw.getKey?_eq_some_getKey","line":740,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_some_getKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_some_getKey\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_eq_some_getKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h✝</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L735-L738","name":"Std.DHashMap.Raw.getKey_erase","line":735,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L730-L733","name":"Std.DHashMap.Raw.getKey_insert_self","line":730,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L722-L728","name":"Std.DHashMap.Raw.getKey_insert","line":722,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h₂ : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\">k</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\">getKey</a></span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L717-L720","name":"Std.DHashMap.Raw.getKey?_erase_self","line":717,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L713-L715","name":"Std.DHashMap.Raw.getKey?_erase","line":713,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L709-L711","name":"Std.DHashMap.Raw.getKey?_eq_none","line":709,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_none\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_eq_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L705-L707","name":"Std.DHashMap.Raw.getKey?_eq_none_of_contains_eq_false","line":705,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_none_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_eq_none_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_eq_none_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L701-L703","name":"Std.DHashMap.Raw.contains_eq_isSome_getKey?","line":701,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_eq_isSome_getKey?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_eq_isSome_getKey?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_eq_isSome_getKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L696-L699","name":"Std.DHashMap.Raw.getKey?_insert_self","line":696,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L692-L694","name":"Std.DHashMap.Raw.getKey?_insert","line":692,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L688-L690","name":"Std.DHashMap.Raw.getKey?_of_isEmpty","line":688,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L684-L686","name":"Std.DHashMap.Raw.getKey?_emptyc","line":684,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L679-L682","name":"Std.DHashMap.Raw.getKey?_empty","line":679,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getKey?_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\">getKey?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L673-L675","name":"Std.DHashMap.Raw.Const.getD_congr","line":673,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_congr\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">b</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L669-L671","name":"Std.DHashMap.Raw.Const.getD_eq_getD","line":669,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_eq_getD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_eq_getD\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_eq_getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L665-L667","name":"Std.DHashMap.Raw.Const.get!_eq_getD_default","line":665,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_eq_getD_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_eq_getD_default\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_eq_getD_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L661-L663","name":"Std.DHashMap.Raw.Const.get_eq_getD","line":661,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_eq_getD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_eq_getD\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_eq_getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h✝</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L657-L659","name":"Std.DHashMap.Raw.Const.getD_eq_getD_get?","line":657,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_eq_getD_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_eq_getD_get?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_eq_getD_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L653-L655","name":"Std.DHashMap.Raw.Const.get?_eq_some_getD","line":653,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_getD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_getD\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_eq_some_getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L649-L651","name":"Std.DHashMap.Raw.Const.get?_eq_some_getD_of_contains","line":649,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_getD_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_getD_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_eq_some_getD_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L644-L647","name":"Std.DHashMap.Raw.Const.getD_erase_self","line":644,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L640-L642","name":"Std.DHashMap.Raw.Const.getD_erase","line":640,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">fallback</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L636-L638","name":"Std.DHashMap.Raw.Const.getD_eq_fallback","line":636,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_eq_fallback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_eq_fallback\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_eq_fallback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L632-L634","name":"Std.DHashMap.Raw.Const.getD_eq_fallback_of_contains_eq_false","line":632,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_eq_fallback_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_eq_fallback_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_eq_fallback_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L627-L630","name":"Std.DHashMap.Raw.Const.getD_insert_self","line":627,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback </span><span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L623-L625","name":"Std.DHashMap.Raw.Const.getD_insert","line":623,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback </span><span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L619-L621","name":"Std.DHashMap.Raw.Const.getD_of_isEmpty","line":619,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L615-L617","name":"Std.DHashMap.Raw.Const.getD_emptyc","line":615,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L610-L613","name":"Std.DHashMap.Raw.Const.getD_empty","line":610,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.getD_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\">getD</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L602-L604","name":"Std.DHashMap.Raw.get!_eq_getD_default","line":602,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_eq_getD_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_eq_getD_default\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_getD_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L598-L600","name":"Std.DHashMap.Raw.get_eq_getD","line":598,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_eq_getD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_eq_getD\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_eq_getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h✝</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L594-L596","name":"Std.DHashMap.Raw.getD_eq_getD_get?","line":594,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_eq_getD_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_eq_getD_get?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_eq_getD_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L590-L592","name":"Std.DHashMap.Raw.get?_eq_some_getD","line":590,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_some_getD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_some_getD\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L586-L588","name":"Std.DHashMap.Raw.get?_eq_some_getD_of_contains","line":586,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_some_getD_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_some_getD_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_getD_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L581-L584","name":"Std.DHashMap.Raw.getD_erase_self","line":581,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L577-L579","name":"Std.DHashMap.Raw.getD_erase","line":577,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">fallback</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L573-L575","name":"Std.DHashMap.Raw.getD_eq_fallback","line":573,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_eq_fallback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_eq_fallback\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_eq_fallback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L569-L571","name":"Std.DHashMap.Raw.getD_eq_fallback_of_contains_eq_false","line":569,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_eq_fallback_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_eq_fallback_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_eq_fallback_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L564-L567","name":"Std.DHashMap.Raw.getD_insert_self","line":564,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback </span><span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L559-L562","name":"Std.DHashMap.Raw.getD_insert","line":559,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L555-L557","name":"Std.DHashMap.Raw.getD_of_isEmpty","line":555,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L550-L553","name":"Std.DHashMap.Raw.getD_emptyc","line":550,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L545-L548","name":"Std.DHashMap.Raw.getD_empty","line":545,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.getD_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\">getD</a></span> <span class=\"fn\">a</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fallback</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L539-L541","name":"Std.DHashMap.Raw.Const.get!_congr","line":539,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_congr\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L535-L537","name":"Std.DHashMap.Raw.Const.get!_eq_get!","line":535,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_eq_get!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_eq_get!\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_eq_get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L531-L533","name":"Std.DHashMap.Raw.Const.get_eq_get!","line":531,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_eq_get!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_eq_get!\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_eq_get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h✝</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L527-L529","name":"Std.DHashMap.Raw.Const.get!_eq_get!_get?","line":527,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_eq_get!_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_eq_get!_get?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_eq_get!_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L523-L525","name":"Std.DHashMap.Raw.Const.get?_eq_some_get!","line":523,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_get!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_get!\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_eq_some_get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L519-L521","name":"Std.DHashMap.Raw.Const.get?_eq_some_get!_of_contains","line":519,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_get!_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_get!_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_eq_some_get!_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L514-L517","name":"Std.DHashMap.Raw.Const.get!_erase_self","line":514,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L510-L512","name":"Std.DHashMap.Raw.Const.get!_erase","line":510,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L506-L508","name":"Std.DHashMap.Raw.Const.get!_eq_default","line":506,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_eq_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_eq_default\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_eq_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L501-L504","name":"Std.DHashMap.Raw.Const.get!_eq_default_of_contains_eq_false","line":501,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_eq_default_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_eq_default_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_eq_default_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L496-L499","name":"Std.DHashMap.Raw.Const.get!_insert_self","line":496,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L492-L494","name":"Std.DHashMap.Raw.Const.get!_insert","line":492,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L488-L490","name":"Std.DHashMap.Raw.Const.get!_of_isEmpty","line":488,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L484-L486","name":"Std.DHashMap.Raw.Const.get!_emptyc","line":484,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L480-L482","name":"Std.DHashMap.Raw.Const.get!_empty","line":480,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get!_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\">get!</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L472-L474","name":"Std.DHashMap.Raw.get_eq_get!","line":472,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_eq_get!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_eq_get!\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_eq_get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h✝</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L468-L470","name":"Std.DHashMap.Raw.get!_eq_get!_get?","line":468,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_eq_get!_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_eq_get!_get?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_get!_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/BasicAux.html#Option.get!\">get!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L464-L466","name":"Std.DHashMap.Raw.get?_eq_some_get!","line":464,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_some_get!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_some_get!\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L460-L462","name":"Std.DHashMap.Raw.get?_eq_some_get!_of_contains","line":460,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_some_get!_of_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_some_get!_of_contains\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_get!_of_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L455-L458","name":"Std.DHashMap.Raw.get!_erase_self","line":455,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L451-L453","name":"Std.DHashMap.Raw.get!_erase","line":451,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L447-L449","name":"Std.DHashMap.Raw.get!_eq_default","line":447,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_eq_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_eq_default\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L443-L445","name":"Std.DHashMap.Raw.get!_eq_default_of_contains_eq_false","line":443,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_eq_default_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_eq_default_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_default_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L438-L441","name":"Std.DHashMap.Raw.get!_insert_self","line":438,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L434-L436","name":"Std.DHashMap.Raw.get!_insert","line":434,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L430-L432","name":"Std.DHashMap.Raw.get!_of_isEmpty","line":430,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L425-L428","name":"Std.DHashMap.Raw.get!_emptyc","line":425,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L420-L423","name":"Std.DHashMap.Raw.get!_empty","line":420,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get!_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\">get!</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L414-L416","name":"Std.DHashMap.Raw.Const.get_congr","line":414,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_congr\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">b</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L411-L412","name":"Std.DHashMap.Raw.Const.get_eq_get","line":411,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_eq_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_eq_get\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_eq_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h✝</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L407-L409","name":"Std.DHashMap.Raw.Const.get?_eq_some_get","line":407,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_some_get\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_eq_some_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h✝</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L402-L405","name":"Std.DHashMap.Raw.Const.get_erase","line":402,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L397-L400","name":"Std.DHashMap.Raw.Const.get_insert_self","line":397,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L392-L395","name":"Std.DHashMap.Raw.Const.get_insert","line":392,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h₂ : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\">v</span> else <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\">get</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L385-L386","name":"Std.DHashMap.Raw.get?_eq_some_get","line":385,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_some_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_some_get\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_some_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h✝</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L380-L383","name":"Std.DHashMap.Raw.get_erase","line":380,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L375-L378","name":"Std.DHashMap.Raw.get_insert_self","line":375,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L367-L373","name":"Std.DHashMap.Raw.get_insert","line":367,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h₂ : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\">get</a></span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L361-L363","name":"Std.DHashMap.Raw.Const.get?_congr","line":361,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_congr\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L358-L359","name":"Std.DHashMap.Raw.Const.get?_eq_get?","line":358,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_get?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_eq_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L353-L356","name":"Std.DHashMap.Raw.Const.get?_erase_self","line":353,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L349-L351","name":"Std.DHashMap.Raw.Const.get?_erase","line":349,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L345-L347","name":"Std.DHashMap.Raw.Const.get?_eq_none","line":345,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_none\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_eq_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L341-L343","name":"Std.DHashMap.Raw.Const.get?_eq_none_of_contains_eq_false","line":341,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_none_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_eq_none_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_eq_none_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L337-L339","name":"Std.DHashMap.Raw.Const.contains_eq_isSome_get?","line":337,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_eq_isSome_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.contains_eq_isSome_get?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">contains_eq_isSome_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L332-L335","name":"Std.DHashMap.Raw.Const.get?_insert_self","line":332,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L328-L330","name":"Std.DHashMap.Raw.Const.get?_insert","line":328,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L324-L326","name":"Std.DHashMap.Raw.Const.get?_of_isEmpty","line":324,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L320-L322","name":"Std.DHashMap.Raw.Const.get?_emptyc","line":320,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L316-L318","name":"Std.DHashMap.Raw.Const.get?_empty","line":316,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.Const.get?_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\">get?</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L308-L310","name":"Std.DHashMap.Raw.get?_erase_self","line":308,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_erase_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_erase_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_erase_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L304-L306","name":"Std.DHashMap.Raw.get?_erase","line":304,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L301-L302","name":"Std.DHashMap.Raw.get?_eq_none","line":301,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_none\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_none</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L297-L299","name":"Std.DHashMap.Raw.get?_eq_none_of_contains_eq_false","line":297,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_none_of_contains_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_eq_none_of_contains_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_eq_none_of_contains_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L293-L295","name":"Std.DHashMap.Raw.contains_eq_isSome_get?","line":293,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_eq_isSome_get?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_eq_isSome_get?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_eq_isSome_get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L288-L291","name":"Std.DHashMap.Raw.get?_insert_self","line":288,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L284-L286","name":"Std.DHashMap.Raw.get?_insert","line":284,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> then <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">v</span>)</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L281-L282","name":"Std.DHashMap.Raw.get?_of_isEmpty","line":281,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L277-L279","name":"Std.DHashMap.Raw.get?_emptyc","line":277,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L273-L275","name":"Std.DHashMap.Raw.get?_empty","line":273,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.get?_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\">get?</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L268-L271","name":"Std.DHashMap.Raw.containsThenInsertIfNew_snd","line":268,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.containsThenInsertIfNew_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.containsThenInsertIfNew_snd\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">containsThenInsertIfNew_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.containsThenInsertIfNew\">containsThenInsertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L263-L266","name":"Std.DHashMap.Raw.containsThenInsertIfNew_fst","line":263,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.containsThenInsertIfNew_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.containsThenInsertIfNew_fst\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">containsThenInsertIfNew_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.containsThenInsertIfNew\">containsThenInsertIfNew</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L258-L261","name":"Std.DHashMap.Raw.containsThenInsert_snd","line":258,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.containsThenInsert_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.containsThenInsert_snd\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">containsThenInsert_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.containsThenInsert\">containsThenInsert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L253-L256","name":"Std.DHashMap.Raw.containsThenInsert_fst","line":253,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.containsThenInsert_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.containsThenInsert_fst\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">containsThenInsert_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.containsThenInsert\">containsThenInsert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L249-L251","name":"Std.DHashMap.Raw.size_le_size_erase","line":249,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_le_size_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_le_size_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_le_size_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L245-L247","name":"Std.DHashMap.Raw.size_erase_le","line":245,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_erase_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_erase_le\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_erase_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L240-L243","name":"Std.DHashMap.Raw.size_erase","line":240,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L236-L238","name":"Std.DHashMap.Raw.mem_of_mem_erase","line":236,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_of_mem_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_of_mem_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_of_mem_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L232-L234","name":"Std.DHashMap.Raw.contains_of_contains_erase","line":232,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_of_contains_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_of_contains_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_of_contains_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L227-L230","name":"Std.DHashMap.Raw.mem_erase","line":227,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L222-L225","name":"Std.DHashMap.Raw.contains_erase","line":222,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L217-L220","name":"Std.DHashMap.Raw.isEmpty_erase","line":217,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L213-L215","name":"Std.DHashMap.Raw.erase_emptyc","line":213,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.erase_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.erase_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">erase_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L208-L211","name":"Std.DHashMap.Raw.erase_empty","line":208,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.erase_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.erase_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">erase_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L204-L206","name":"Std.DHashMap.Raw.size_insert_le","line":204,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insert_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insert_le\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_insert_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L200-L202","name":"Std.DHashMap.Raw.size_le_size_insert","line":200,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_le_size_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_le_size_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_le_size_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L195-L198","name":"Std.DHashMap.Raw.size_insert","line":195,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L190-L193","name":"Std.DHashMap.Raw.mem_insert_self","line":190,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L185-L188","name":"Std.DHashMap.Raw.contains_insert_self","line":185,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_insert_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_insert_self\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_insert_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L181-L183","name":"Std.DHashMap.Raw.mem_of_mem_insert","line":181,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_of_mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_of_mem_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_of_mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span> → <span class=\"fn\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L177-L179","name":"Std.DHashMap.Raw.contains_of_contains_insert","line":177,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_of_contains_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_of_contains_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_of_contains_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L172-L175","name":"Std.DHashMap.Raw.mem_insert","line":172,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L167-L170","name":"Std.DHashMap.Raw.contains_insert","line":167,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L163-L165","name":"Std.DHashMap.Raw.singleton_eq_insert","line":163,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.singleton_eq_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.singleton_eq_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">singleton_eq_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">p</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L161-L161","name":"Std.DHashMap.Raw.insert_eq_insert","line":161,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.insert_eq_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.insert_eq_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insert_eq_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">Insert.insert</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L157-L159","name":"Std.DHashMap.Raw.isEmpty_iff_forall_not_mem","line":157,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_iff_forall_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_iff_forall_not_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_iff_forall_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L153-L155","name":"Std.DHashMap.Raw.isEmpty_iff_forall_contains","line":153,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_iff_forall_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_iff_forall_contains\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_iff_forall_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L149-L151","name":"Std.DHashMap.Raw.isEmpty_eq_false_iff_exists_mem","line":149,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_eq_false_iff_exists_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_eq_false_iff_exists_mem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_eq_false_iff_exists_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L145-L147","name":"Std.DHashMap.Raw.isEmpty_eq_false_iff_exists_contains_eq_true","line":145,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_eq_false_iff_exists_contains_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_eq_false_iff_exists_contains_eq_true\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_eq_false_iff_exists_contains_eq_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L141-L143","name":"Std.DHashMap.Raw.not_mem_of_isEmpty","line":141,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.not_mem_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.not_mem_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">not_mem_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L137-L139","name":"Std.DHashMap.Raw.contains_of_isEmpty","line":137,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_of_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L134-L135","name":"Std.DHashMap.Raw.not_mem_emptyc","line":134,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.not_mem_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.not_mem_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">not_mem_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L131-L132","name":"Std.DHashMap.Raw.contains_emptyc","line":131,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L128-L129","name":"Std.DHashMap.Raw.not_mem_empty","line":128,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.not_mem_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.not_mem_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">not_mem_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L125-L126","name":"Std.DHashMap.Raw.contains_empty","line":125,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L121-L123","name":"Std.DHashMap.Raw.mem_congr","line":121,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_congr\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L117-L119","name":"Std.DHashMap.Raw.contains_congr","line":117,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.contains_congr\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L114-L115","name":"Std.DHashMap.Raw.mem_iff_contains","line":114,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_iff_contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.mem_iff_contains\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mem_iff_contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\">contains</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L109-L112","name":"Std.DHashMap.Raw.isEmpty_insert","line":109,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L105-L107","name":"Std.DHashMap.Raw.isEmpty_emptyc","line":105,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L101-L103","name":"Std.DHashMap.Raw.isEmpty_empty","line":101,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L96-L97","name":"Std.DHashMap.Raw.isEmpty_eq_size_eq_zero","line":96,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_eq_size_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.isEmpty_eq_size_eq_zero\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty_eq_size_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">0</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L92-L94","name":"Std.DHashMap.Raw.size_emptyc","line":92,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L88-L90","name":"Std.DHashMap.Raw.size_empty","line":88,"kind":"theorem","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Raw.size_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">size_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\">empty</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Data/DHashMap/RawLemmas.lean#L68-L69","name":"Std.DHashMap.Internal.Raw.tacticSimp_to_rawUsing_","line":68,"kind":"def","docLink":"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Internal.Raw.tacticSimp_to_rawUsing_","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/RawLemmas.html#Std.DHashMap.Internal.Raw.tacticSimp_to_rawUsing_\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Raw</span>.<span class=\"name\">tacticSimp_to_rawUsing_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}