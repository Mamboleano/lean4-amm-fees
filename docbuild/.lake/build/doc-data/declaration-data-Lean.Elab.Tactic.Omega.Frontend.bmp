{"name":"Lean.Elab.Tactic.Omega.Frontend","instances":[{"typeNames":["Lean.Elab.Tactic.Omega.MetaProblem"],"name":"Lean.Elab.Tactic.Omega.MetaProblem.instInhabited","className":"Inhabited"}],"imports":["Lean.Elab.Tactic.Omega.Core","Lean.Elab.Tactic.FalseOrByContra","Lean.Elab.Tactic.Config"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L696-L699","name":"Lean.Elab.Tactic.Omega.bvOmegaSimpExtension","line":696,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.bvOmegaSimpExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.bvOmegaSimpExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">bvOmegaSimpExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Meta.SimpExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L692-L694","name":"Lean.Elab.Tactic.Omega.bitvec_to_nat","line":692,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.bitvec_to_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.bitvec_to_nat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">bitvec_to_nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Meta.SimpExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L685-L690","name":"Lean.Elab.Tactic.Omega.evalOmega","line":685,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.evalOmega","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.evalOmega\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">evalOmega</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L680-L683","name":"Lean.Elab.Tactic.Omega.omegaDefault","line":680,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaDefault","doc":"The `omega` tactic, for resolving integer and natural linear arithmetic problems. This\n`TacticM Unit` frontend with default configuration can be used as an Aesop rule, for example via\nthe tactic call `aesop (add 50% tactic Lean.Elab.Tactic.Omega.omegaDefault)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omegaDefault</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L671-L678","name":"Lean.Elab.Tactic.Omega.omegaTactic","line":671,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaTactic","doc":"The `omega` tactic, for resolving integer and natural linear arithmetic problems. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omegaTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L660-L667","name":"Lean.Elab.Tactic.Omega.omega","line":660,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omega","doc":"Given a collection of facts, try prove `False` using the omega algorithm,\nand close the goal using that.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omega\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omega</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Meta.Omega.OmegaConfig</a> :=\n  <span class=\"fn\">{ <span class=\"fn\">splitDisjunctions</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">splitNatSub</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">splitNatAbs</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">splitMinMax</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L641-L656","name":"Lean.Elab.Tactic.Omega.omegaImpl","line":641,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaImpl","doc":"Implementation of the `omega` algorithm, and handling disjunctions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omegaImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L609-L639","name":"Lean.Elab.Tactic.Omega.splitDisjunction","line":609,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.splitDisjunction","doc":"Split a disjunction in a `MetaProblem`, and if we find a new usable fact\ncall `omegaImpl` in both branches.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.splitDisjunction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">splitDisjunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L601-L605","name":"Lean.Elab.Tactic.Omega.formatErrorMessage.prettyAtoms","line":601,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.prettyAtoms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.prettyAtoms\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">formatErrorMessage</span>.<span class=\"name\">prettyAtoms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">names</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atoms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mask</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L595-L599","name":"Lean.Elab.Tactic.Omega.formatErrorMessage.mentioned","line":595,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.mentioned","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.mentioned\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">formatErrorMessage</span>.<span class=\"name\">mentioned</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atoms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constraints</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L587-L593","name":"Lean.Elab.Tactic.Omega.formatErrorMessage.prettyCoeffs","line":587,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.prettyCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.prettyCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">formatErrorMessage</span>.<span class=\"name\">prettyCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">names</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeffs</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L579-L585","name":"Lean.Elab.Tactic.Omega.formatErrorMessage.prettyConstraint","line":579,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.prettyConstraint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.prettyConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">formatErrorMessage</span>.<span class=\"name\">prettyConstraint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L571-L577","name":"Lean.Elab.Tactic.Omega.formatErrorMessage.prettyConstraints","line":571,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.prettyConstraints","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.prettyConstraints\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">formatErrorMessage</span>.<span class=\"name\">prettyConstraints</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">names</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constraints</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L557-L567","name":"Lean.Elab.Tactic.Omega.formatErrorMessage.varNames","line":557,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.varNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.varNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">formatErrorMessage</span>.<span class=\"name\">varNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mask</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L548-L553","name":"Lean.Elab.Tactic.Omega.formatErrorMessage.inScope","line":548,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.inScope","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.inScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">formatErrorMessage</span>.<span class=\"name\">inScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L543-L546","name":"Lean.Elab.Tactic.Omega.formatErrorMessage.varNameOf","line":543,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.varNameOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage.varNameOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">formatErrorMessage</span>.<span class=\"name\">varNameOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L523-L605","name":"Lean.Elab.Tactic.Omega.formatErrorMessage","line":523,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage","doc":"Helpful error message when omega cannot find a solution\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">formatErrorMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L503-L519","name":"Lean.Elab.Tactic.Omega.MetaProblem.processFacts","line":503,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processFacts","doc":"Process all the facts in a `MetaProblem`, returning the new problem, and the number of new facts.\n\nThis is partial because new facts may be generated along the way.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">processFacts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L415-L501","name":"Lean.Elab.Tactic.Omega.MetaProblem.addFact","line":415,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addFact","doc":"Parse an `Expr` and extract facts, also returning the number of new facts found.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">addFact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L364-L413","name":"Lean.Elab.Tactic.Omega.MetaProblem.pushNot","line":364,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.pushNot","doc":"Given a fact `h` with type `¬ P`, return a more useful fact obtained by pushing the negation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.pushNot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">pushNot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h </span><span class=\"fn\">P</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L348-L362","name":"Lean.Elab.Tactic.Omega.MetaProblem.addIntInequality","line":348,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntInequality","doc":"Add an integer inequality to the `Problem`.\n\nWe solve equalities as they are discovered, as this often results in an earlier contradiction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntInequality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">addIntInequality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h </span><span class=\"fn\">y</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L332-L346","name":"Lean.Elab.Tactic.Omega.MetaProblem.addIntEquality","line":332,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntEquality","doc":"Add an integer equality to the `Problem`.\n\nWe solve equalities as they are discovered, as this often results in an earlier contradiction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntEquality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">addIntEquality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h </span><span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L330-L330","name":"Lean.Elab.Tactic.Omega.MetaProblem.instInhabited","line":330,"kind":"instance","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L326-L328","name":"Lean.Elab.Tactic.Omega.MetaProblem.trivial","line":326,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.trivial","doc":"The trivial `MetaProblem`, with no facts to process and a trivial `Problem`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.trivial\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">trivial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L293-L321","name":"Lean.Elab.Tactic.Omega.asLinearComboImpl.handleFinVal","line":293,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.handleFinVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.handleFinVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearComboImpl</span>.<span class=\"name\">handleFinVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">i </span><span class=\"fn\">n </span><span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L246-L292","name":"Lean.Elab.Tactic.Omega.asLinearComboImpl.handleNatCast","line":246,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.handleNatCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.handleNatCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearComboImpl</span>.<span class=\"name\">handleNatCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">i </span><span class=\"fn\">n</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L238-L245","name":"Lean.Elab.Tactic.Omega.asLinearComboImpl.rewrite","line":238,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.rewrite","doc":"Apply a rewrite rule to an expression, and interpret the result as a `LinearCombo`.\n(We're not rewriting any subexpressions here, just the top level, for efficiency.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl.rewrite\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearComboImpl</span>.<span class=\"name\">rewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rw</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L107-L321","name":"Lean.Elab.Tactic.Omega.asLinearComboImpl","line":107,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl","doc":"Translates an expression into a `LinearCombo`.\nAlso returns:\n* a proof that this linear combo evaluated at the atoms is equal to the original expression\n* a list of new facts which should be recorded:\n  * for each new atom `a` of the form `((x : Nat) : Int)`, the fact that `0 ≤ a`\n  * for each new atom `a` of the form `x / k`, for `k` a positive numeral, the facts that\n    `k * a ≤ x < (k + 1) * a`\n  * for each new atom of the form `((a - b : Nat) : Int)`, the fact:\n    `b ≤ a ∧ ((a - b : Nat) : Int) = a - b ∨ a < b ∧ ((a - b : Nat) : Int) = 0`\n\nWe also transform the expression as we descend into it:\n* pushing coercions: `↑(x + y)`, `↑(x * y)`, `↑(x / k)`, `↑(x % k)`, `↑k`\n* unfolding `emod`: `x % k` → `x - x / k`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearComboImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L88-L105","name":"Lean.Elab.Tactic.Omega.asLinearCombo","line":88,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearCombo","doc":"Wrapper for `asLinearComboImpl`,\nusing a cache for previously visited expressions.\n\nGives a small (10%) speedup in testing.\nI tried using a pointer based cache,\nbut there was never enough subexpression sharing to make it effective.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearCombo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearCombo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L81-L84","name":"Lean.Elab.Tactic.Omega.mkAtomLinearCombo","line":81,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkAtomLinearCombo","doc":"Construct the linear combination (and its associated proof and new facts) for an atom. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkAtomLinearCombo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkAtomLinearCombo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L66-L79","name":"Lean.Elab.Tactic.Omega.mkCoordinateEvalAtomsEq","line":66,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkCoordinateEvalAtomsEq","doc":"If `e : Expr` is the `n`-th atom, construct the proof that\n`e = (coordinate n).eval atoms`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkCoordinateEvalAtomsEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkCoordinateEvalAtomsEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L62-L64","name":"Lean.Elab.Tactic.Omega.mkEvalRflProof","line":62,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkEvalRflProof","doc":"Construct the `rfl` proof that `lc.eval atoms = e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkEvalRflProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkEvalRflProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L60-L60","name":"Lean.Elab.Tactic.Omega.MetaProblem.processedFacts","line":60,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processedFacts","doc":"Facts which have already been processed; we keep these to avoid duplicates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processedFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">processedFacts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L58-L58","name":"Lean.Elab.Tactic.Omega.MetaProblem.disjunctions","line":58,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.disjunctions","doc":"Pending disjunctions, which we will case split one at a time if we can't get a contradiction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.disjunctions\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">disjunctions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L54-L54","name":"Lean.Elab.Tactic.Omega.MetaProblem.facts","line":54,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.facts","doc":"Pending facts which have not been processed yet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.facts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">facts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L52-L52","name":"Lean.Elab.Tactic.Omega.MetaProblem.problem","line":52,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.problem","doc":"An integer linear arithmetic problem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.problem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">problem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L50-L50","name":"Lean.Elab.Tactic.Omega.MetaProblem.mk","line":50,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">problem</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facts </span><span class=\"fn\">disjunctions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">processedFacts</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L34-L60","name":"Lean.Elab.Tactic.Omega.MetaProblem","line":34,"kind":"structure","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem","doc":"A partially processed `omega` context.\n\nWe have:\n* a `Problem` representing the integer linear constraints extracted so far, and their proofs\n* the unprocessed `facts : List Expr` taken from the local context,\n* the unprocessed `disjunctions : List Expr`,\n  which will only be split one at a time if we can't otherwise find a contradiction.\n\nWe begin with `facts := ← getLocalHyps` and `problem := .trivial`,\nand progressively process the facts.\n\nAs we process the facts, we may generate additional facts\n(e.g. about coercions and integer divisions).\nTo avoid duplicates, we maintain a `HashSet` of previously processed facts.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L26-L32","name":"Lean.Elab.Tactic.Omega.succ?","line":26,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.succ?","doc":"Match on the two defeq expressions for successor: `n+1`, `n.succ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.succ?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">succ?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Omega/Frontend.lean#L21-L24","name":"Lean.Elab.Tactic.Omega.elabOmegaConfig","line":21,"kind":"def","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.elabOmegaConfig","doc":"Allow elaboration of `OmegaConfig` arguments to tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.elabOmegaConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">elabOmegaConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Meta.html#Lean.Meta.Omega.OmegaConfig\">Meta.Omega.OmegaConfig</a></span></span></div></div>"}]}