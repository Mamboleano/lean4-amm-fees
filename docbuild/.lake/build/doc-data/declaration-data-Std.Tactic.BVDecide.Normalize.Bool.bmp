{"name":"Std.Tactic.BVDecide.Normalize.Bool","instances":[],"imports":["Init.SimpLemmas","Init.Data.Bool","Init.Data.BitVec.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L206-L208","name":"Std.Tactic.BVDecide.Normalize.Bool.and_right","line":206,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">and_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">rhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L202-L204","name":"Std.Tactic.BVDecide.Normalize.Bool.and_left","line":202,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">and_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L197-L200","name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite''","line":197,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_else_not_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L192-L195","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite''","line":192,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_not_ite''</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L187-L190","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite''","line":187,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L182-L185","name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite''","line":182,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_then_not_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L177-L180","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite''","line":177,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_not_ite''</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L172-L175","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite''","line":172,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite''","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L167-L170","name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite'","line":167,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_else_not_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L162-L165","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite'","line":162,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_not_ite'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L157-L160","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite'","line":157,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L152-L155","name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite'","line":152,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_then_not_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L147-L150","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite'","line":147,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_not_ite'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L142-L145","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite'","line":142,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L137-L140","name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite","line":137,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_else_not_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L132-L135","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite","line":132,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_not_ite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L127-L130","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite","line":127,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L122-L125","name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite","line":122,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_then_not_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L117-L120","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite","line":117,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_not_ite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L112-L115","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite","line":112,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L106-L110","name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else'","line":106,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_else'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L100-L104","name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else","line":100,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_else</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L94-L98","name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then'","line":94,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_then'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L88-L92","name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then","line":88,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">t</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L83-L86","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_else'","line":83,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_else'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L79-L81","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_else","line":79,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_else</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L75-L77","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_then'","line":75,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_then'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L71-L73","name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_then","line":71,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_then</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">t</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L67-L69","name":"Std.Tactic.BVDecide.Normalize.Bool.not_zero_beq","line":67,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_zero_beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_zero_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_zero_beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a>0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L63-L65","name":"Std.Tactic.BVDecide.Normalize.Bool.not_one_beq","line":63,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_one_beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_one_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_one_beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a>1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L59-L61","name":"Std.Tactic.BVDecide.Normalize.Bool.not_beq_zero","line":59,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_zero\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_beq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L55-L57","name":"Std.Tactic.BVDecide.Normalize.Bool.not_beq_one","line":55,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_one\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_beq_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Data/BitVec/BasicAux.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L52-L53","name":"Std.Tactic.BVDecide.Normalize.Bool.not_xor","line":52,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_xor\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> ((<span class=\"fn\">a</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>))</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L48-L50","name":"Std.Tactic.BVDecide.Normalize.if_eq_cond","line":48,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.if_eq_cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.if_eq_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">if_eq_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then <span class=\"fn\">x</span> else <span class=\"fn\">y</span></span></div></div>"}]}