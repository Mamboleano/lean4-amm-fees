{"name":"Init.Data.Int.DivMod.Basic","instances":[{"typeNames":["Int"],"name":"Int.instDiv","className":"Div"},{"typeNames":["Int"],"name":"Int.instMod","className":"Mod"}],"imports":["Init.Data.Int.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L308-L337","name":"Int.bdiv","line":308,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.bdiv","doc":"Balanced division.  This returns the unique integer so that\n`b * (Int.bdiv a b) + Int.bmod a b = a`.\n\nExamples:\n```\n#eval (7 : Int).bmod 0 -- 7\n#eval (0 : Int).bmod 7 -- 0\n\n#eval (12 : Int).bmod 6 -- 0\n#eval (12 : Int).bmod 7 -- -2\n#eval (12 : Int).bmod 8 -- -4\n#eval (12 : Int).bmod 9 -- 3\n\n#eval (-12 : Int).bmod 6 -- 0\n#eval (-12 : Int).bmod 7 -- 2\n#eval (-12 : Int).bmod 8 -- -4\n#eval (-12 : Int).bmod 9 -- -3\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.bdiv\"><span class=\"name\">Int</span>.<span class=\"name\">bdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L277-L306","name":"Int.bmod","line":277,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.bmod","doc":"Balanced modulus.  This version of integer modulus uses the\nbalanced rounding convention, which guarantees that\n`-m/2 ≤ bmod x m < m/2` for `m ≠ 0` and `bmod x m` is congruent\nto `x` modulo `m`.\n\nIf `m = 0`, then `bmod x m = x`.\n\nExamples:\n```\n#eval (7 : Int).bdiv 0 -- 0\n#eval (0 : Int).bdiv 7 -- 0\n\n#eval (12 : Int).bdiv 6 -- 2\n#eval (12 : Int).bdiv 7 -- 2\n#eval (12 : Int).bdiv 8 -- 2\n#eval (12 : Int).bdiv 9 -- 1\n\n#eval (-12 : Int).bdiv 6 -- -2\n#eval (-12 : Int).bdiv 7 -- -2\n#eval (-12 : Int).bdiv 8 -- -1\n#eval (-12 : Int).bdiv 9 -- -1\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\"><span class=\"name\">Int</span>.<span class=\"name\">bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L260-L262","name":"Int.ofNat_fdiv","line":260,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_fdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_fdiv\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_fdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.fdiv\">fdiv</a></span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L231-L258","name":"Int.fmod","line":231,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.fmod","doc":"Integer modulus. This version of integer modulus uses the F-rounding convention\n(flooring division), in which `Int.fdiv x y` satisfies `fdiv x y = floor (x / y)`\nand `Int.fmod` is the unique function satisfying `fmod x y + (fdiv x y) * y = x`.\n\nExamples:\n\n```\n#eval (7 : Int).fmod (0 : Int) -- 7\n#eval (0 : Int).fmod (7 : Int) -- 0\n\n#eval (12 : Int).fmod (6 : Int) -- 0\n#eval (12 : Int).fmod (-6 : Int) -- 0\n#eval (-12 : Int).fmod (6 : Int) -- 0\n#eval (-12 : Int).fmod (-6 : Int) -- 0\n\n#eval (12 : Int).fmod (7 : Int) -- 5\n#eval (12 : Int).fmod (-7 : Int) -- -2\n#eval (-12 : Int).fmod (7 : Int) -- 2\n#eval (-12 : Int).fmod (-7 : Int) -- -5\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.fmod\"><span class=\"name\">Int</span>.<span class=\"name\">fmod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L202-L229","name":"Int.fdiv","line":202,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.fdiv","doc":"Integer division. This version of division uses the F-rounding convention\n(flooring division), in which `Int.fdiv x y` satisfies `fdiv x y = floor (x / y)`\nand `Int.fmod` is the unique function satisfying `fmod x y + (fdiv x y) * y = x`.\n\nExamples:\n```\n#eval (7 : Int).fdiv (0 : Int) -- 0\n#eval (0 : Int).fdiv (7 : Int) -- 0\n\n#eval (12 : Int).fdiv (6 : Int) -- 2\n#eval (12 : Int).fdiv (-6 : Int) -- -2\n#eval (-12 : Int).fdiv (6 : Int) -- -2\n#eval (-12 : Int).fdiv (-6 : Int) -- 2\n\n#eval (12 : Int).fdiv (7 : Int) -- 1\n#eval (12 : Int).fdiv (-7 : Int) -- -2\n#eval (-12 : Int).fdiv (7 : Int) -- -2\n#eval (-12 : Int).fdiv (-7 : Int) -- 1\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.fdiv\"><span class=\"name\">Int</span>.<span class=\"name\">fdiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L196-L196","name":"Int.ofNat_tdiv","line":196,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_tdiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_tdiv\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_tdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L162-L194","name":"Int.tmod","line":162,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.tmod","doc":"Integer modulo. This function uses the\n[*\"T-rounding\"*][t-rounding] (**T**runcation-rounding) convention\nto pair with `Int.tdiv`, meaning that `tmod a b + b * (tdiv a b) = a`\nunconditionally (see [`Int.tmod_add_tdiv`][theo tmod_add_tdiv]). In\nparticular, `a % 0 = a`.\n\n[t-rounding]: https://dl.acm.org/doi/pdf/10.1145/128861.128862\n[theo tmod_add_tdiv]: https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.tmod_add_tdiv#doc\n\nExamples:\n\n```\n#eval (7 : Int).tmod (0 : Int) -- 7\n#eval (0 : Int).tmod (7 : Int) -- 0\n\n#eval (12 : Int).tmod (6 : Int) -- 0\n#eval (12 : Int).tmod (-6 : Int) -- 0\n#eval (-12 : Int).tmod (6 : Int) -- 0\n#eval (-12 : Int).tmod (-6 : Int) -- 0\n\n#eval (12 : Int).tmod (7 : Int) -- 5\n#eval (12 : Int).tmod (-7 : Int) -- 5\n#eval (-12 : Int).tmod (7 : Int) -- -5\n#eval (-12 : Int).tmod (-7 : Int) -- -5\n```\n\nImplemented by efficient native code. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\"><span class=\"name\">Int</span>.<span class=\"name\">tmod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L124-L160","name":"Int.tdiv","line":124,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.tdiv","doc":"`tdiv` uses the [*\"T-rounding\"*][t-rounding]\n(**T**runcation-rounding) convention, meaning that it rounds toward\nzero. Also note that division by zero is defined to equal zero.\n\n  The relation between integer division and modulo is found in\n  `Int.tmod_add_tdiv` which states that\n  `tmod a b + b * (tdiv a b) = a`, unconditionally.\n\n  [t-rounding]: https://dl.acm.org/doi/pdf/10.1145/128861.128862\n  [theo tmod_add_tdiv]: https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Int.tmod_add_tdiv#doc\n\n  Examples:\n\n  ```\n  #eval (7 : Int).tdiv (0 : Int) -- 0\n  #eval (0 : Int).tdiv (7 : Int) -- 0\n\n  #eval (12 : Int).tdiv (6 : Int) -- 2\n  #eval (12 : Int).tdiv (-6 : Int) -- -2\n  #eval (-12 : Int).tdiv (6 : Int) -- -2\n  #eval (-12 : Int).tdiv (-6 : Int) -- 2\n\n  #eval (12 : Int).tdiv (7 : Int) -- 1\n  #eval (12 : Int).tdiv (-7 : Int) -- -1\n  #eval (-12 : Int).tdiv (7 : Int) -- -1\n  #eval (-12 : Int).tdiv (-7 : Int) -- 1\n  ```\n\n  Implemented by efficient native code.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\"><span class=\"name\">Int</span>.<span class=\"name\">tdiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L120-L120","name":"Int.negSucc_emod_negSucc","line":120,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_emod_negSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_emod_negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">negSucc_emod_negSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.subNatNat\">subNatNat</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L119-L119","name":"Int.negSucc_emod_ofNat","line":119,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_emod_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_emod_ofNat\"><span class=\"name\">Int</span>.<span class=\"name\">negSucc_emod_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.subNatNat\">subNatNat</a> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L118-L118","name":"Int.ofNat_ediv_negSucc","line":118,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv_negSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv_negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_ediv_negSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L117-L117","name":"Int.negSucc_ediv_negSucc","line":117,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_ediv_negSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_ediv_negSucc\"><span class=\"name\">Int</span>.<span class=\"name\">negSucc_ediv_negSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L115-L116","name":"Int.negSucc_ediv_ofNat_succ","line":115,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_ediv_ofNat_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.negSucc_ediv_ofNat_succ\"><span class=\"name\">Int</span>.<span class=\"name\">negSucc_ediv_ofNat_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.negSucc\">negSucc</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L114-L114","name":"Int.ofNat_ediv_ofNat","line":114,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv_ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv_ofNat\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_ediv_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L112-L112","name":"Int.ofNat_ediv","line":112,"kind":"theorem","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ofNat_ediv\"><span class=\"name\">Int</span>.<span class=\"name\">ofNat_ediv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L109-L110","name":"Int.instMod","line":109,"kind":"instance","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.instMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.instMod\"><span class=\"name\">Int</span>.<span class=\"name\">instMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L103-L108","name":"Int.instDiv","line":103,"kind":"instance","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.instDiv","doc":"The Div and Mod syntax uses ediv and emod for compatibility with SMTLIb and mathematical\nreasoning tends to be easier.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.instDiv\"><span class=\"name\">Int</span>.<span class=\"name\">instDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L73-L101","name":"Int.emod","line":73,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.emod","doc":"Integer modulus. This version of integer modulus uses the E-rounding convention\n(euclidean division), in which `Int.emod x y` satisfies `0 ≤ emod x y < natAbs y` for `y ≠ 0`\nand `Int.ediv` is the unique function satisfying `emod x y + (ediv x y) * y = x`.\n\nThis is the function powering the `%` notation on integers.\n\nExamples:\n```\n#eval (7 : Int) % (0 : Int) -- 7\n#eval (0 : Int) % (7 : Int) -- 0\n\n#eval (12 : Int) % (6 : Int) -- 0\n#eval (12 : Int) % (-6 : Int) -- 0\n#eval (-12 : Int) % (6 : Int) -- 0\n#eval (-12 : Int) % (-6 : Int) -- 0\n\n#eval (12 : Int) % (7 : Int) -- 5\n#eval (12 : Int) % (-7 : Int) -- 5\n#eval (-12 : Int) % (7 : Int) -- 2\n#eval (-12 : Int) % (-7 : Int) -- 2\n```\n\nImplemented by efficient native code.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.emod\"><span class=\"name\">Int</span>.<span class=\"name\">emod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/Int/DivMod/Basic.lean#L40-L71","name":"Int.ediv","line":40,"kind":"def","docLink":"./Init/Data/Int/DivMod/Basic.html#Int.ediv","doc":"Integer division. This version of integer division uses the E-rounding convention\n(euclidean division), in which `Int.emod x y` satisfies `0 ≤ emod x y < natAbs y` for `y ≠ 0`\nand `Int.ediv` is the unique function satisfying `emod x y + (ediv x y) * y = x`.\n\nThis is the function powering the `/` notation on integers.\n\nExamples:\n```\n#eval (7 : Int) / (0 : Int) -- 0\n#eval (0 : Int) / (7 : Int) -- 0\n\n#eval (12 : Int) / (6 : Int) -- 2\n#eval (12 : Int) / (-6 : Int) -- -2\n#eval (-12 : Int) / (6 : Int) -- -2\n#eval (-12 : Int) / (-6 : Int) -- 2\n\n#eval (12 : Int) / (7 : Int) -- 1\n#eval (12 : Int) / (-7 : Int) -- -1\n#eval (-12 : Int) / (7 : Int) -- -2\n#eval (-12 : Int) / (-7 : Int) -- 2\n```\n\nImplemented by efficient native code.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/DivMod/Basic.html#Int.ediv\"><span class=\"name\">Int</span>.<span class=\"name\">ediv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"}]}