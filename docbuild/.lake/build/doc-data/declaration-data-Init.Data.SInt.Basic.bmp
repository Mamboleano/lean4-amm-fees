{"name":"Init.Data.SInt.Basic","instances":[{"typeNames":["Int8"],"name":"instToStringInt8","className":"ToString"},{"typeNames":["Int8"],"name":"instReprInt8","className":"Repr"},{"typeNames":["Int8"],"name":"instReprAtomInt8","className":"ReprAtom"},{"typeNames":["Int8"],"name":"instHashableInt8","className":"Hashable"},{"typeNames":["Int8"],"name":"Int8.instOfNat","className":"OfNat"},{"typeNames":["Int8"],"name":"Int8.instNeg","className":"Neg"},{"typeNames":["Int8"],"name":"instInhabitedInt8","className":"Inhabited"},{"typeNames":["Int8"],"name":"instAddInt8","className":"Add"},{"typeNames":["Int8"],"name":"instSubInt8","className":"Sub"},{"typeNames":["Int8"],"name":"instMulInt8","className":"Mul"},{"typeNames":["Int8"],"name":"instModInt8","className":"Mod"},{"typeNames":["Int8"],"name":"instDivInt8","className":"Div"},{"typeNames":["Int8"],"name":"instLTInt8","className":"LT"},{"typeNames":["Int8"],"name":"instLEInt8","className":"LE"},{"typeNames":["Int8"],"name":"instComplementInt8","className":"Complement"},{"typeNames":["Int8"],"name":"instAndOpInt8","className":"AndOp"},{"typeNames":["Int8"],"name":"instOrOpInt8","className":"OrOp"},{"typeNames":["Int8"],"name":"instXorInt8","className":"Xor"},{"typeNames":["Int8"],"name":"instShiftLeftInt8","className":"ShiftLeft"},{"typeNames":["Int8"],"name":"instShiftRightInt8","className":"ShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqInt8","className":"Decidable"},{"typeNames":["LT.lt"],"name":"instDecidableLtInt8","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableLeInt8","className":"Decidable"},{"typeNames":["Int8"],"name":"instMaxInt8","className":"Max"},{"typeNames":["Int8"],"name":"instMinInt8","className":"Min"},{"typeNames":["Int16"],"name":"instToStringInt16","className":"ToString"},{"typeNames":["Int16"],"name":"instReprInt16","className":"Repr"},{"typeNames":["Int16"],"name":"instReprAtomInt16","className":"ReprAtom"},{"typeNames":["Int16"],"name":"instHashableInt16","className":"Hashable"},{"typeNames":["Int16"],"name":"Int16.instOfNat","className":"OfNat"},{"typeNames":["Int16"],"name":"Int16.instNeg","className":"Neg"},{"typeNames":["Int16"],"name":"instInhabitedInt16","className":"Inhabited"},{"typeNames":["Int16"],"name":"instAddInt16","className":"Add"},{"typeNames":["Int16"],"name":"instSubInt16","className":"Sub"},{"typeNames":["Int16"],"name":"instMulInt16","className":"Mul"},{"typeNames":["Int16"],"name":"instModInt16","className":"Mod"},{"typeNames":["Int16"],"name":"instDivInt16","className":"Div"},{"typeNames":["Int16"],"name":"instLTInt16","className":"LT"},{"typeNames":["Int16"],"name":"instLEInt16","className":"LE"},{"typeNames":["Int16"],"name":"instComplementInt16","className":"Complement"},{"typeNames":["Int16"],"name":"instAndOpInt16","className":"AndOp"},{"typeNames":["Int16"],"name":"instOrOpInt16","className":"OrOp"},{"typeNames":["Int16"],"name":"instXorInt16","className":"Xor"},{"typeNames":["Int16"],"name":"instShiftLeftInt16","className":"ShiftLeft"},{"typeNames":["Int16"],"name":"instShiftRightInt16","className":"ShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqInt16","className":"Decidable"},{"typeNames":["LT.lt"],"name":"instDecidableLtInt16","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableLeInt16","className":"Decidable"},{"typeNames":["Int16"],"name":"instMaxInt16","className":"Max"},{"typeNames":["Int16"],"name":"instMinInt16","className":"Min"},{"typeNames":["Int32"],"name":"instToStringInt32","className":"ToString"},{"typeNames":["Int16"],"name":"instReprInt16_1","className":"Repr"},{"typeNames":["Int16"],"name":"instReprAtomInt16_1","className":"ReprAtom"},{"typeNames":["Int32"],"name":"instHashableInt32","className":"Hashable"},{"typeNames":["Int32"],"name":"Int32.instOfNat","className":"OfNat"},{"typeNames":["Int32"],"name":"Int32.instNeg","className":"Neg"},{"typeNames":["Int32"],"name":"instInhabitedInt32","className":"Inhabited"},{"typeNames":["Int32"],"name":"instAddInt32","className":"Add"},{"typeNames":["Int32"],"name":"instSubInt32","className":"Sub"},{"typeNames":["Int32"],"name":"instMulInt32","className":"Mul"},{"typeNames":["Int32"],"name":"instModInt32","className":"Mod"},{"typeNames":["Int32"],"name":"instDivInt32","className":"Div"},{"typeNames":["Int32"],"name":"instLTInt32","className":"LT"},{"typeNames":["Int32"],"name":"instLEInt32","className":"LE"},{"typeNames":["Int32"],"name":"instComplementInt32","className":"Complement"},{"typeNames":["Int32"],"name":"instAndOpInt32","className":"AndOp"},{"typeNames":["Int32"],"name":"instOrOpInt32","className":"OrOp"},{"typeNames":["Int32"],"name":"instXorInt32","className":"Xor"},{"typeNames":["Int32"],"name":"instShiftLeftInt32","className":"ShiftLeft"},{"typeNames":["Int32"],"name":"instShiftRightInt32","className":"ShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqInt32","className":"Decidable"},{"typeNames":["LT.lt"],"name":"instDecidableLtInt32","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableLeInt32","className":"Decidable"},{"typeNames":["Int32"],"name":"instMaxInt32","className":"Max"},{"typeNames":["Int32"],"name":"instMinInt32","className":"Min"},{"typeNames":["Int64"],"name":"instToStringInt64","className":"ToString"},{"typeNames":["Int64"],"name":"instReprInt64","className":"Repr"},{"typeNames":["Int64"],"name":"instReprAtomInt64","className":"ReprAtom"},{"typeNames":["Int64"],"name":"instHashableInt64","className":"Hashable"},{"typeNames":["Int64"],"name":"Int64.instOfNat","className":"OfNat"},{"typeNames":["Int64"],"name":"Int64.instNeg","className":"Neg"},{"typeNames":["Int64"],"name":"instInhabitedInt64","className":"Inhabited"},{"typeNames":["Int64"],"name":"instAddInt64","className":"Add"},{"typeNames":["Int64"],"name":"instSubInt64","className":"Sub"},{"typeNames":["Int64"],"name":"instMulInt64","className":"Mul"},{"typeNames":["Int64"],"name":"instModInt64","className":"Mod"},{"typeNames":["Int64"],"name":"instDivInt64","className":"Div"},{"typeNames":["Int64"],"name":"instLTInt64","className":"LT"},{"typeNames":["Int64"],"name":"instLEInt64","className":"LE"},{"typeNames":["Int64"],"name":"instComplementInt64","className":"Complement"},{"typeNames":["Int64"],"name":"instAndOpInt64","className":"AndOp"},{"typeNames":["Int64"],"name":"instOrOpInt64","className":"OrOp"},{"typeNames":["Int64"],"name":"instXorInt64","className":"Xor"},{"typeNames":["Int64"],"name":"instShiftLeftInt64","className":"ShiftLeft"},{"typeNames":["Int64"],"name":"instShiftRightInt64","className":"ShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqInt64","className":"Decidable"},{"typeNames":["LT.lt"],"name":"instDecidableLtInt64","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableLeInt64","className":"Decidable"},{"typeNames":["Int64"],"name":"instMaxInt64","className":"Max"},{"typeNames":["Int64"],"name":"instMinInt64","className":"Min"},{"typeNames":["ISize"],"name":"instToStringISize","className":"ToString"},{"typeNames":["ISize"],"name":"instReprISize","className":"Repr"},{"typeNames":["ISize"],"name":"instReprAtomISize","className":"ReprAtom"},{"typeNames":["ISize"],"name":"instHashableISize","className":"Hashable"},{"typeNames":["ISize"],"name":"ISize.instOfNat","className":"OfNat"},{"typeNames":["ISize"],"name":"ISize.instNeg","className":"Neg"},{"typeNames":["ISize"],"name":"instInhabitedISize","className":"Inhabited"},{"typeNames":["ISize"],"name":"instAddISize","className":"Add"},{"typeNames":["ISize"],"name":"instSubISize","className":"Sub"},{"typeNames":["ISize"],"name":"instMulISize","className":"Mul"},{"typeNames":["ISize"],"name":"instModISize","className":"Mod"},{"typeNames":["ISize"],"name":"instDivISize","className":"Div"},{"typeNames":["ISize"],"name":"instLTISize","className":"LT"},{"typeNames":["ISize"],"name":"instLEISize","className":"LE"},{"typeNames":["ISize"],"name":"instComplementISize","className":"Complement"},{"typeNames":["ISize"],"name":"instAndOpISize","className":"AndOp"},{"typeNames":["ISize"],"name":"instOrOpISize","className":"OrOp"},{"typeNames":["ISize"],"name":"instXorISize","className":"Xor"},{"typeNames":["ISize"],"name":"instShiftLeftISize","className":"ShiftLeft"},{"typeNames":["ISize"],"name":"instShiftRightISize","className":"ShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqISize","className":"Decidable"},{"typeNames":["LT.lt"],"name":"instDecidableLtISize","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableLeISize","className":"Decidable"},{"typeNames":["ISize"],"name":"instMaxISize","className":"Max"},{"typeNames":["ISize"],"name":"instMinISize","className":"Min"}],"imports":["Init.Data.UInt.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L812-L812","name":"instMinISize","line":812,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMinISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMinISize\"><span class=\"name\">instMinISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L811-L811","name":"instMaxISize","line":811,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMaxISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMaxISize\"><span class=\"name\">instMaxISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L810-L810","name":"instDecidableLeISize","line":810,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLeISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLeISize\"><span class=\"name\">instDecidableLeISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L809-L809","name":"instDecidableLtISize","line":809,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLtISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLtISize\"><span class=\"name\">instDecidableLtISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L805-L807","name":"ISize.decLe","line":805,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.decLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.decLe\"><span class=\"name\">ISize</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L801-L803","name":"ISize.decLt","line":801,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.decLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.decLt\"><span class=\"name\">ISize</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L798-L799","name":"Bool.toISize","line":798,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Bool.toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Bool.toISize\"><span class=\"name\">Bool</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L796-L796","name":"instDecidableEqISize","line":796,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableEqISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableEqISize\"><span class=\"name\">instDecidableEqISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L795-L795","name":"instShiftRightISize","line":795,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftRightISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftRightISize\"><span class=\"name\">instShiftRightISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L794-L794","name":"instShiftLeftISize","line":794,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftLeftISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftLeftISize\"><span class=\"name\">instShiftLeftISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L793-L793","name":"instXorISize","line":793,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instXorISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instXorISize\"><span class=\"name\">instXorISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L792-L792","name":"instOrOpISize","line":792,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instOrOpISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instOrOpISize\"><span class=\"name\">instOrOpISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L791-L791","name":"instAndOpISize","line":791,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAndOpISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAndOpISize\"><span class=\"name\">instAndOpISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L790-L790","name":"instComplementISize","line":790,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instComplementISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instComplementISize\"><span class=\"name\">instComplementISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L789-L789","name":"instLEISize","line":789,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLEISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLEISize\"><span class=\"name\">instLEISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L788-L788","name":"instLTISize","line":788,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLTISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLTISize\"><span class=\"name\">instLTISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L787-L787","name":"instDivISize","line":787,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDivISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDivISize\"><span class=\"name\">instDivISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L786-L786","name":"instModISize","line":786,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instModISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instModISize\"><span class=\"name\">instModISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L785-L785","name":"instMulISize","line":785,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMulISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMulISize\"><span class=\"name\">instMulISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L784-L784","name":"instSubISize","line":784,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instSubISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instSubISize\"><span class=\"name\">instSubISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L783-L783","name":"instAddISize","line":783,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAddISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAddISize\"><span class=\"name\">instAddISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L780-L781","name":"instInhabitedISize","line":780,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instInhabitedISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instInhabitedISize\"><span class=\"name\">instInhabitedISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L778-L778","name":"ISize.le","line":778,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.le\"><span class=\"name\">ISize</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L777-L777","name":"ISize.lt","line":777,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.lt\"><span class=\"name\">ISize</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L768-L775","name":"ISize.decEq","line":768,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.decEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.decEq\"><span class=\"name\">ISize</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L763-L766","name":"ISize.abs","line":763,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.abs","doc":"Computes the absolute value of the signed integer. This function is equivalent to\n`if a < 0 then -a else a`, so in particular `ISize.minValue` will be mapped to `ISize.minValue`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.abs\"><span class=\"name\">ISize</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L761-L762","name":"ISize.complement","line":761,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.complement","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.complement\"><span class=\"name\">ISize</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L759-L760","name":"ISize.shiftRight","line":759,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.shiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.shiftRight\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L757-L758","name":"ISize.shiftLeft","line":757,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.shiftLeft\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L755-L756","name":"ISize.xor","line":755,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.xor\"><span class=\"name\">ISize</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L753-L754","name":"ISize.lor","line":753,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.lor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.lor\"><span class=\"name\">ISize</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L751-L752","name":"ISize.land","line":751,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.land","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.land\"><span class=\"name\">ISize</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L749-L750","name":"ISize.mod","line":749,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.mod\"><span class=\"name\">ISize</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L747-L748","name":"ISize.div","line":747,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.div\"><span class=\"name\">ISize</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L745-L746","name":"ISize.mul","line":745,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.mul\"><span class=\"name\">ISize</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L743-L744","name":"ISize.sub","line":743,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.sub\"><span class=\"name\">ISize</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L741-L742","name":"ISize.add","line":741,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.add\"><span class=\"name\">ISize</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L731-L739","name":"ISize.ofIntTruncate","line":731,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate","doc":"Constructs an `ISize` from an `Int`, clamping if the value is too small or too large. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L727-L730","name":"ISize.ofIntLE","line":727,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.ofIntLE","doc":"Constructs an `ISize` from an `Int` which is known to be in bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hl</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hr</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L724-L725","name":"ISize.minValue","line":724,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.minValue","doc":"The minimum value an `ISize` may attain, that is, `-2^(System.Platform.numBits - 1)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.minValue\"><span class=\"name\">ISize</span>.<span class=\"name\">minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L722-L723","name":"ISize.maxValue","line":722,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.maxValue","doc":"The maximum value an `ISize` may attain, that is, `2^(System.Platform.numBits - 1) - 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\"><span class=\"name\">ISize</span>.<span class=\"name\">maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L719-L720","name":"ISize.instNeg","line":719,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#ISize.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.instNeg\"><span class=\"name\">ISize</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L718-L718","name":"ISize.instOfNat","line":718,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#ISize.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.instOfNat\"><span class=\"name\">ISize</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L715-L716","name":"instHashableISize","line":715,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instHashableISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instHashableISize\"><span class=\"name\">instHashableISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L713-L713","name":"instReprAtomISize","line":713,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprAtomISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprAtomISize\"><span class=\"name\">instReprAtomISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L711-L712","name":"instReprISize","line":711,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprISize\"><span class=\"name\">instReprISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L709-L710","name":"instToStringISize","line":709,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instToStringISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instToStringISize\"><span class=\"name\">instToStringISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L706-L707","name":"ISize.neg","line":706,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.neg\"><span class=\"name\">ISize</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L704-L705","name":"Int64.toISize","line":704,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toISize\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L699-L703","name":"Int32.toISize","line":699,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toISize","doc":"Upcasts `Int32` to `ISize`. This function is lossless as `ISize` is either `Int32` or `Int64`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toISize\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L697-L698","name":"Int16.toISize","line":697,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toISize\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L695-L696","name":"Int8.toISize","line":695,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toISize\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L690-L694","name":"ISize.toInt64","line":690,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toInt64","doc":"Upcasts `ISize` to `Int64`. This function is lossless as `ISize` is either `Int32` or `Int64`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L688-L689","name":"ISize.toInt32","line":688,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L686-L687","name":"ISize.toInt16","line":686,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L684-L685","name":"ISize.toInt8","line":684,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L682-L683","name":"ISize.ofBitVec","line":682,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.ofBitVec","doc":"Obtains the `ISize` whose 2's complement representation is the given `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L680-L681","name":"ISize.toNat","line":680,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toNat","doc":"This function has the same behavior as `Int.toNat` for negative numbers.\nIf you want to obtain the 2's complement representation use `toBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toNat\"><span class=\"name\">ISize</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L675-L679","name":"ISize.toNatClampNeg","line":675,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg","doc":"This function has the same behavior as `Int.toNat` for negative numbers.\nIf you want to obtain the 2's complement representation use `toBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L673-L674","name":"ISize.toInt","line":673,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L672-L672","name":"Nat.toISize","line":672,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Nat.toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Nat.toISize\"><span class=\"name\">Nat</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L671-L671","name":"Int.toISize","line":671,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int.toISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int.toISize\"><span class=\"name\">Int</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L669-L670","name":"ISize.ofNat","line":669,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L667-L668","name":"ISize.ofInt","line":667,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L665-L666","name":"ISize.mk","line":665,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.mk","doc":"Obtains the `ISize` that is 2's complement equivalent to the `USize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.mk\"><span class=\"name\">ISize</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L663-L664","name":"USize.toISize","line":663,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#USize.toISize","doc":"Obtains the `ISize` that is 2's complement equivalent to the `USize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#USize.toISize\"><span class=\"name\">USize</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L660-L661","name":"ISize.toBitVec.inj","line":660,"kind":"theorem","docLink":"./Init/Data/SInt/Basic.html#ISize.toBitVec.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec.inj\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L655-L658","name":"ISize.toBitVec","line":655,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toBitVec","doc":"Obtain the `BitVec` that contains the 2's complement representation of the `ISize`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L652-L653","name":"ISize.size","line":652,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.size","doc":"The size of type `ISize`, that is, `2^System.Platform.numBits`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.size\"><span class=\"name\">ISize</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L650-L650","name":"instMinInt64","line":650,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMinInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMinInt64\"><span class=\"name\">instMinInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L649-L649","name":"instMaxInt64","line":649,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMaxInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMaxInt64\"><span class=\"name\">instMaxInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L648-L648","name":"instDecidableLeInt64","line":648,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLeInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLeInt64\"><span class=\"name\">instDecidableLeInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L647-L647","name":"instDecidableLtInt64","line":647,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLtInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLtInt64\"><span class=\"name\">instDecidableLtInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L643-L645","name":"Int64.decLe","line":643,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.decLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.decLe\"><span class=\"name\">Int64</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L639-L641","name":"Int64.decLt","line":639,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.decLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.decLt\"><span class=\"name\">Int64</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L636-L637","name":"Bool.toInt64","line":636,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Bool.toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Bool.toInt64\"><span class=\"name\">Bool</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L634-L634","name":"instDecidableEqInt64","line":634,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableEqInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableEqInt64\"><span class=\"name\">instDecidableEqInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L633-L633","name":"instShiftRightInt64","line":633,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftRightInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftRightInt64\"><span class=\"name\">instShiftRightInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L632-L632","name":"instShiftLeftInt64","line":632,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftLeftInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftLeftInt64\"><span class=\"name\">instShiftLeftInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L631-L631","name":"instXorInt64","line":631,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instXorInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instXorInt64\"><span class=\"name\">instXorInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L630-L630","name":"instOrOpInt64","line":630,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instOrOpInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instOrOpInt64\"><span class=\"name\">instOrOpInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L629-L629","name":"instAndOpInt64","line":629,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAndOpInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAndOpInt64\"><span class=\"name\">instAndOpInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L628-L628","name":"instComplementInt64","line":628,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instComplementInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instComplementInt64\"><span class=\"name\">instComplementInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L627-L627","name":"instLEInt64","line":627,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLEInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLEInt64\"><span class=\"name\">instLEInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L626-L626","name":"instLTInt64","line":626,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLTInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLTInt64\"><span class=\"name\">instLTInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L625-L625","name":"instDivInt64","line":625,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDivInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDivInt64\"><span class=\"name\">instDivInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L624-L624","name":"instModInt64","line":624,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instModInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instModInt64\"><span class=\"name\">instModInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L623-L623","name":"instMulInt64","line":623,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMulInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMulInt64\"><span class=\"name\">instMulInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L622-L622","name":"instSubInt64","line":622,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instSubInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instSubInt64\"><span class=\"name\">instSubInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L621-L621","name":"instAddInt64","line":621,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAddInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAddInt64\"><span class=\"name\">instAddInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L618-L619","name":"instInhabitedInt64","line":618,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instInhabitedInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instInhabitedInt64\"><span class=\"name\">instInhabitedInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L616-L616","name":"Int64.le","line":616,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.le\"><span class=\"name\">Int64</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L615-L615","name":"Int64.lt","line":615,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.lt\"><span class=\"name\">Int64</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L606-L613","name":"Int64.decEq","line":606,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.decEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.decEq\"><span class=\"name\">Int64</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L601-L604","name":"Int64.abs","line":601,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.abs","doc":"Computes the absolute value of the signed integer. This function is equivalent to\n`if a < 0 then -a else a`, so in particular `Int64.minValue` will be mapped to `Int64.minValue`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.abs\"><span class=\"name\">Int64</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L599-L600","name":"Int64.complement","line":599,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.complement","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.complement\"><span class=\"name\">Int64</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L597-L598","name":"Int64.shiftRight","line":597,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.shiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.shiftRight\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L595-L596","name":"Int64.shiftLeft","line":595,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.shiftLeft\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L593-L594","name":"Int64.xor","line":593,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.xor\"><span class=\"name\">Int64</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L591-L592","name":"Int64.lor","line":591,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.lor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.lor\"><span class=\"name\">Int64</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L589-L590","name":"Int64.land","line":589,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.land","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.land\"><span class=\"name\">Int64</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L587-L588","name":"Int64.mod","line":587,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.mod\"><span class=\"name\">Int64</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L585-L586","name":"Int64.div","line":585,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.div\"><span class=\"name\">Int64</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L583-L584","name":"Int64.mul","line":583,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.mul\"><span class=\"name\">Int64</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L581-L582","name":"Int64.sub","line":581,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.sub\"><span class=\"name\">Int64</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L579-L580","name":"Int64.add","line":579,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.add\"><span class=\"name\">Int64</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L569-L577","name":"Int64.ofIntTruncate","line":569,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate","doc":"Constructs an `Int64` from an `Int`, clamping if the value is too small or too large. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L565-L568","name":"Int64.ofIntLE","line":565,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.ofIntLE","doc":"Constructs an `Int64` from an `Int` which is known to be in bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hl</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hr</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L563-L564","name":"Int64.minValue","line":563,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.minValue","doc":"The minimum value an `Int64` may attain, that is, `-2^63 = -9223372036854775808`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.minValue\"><span class=\"name\">Int64</span>.<span class=\"name\">minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L561-L562","name":"Int64.maxValue","line":561,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.maxValue","doc":"The maximum value an `Int64` may attain, that is, `2^63 - 1 = 9223372036854775807`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\"><span class=\"name\">Int64</span>.<span class=\"name\">maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L558-L559","name":"Int64.instNeg","line":558,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int64.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.instNeg\"><span class=\"name\">Int64</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L557-L557","name":"Int64.instOfNat","line":557,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int64.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.instOfNat\"><span class=\"name\">Int64</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L554-L555","name":"instHashableInt64","line":554,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instHashableInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instHashableInt64\"><span class=\"name\">instHashableInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L552-L552","name":"instReprAtomInt64","line":552,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprAtomInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprAtomInt64\"><span class=\"name\">instReprAtomInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L550-L551","name":"instReprInt64","line":550,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprInt64\"><span class=\"name\">instReprInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L548-L549","name":"instToStringInt64","line":548,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instToStringInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instToStringInt64\"><span class=\"name\">instToStringInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L545-L546","name":"Int64.neg","line":545,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.neg\"><span class=\"name\">Int64</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L543-L544","name":"Int32.toInt64","line":543,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L541-L542","name":"Int16.toInt64","line":541,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L539-L540","name":"Int8.toInt64","line":539,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L537-L538","name":"Int64.toInt32","line":537,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L535-L536","name":"Int64.toInt16","line":535,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L533-L534","name":"Int64.toInt8","line":533,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L531-L532","name":"Int64.ofBitVec","line":531,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.ofBitVec","doc":"Obtains the `Int64` whose 2's complement representation is the given `BitVec 64`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L529-L530","name":"Int64.toNat","line":529,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toNat","doc":"This function has the same behavior as `Int.toNat` for negative numbers.\nIf you want to obtain the 2's complement representation use `toBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toNat\"><span class=\"name\">Int64</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L524-L528","name":"Int64.toNatClampNeg","line":524,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg","doc":"This function has the same behavior as `Int.toNat` for negative numbers.\nIf you want to obtain the 2's complement representation use `toBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L522-L523","name":"Int64.toInt","line":522,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toInt\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L521-L521","name":"Nat.toInt64","line":521,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Nat.toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Nat.toInt64\"><span class=\"name\">Nat</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L520-L520","name":"Int.toInt64","line":520,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int.toInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int.toInt64\"><span class=\"name\">Int</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L518-L519","name":"Int64.ofNat","line":518,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L516-L517","name":"Int64.ofInt","line":516,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L514-L515","name":"Int64.mk","line":514,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.mk","doc":"Obtains the `Int64` that is 2's complement equivalent to the `UInt64`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.mk\"><span class=\"name\">Int64</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L512-L513","name":"UInt64.toInt64","line":512,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#UInt64.toInt64","doc":"Obtains the `Int64` that is 2's complement equivalent to the `UInt64`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L509-L510","name":"Int64.toBitVec.inj","line":509,"kind":"theorem","docLink":"./Init/Data/SInt/Basic.html#Int64.toBitVec.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec.inj\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L504-L507","name":"Int64.toBitVec","line":504,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toBitVec","doc":"Obtain the `BitVec` that contains the 2's complement representation of the `Int64`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L501-L502","name":"Int64.size","line":501,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.size","doc":"The size of type `Int64`, that is, `2^64 = 18446744073709551616`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.size\"><span class=\"name\">Int64</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L499-L499","name":"instMinInt32","line":499,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMinInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMinInt32\"><span class=\"name\">instMinInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L498-L498","name":"instMaxInt32","line":498,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMaxInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMaxInt32\"><span class=\"name\">instMaxInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L497-L497","name":"instDecidableLeInt32","line":497,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLeInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLeInt32\"><span class=\"name\">instDecidableLeInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L496-L496","name":"instDecidableLtInt32","line":496,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLtInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLtInt32\"><span class=\"name\">instDecidableLtInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L492-L494","name":"Int32.decLe","line":492,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.decLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.decLe\"><span class=\"name\">Int32</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L488-L490","name":"Int32.decLt","line":488,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.decLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.decLt\"><span class=\"name\">Int32</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L485-L486","name":"Bool.toInt32","line":485,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Bool.toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Bool.toInt32\"><span class=\"name\">Bool</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L483-L483","name":"instDecidableEqInt32","line":483,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableEqInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableEqInt32\"><span class=\"name\">instDecidableEqInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L482-L482","name":"instShiftRightInt32","line":482,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftRightInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftRightInt32\"><span class=\"name\">instShiftRightInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L481-L481","name":"instShiftLeftInt32","line":481,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftLeftInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftLeftInt32\"><span class=\"name\">instShiftLeftInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L480-L480","name":"instXorInt32","line":480,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instXorInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instXorInt32\"><span class=\"name\">instXorInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L479-L479","name":"instOrOpInt32","line":479,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instOrOpInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instOrOpInt32\"><span class=\"name\">instOrOpInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L478-L478","name":"instAndOpInt32","line":478,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAndOpInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAndOpInt32\"><span class=\"name\">instAndOpInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L477-L477","name":"instComplementInt32","line":477,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instComplementInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instComplementInt32\"><span class=\"name\">instComplementInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L476-L476","name":"instLEInt32","line":476,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLEInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLEInt32\"><span class=\"name\">instLEInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L475-L475","name":"instLTInt32","line":475,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLTInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLTInt32\"><span class=\"name\">instLTInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L474-L474","name":"instDivInt32","line":474,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDivInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDivInt32\"><span class=\"name\">instDivInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L473-L473","name":"instModInt32","line":473,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instModInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instModInt32\"><span class=\"name\">instModInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L472-L472","name":"instMulInt32","line":472,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMulInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMulInt32\"><span class=\"name\">instMulInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L471-L471","name":"instSubInt32","line":471,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instSubInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instSubInt32\"><span class=\"name\">instSubInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L470-L470","name":"instAddInt32","line":470,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAddInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAddInt32\"><span class=\"name\">instAddInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L467-L468","name":"instInhabitedInt32","line":467,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instInhabitedInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instInhabitedInt32\"><span class=\"name\">instInhabitedInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L465-L465","name":"Int32.le","line":465,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.le\"><span class=\"name\">Int32</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L464-L464","name":"Int32.lt","line":464,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.lt\"><span class=\"name\">Int32</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L455-L462","name":"Int32.decEq","line":455,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.decEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.decEq\"><span class=\"name\">Int32</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L450-L453","name":"Int32.abs","line":450,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.abs","doc":"Computes the absolute value of the signed integer. This function is equivalent to\n`if a < 0 then -a else a`, so in particular `Int32.minValue` will be mapped to `Int32.minValue`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.abs\"><span class=\"name\">Int32</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L448-L449","name":"Int32.complement","line":448,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.complement","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.complement\"><span class=\"name\">Int32</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L446-L447","name":"Int32.shiftRight","line":446,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.shiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.shiftRight\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L444-L445","name":"Int32.shiftLeft","line":444,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.shiftLeft\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L442-L443","name":"Int32.xor","line":442,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.xor\"><span class=\"name\">Int32</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L440-L441","name":"Int32.lor","line":440,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.lor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.lor\"><span class=\"name\">Int32</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L438-L439","name":"Int32.land","line":438,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.land","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.land\"><span class=\"name\">Int32</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L436-L437","name":"Int32.mod","line":436,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.mod\"><span class=\"name\">Int32</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L434-L435","name":"Int32.div","line":434,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.div\"><span class=\"name\">Int32</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L432-L433","name":"Int32.mul","line":432,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.mul\"><span class=\"name\">Int32</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L430-L431","name":"Int32.sub","line":430,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.sub\"><span class=\"name\">Int32</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L428-L429","name":"Int32.add","line":428,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.add\"><span class=\"name\">Int32</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L418-L426","name":"Int32.ofIntTruncate","line":418,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate","doc":"Constructs an `Int32` from an `Int`, clamping if the value is too small or too large. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L414-L417","name":"Int32.ofIntLE","line":414,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.ofIntLE","doc":"Constructs an `Int32` from an `Int` which is known to be in bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hl</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hr</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L412-L413","name":"Int32.minValue","line":412,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.minValue","doc":"The minimum value an `Int32` may attain, that is, `-2^31 = -2147483648`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.minValue\"><span class=\"name\">Int32</span>.<span class=\"name\">minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L410-L411","name":"Int32.maxValue","line":410,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.maxValue","doc":"The maximum value an `Int32` may attain, that is, `2^31 - 1 = 2147483647`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\"><span class=\"name\">Int32</span>.<span class=\"name\">maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L407-L408","name":"Int32.instNeg","line":407,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int32.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.instNeg\"><span class=\"name\">Int32</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L406-L406","name":"Int32.instOfNat","line":406,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int32.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.instOfNat\"><span class=\"name\">Int32</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L403-L404","name":"instHashableInt32","line":403,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instHashableInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instHashableInt32\"><span class=\"name\">instHashableInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L401-L401","name":"instReprAtomInt16_1","line":401,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprAtomInt16_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprAtomInt16_1\"><span class=\"name\">instReprAtomInt16_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L399-L400","name":"instReprInt16_1","line":399,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprInt16_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprInt16_1\"><span class=\"name\">instReprInt16_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L397-L398","name":"instToStringInt32","line":397,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instToStringInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instToStringInt32\"><span class=\"name\">instToStringInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L394-L395","name":"Int32.neg","line":394,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.neg\"><span class=\"name\">Int32</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L392-L393","name":"Int16.toInt32","line":392,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L390-L391","name":"Int8.toInt32","line":390,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L388-L389","name":"Int32.toInt16","line":388,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L386-L387","name":"Int32.toInt8","line":386,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L384-L385","name":"Int32.ofBitVec","line":384,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.ofBitVec","doc":"Obtains the `Int32` whose 2's complement representation is the given `BitVec 32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L382-L383","name":"Int32.toNat","line":382,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toNat","doc":"This function has the same behavior as `Int.toNat` for negative numbers.\nIf you want to obtain the 2's complement representation use `toBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toNat\"><span class=\"name\">Int32</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L377-L381","name":"Int32.toNatClampNeg","line":377,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg","doc":"This function has the same behavior as `Int.toNat` for negative numbers.\nIf you want to obtain the 2's complement representation use `toBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L375-L376","name":"Int32.toInt","line":375,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toInt\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L374-L374","name":"Nat.toInt32","line":374,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Nat.toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Nat.toInt32\"><span class=\"name\">Nat</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L373-L373","name":"Int.toInt32","line":373,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int.toInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int.toInt32\"><span class=\"name\">Int</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L371-L372","name":"Int32.ofNat","line":371,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L369-L370","name":"Int32.ofInt","line":369,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L367-L368","name":"Int32.mk","line":367,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.mk","doc":"Obtains the `Int32` that is 2's complement equivalent to the `UInt32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.mk\"><span class=\"name\">Int32</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L365-L366","name":"UInt32.toInt32","line":365,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#UInt32.toInt32","doc":"Obtains the `Int32` that is 2's complement equivalent to the `UInt32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L362-L363","name":"Int32.toBitVec.inj","line":362,"kind":"theorem","docLink":"./Init/Data/SInt/Basic.html#Int32.toBitVec.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec.inj\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L357-L360","name":"Int32.toBitVec","line":357,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toBitVec","doc":"Obtain the `BitVec` that contains the 2's complement representation of the `Int32`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L354-L355","name":"Int32.size","line":354,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.size","doc":"The size of type `Int32`, that is, `2^32 = 4294967296`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.size\"><span class=\"name\">Int32</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L352-L352","name":"instMinInt16","line":352,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMinInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMinInt16\"><span class=\"name\">instMinInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L351-L351","name":"instMaxInt16","line":351,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMaxInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMaxInt16\"><span class=\"name\">instMaxInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L350-L350","name":"instDecidableLeInt16","line":350,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLeInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLeInt16\"><span class=\"name\">instDecidableLeInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L349-L349","name":"instDecidableLtInt16","line":349,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLtInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLtInt16\"><span class=\"name\">instDecidableLtInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L345-L347","name":"Int16.decLe","line":345,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.decLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.decLe\"><span class=\"name\">Int16</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L341-L343","name":"Int16.decLt","line":341,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.decLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.decLt\"><span class=\"name\">Int16</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L338-L339","name":"Bool.toInt16","line":338,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Bool.toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Bool.toInt16\"><span class=\"name\">Bool</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L336-L336","name":"instDecidableEqInt16","line":336,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableEqInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableEqInt16\"><span class=\"name\">instDecidableEqInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L335-L335","name":"instShiftRightInt16","line":335,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftRightInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftRightInt16\"><span class=\"name\">instShiftRightInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L334-L334","name":"instShiftLeftInt16","line":334,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftLeftInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftLeftInt16\"><span class=\"name\">instShiftLeftInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L333-L333","name":"instXorInt16","line":333,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instXorInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instXorInt16\"><span class=\"name\">instXorInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L332-L332","name":"instOrOpInt16","line":332,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instOrOpInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instOrOpInt16\"><span class=\"name\">instOrOpInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L331-L331","name":"instAndOpInt16","line":331,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAndOpInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAndOpInt16\"><span class=\"name\">instAndOpInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L330-L330","name":"instComplementInt16","line":330,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instComplementInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instComplementInt16\"><span class=\"name\">instComplementInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L329-L329","name":"instLEInt16","line":329,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLEInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLEInt16\"><span class=\"name\">instLEInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L328-L328","name":"instLTInt16","line":328,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLTInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLTInt16\"><span class=\"name\">instLTInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L327-L327","name":"instDivInt16","line":327,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDivInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDivInt16\"><span class=\"name\">instDivInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L326-L326","name":"instModInt16","line":326,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instModInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instModInt16\"><span class=\"name\">instModInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L325-L325","name":"instMulInt16","line":325,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMulInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMulInt16\"><span class=\"name\">instMulInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L324-L324","name":"instSubInt16","line":324,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instSubInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instSubInt16\"><span class=\"name\">instSubInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L323-L323","name":"instAddInt16","line":323,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAddInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAddInt16\"><span class=\"name\">instAddInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L320-L321","name":"instInhabitedInt16","line":320,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instInhabitedInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instInhabitedInt16\"><span class=\"name\">instInhabitedInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L318-L318","name":"Int16.le","line":318,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.le\"><span class=\"name\">Int16</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L317-L317","name":"Int16.lt","line":317,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.lt\"><span class=\"name\">Int16</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L308-L315","name":"Int16.decEq","line":308,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.decEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.decEq\"><span class=\"name\">Int16</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L303-L306","name":"Int16.abs","line":303,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.abs","doc":"Computes the absolute value of the signed integer. This function is equivalent to\n`if a < 0 then -a else a`, so in particular `Int16.minValue` will be mapped to `Int16.minValue`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.abs\"><span class=\"name\">Int16</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L301-L302","name":"Int16.complement","line":301,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.complement","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.complement\"><span class=\"name\">Int16</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L299-L300","name":"Int16.shiftRight","line":299,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.shiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.shiftRight\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L297-L298","name":"Int16.shiftLeft","line":297,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.shiftLeft\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L295-L296","name":"Int16.xor","line":295,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.xor\"><span class=\"name\">Int16</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L293-L294","name":"Int16.lor","line":293,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.lor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.lor\"><span class=\"name\">Int16</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L291-L292","name":"Int16.land","line":291,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.land","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.land\"><span class=\"name\">Int16</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L289-L290","name":"Int16.mod","line":289,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.mod\"><span class=\"name\">Int16</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L287-L288","name":"Int16.div","line":287,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.div\"><span class=\"name\">Int16</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L285-L286","name":"Int16.mul","line":285,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.mul\"><span class=\"name\">Int16</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L283-L284","name":"Int16.sub","line":283,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.sub\"><span class=\"name\">Int16</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L281-L282","name":"Int16.add","line":281,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.add\"><span class=\"name\">Int16</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L271-L279","name":"Int16.ofIntTruncate","line":271,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate","doc":"Constructs an `Int16` from an `Int`, clamping if the value is too small or too large. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L267-L270","name":"Int16.ofIntLE","line":267,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.ofIntLE","doc":"Constructs an `Int16` from an `Int` which is known to be in bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hl</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hr</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L265-L266","name":"Int16.minValue","line":265,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.minValue","doc":"The minimum value an `Int16` may attain, that is, `-2^15 = -32768`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.minValue\"><span class=\"name\">Int16</span>.<span class=\"name\">minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L263-L264","name":"Int16.maxValue","line":263,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.maxValue","doc":"The maximum value an `Int16` may attain, that is, `2^15 - 1 = 32767`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\"><span class=\"name\">Int16</span>.<span class=\"name\">maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L260-L261","name":"Int16.instNeg","line":260,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int16.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.instNeg\"><span class=\"name\">Int16</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L259-L259","name":"Int16.instOfNat","line":259,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int16.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.instOfNat\"><span class=\"name\">Int16</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L256-L257","name":"instHashableInt16","line":256,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instHashableInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instHashableInt16\"><span class=\"name\">instHashableInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L254-L254","name":"instReprAtomInt16","line":254,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprAtomInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprAtomInt16\"><span class=\"name\">instReprAtomInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L252-L253","name":"instReprInt16","line":252,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprInt16\"><span class=\"name\">instReprInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L250-L251","name":"instToStringInt16","line":250,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instToStringInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instToStringInt16\"><span class=\"name\">instToStringInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L247-L248","name":"Int16.neg","line":247,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.neg\"><span class=\"name\">Int16</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L245-L246","name":"Int8.toInt16","line":245,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L243-L244","name":"Int16.toInt8","line":243,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L241-L242","name":"Int16.ofBitVec","line":241,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.ofBitVec","doc":"Obtains the `Int16` whose 2's complement representation is the given `BitVec 16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L239-L240","name":"Int16.toNat","line":239,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toNat","doc":"This function has the same behavior as `Int.toNat` for negative numbers.\nIf you want to obtain the 2's complement representation use `toBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toNat\"><span class=\"name\">Int16</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L234-L238","name":"Int16.toNatClampNeg","line":234,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg","doc":"This function has the same behavior as `Int.toNat` for negative numbers.\nIf you want to obtain the 2's complement representation use `toBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L232-L233","name":"Int16.toInt","line":232,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toInt\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L231-L231","name":"Nat.toInt16","line":231,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Nat.toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Nat.toInt16\"><span class=\"name\">Nat</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L230-L230","name":"Int.toInt16","line":230,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int.toInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int.toInt16\"><span class=\"name\">Int</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L228-L229","name":"Int16.ofNat","line":228,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L226-L227","name":"Int16.ofInt","line":226,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L224-L225","name":"Int16.mk","line":224,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.mk","doc":"Obtains the `Int16` that is 2's complement equivalent to the `UInt16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.mk\"><span class=\"name\">Int16</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L222-L223","name":"UInt16.toInt16","line":222,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#UInt16.toInt16","doc":"Obtains the `Int16` that is 2's complement equivalent to the `UInt16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L219-L220","name":"Int16.toBitVec.inj","line":219,"kind":"theorem","docLink":"./Init/Data/SInt/Basic.html#Int16.toBitVec.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec.inj\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L214-L217","name":"Int16.toBitVec","line":214,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toBitVec","doc":"Obtain the `BitVec` that contains the 2's complement representation of the `Int16`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L211-L212","name":"Int16.size","line":211,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.size","doc":"The size of type `Int16`, that is, `2^16 = 65536`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.size\"><span class=\"name\">Int16</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L209-L209","name":"instMinInt8","line":209,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMinInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMinInt8\"><span class=\"name\">instMinInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L208-L208","name":"instMaxInt8","line":208,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMaxInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMaxInt8\"><span class=\"name\">instMaxInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L207-L207","name":"instDecidableLeInt8","line":207,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLeInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLeInt8\"><span class=\"name\">instDecidableLeInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L206-L206","name":"instDecidableLtInt8","line":206,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLtInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLtInt8\"><span class=\"name\">instDecidableLtInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L202-L204","name":"Int8.decLe","line":202,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.decLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.decLe\"><span class=\"name\">Int8</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L198-L200","name":"Int8.decLt","line":198,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.decLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.decLt\"><span class=\"name\">Int8</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L195-L196","name":"Bool.toInt8","line":195,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Bool.toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Bool.toInt8\"><span class=\"name\">Bool</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L193-L193","name":"instDecidableEqInt8","line":193,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableEqInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableEqInt8\"><span class=\"name\">instDecidableEqInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L192-L192","name":"instShiftRightInt8","line":192,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftRightInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftRightInt8\"><span class=\"name\">instShiftRightInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L191-L191","name":"instShiftLeftInt8","line":191,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftLeftInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftLeftInt8\"><span class=\"name\">instShiftLeftInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L190-L190","name":"instXorInt8","line":190,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instXorInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instXorInt8\"><span class=\"name\">instXorInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L189-L189","name":"instOrOpInt8","line":189,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instOrOpInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instOrOpInt8\"><span class=\"name\">instOrOpInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L188-L188","name":"instAndOpInt8","line":188,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAndOpInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAndOpInt8\"><span class=\"name\">instAndOpInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L187-L187","name":"instComplementInt8","line":187,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instComplementInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instComplementInt8\"><span class=\"name\">instComplementInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L186-L186","name":"instLEInt8","line":186,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLEInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLEInt8\"><span class=\"name\">instLEInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L185-L185","name":"instLTInt8","line":185,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLTInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLTInt8\"><span class=\"name\">instLTInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L184-L184","name":"instDivInt8","line":184,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDivInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDivInt8\"><span class=\"name\">instDivInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L183-L183","name":"instModInt8","line":183,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instModInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instModInt8\"><span class=\"name\">instModInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L182-L182","name":"instMulInt8","line":182,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMulInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMulInt8\"><span class=\"name\">instMulInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L181-L181","name":"instSubInt8","line":181,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instSubInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instSubInt8\"><span class=\"name\">instSubInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L180-L180","name":"instAddInt8","line":180,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAddInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAddInt8\"><span class=\"name\">instAddInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L177-L178","name":"instInhabitedInt8","line":177,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instInhabitedInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instInhabitedInt8\"><span class=\"name\">instInhabitedInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L175-L175","name":"Int8.le","line":175,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.le\"><span class=\"name\">Int8</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L174-L174","name":"Int8.lt","line":174,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.lt\"><span class=\"name\">Int8</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L165-L172","name":"Int8.decEq","line":165,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.decEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.decEq\"><span class=\"name\">Int8</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L160-L163","name":"Int8.abs","line":160,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.abs","doc":"Computes the absolute value of the signed integer. This function is equivalent to\n`if a < 0 then -a else a`, so in particular `Int8.minValue` will be mapped to `Int8.minValue`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.abs\"><span class=\"name\">Int8</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L158-L159","name":"Int8.complement","line":158,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.complement","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.complement\"><span class=\"name\">Int8</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L156-L157","name":"Int8.shiftRight","line":156,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.shiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.shiftRight\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L154-L155","name":"Int8.shiftLeft","line":154,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.shiftLeft\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L152-L153","name":"Int8.xor","line":152,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.xor\"><span class=\"name\">Int8</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L150-L151","name":"Int8.lor","line":150,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.lor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.lor\"><span class=\"name\">Int8</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L148-L149","name":"Int8.land","line":148,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.land","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.land\"><span class=\"name\">Int8</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L146-L147","name":"Int8.mod","line":146,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.mod\"><span class=\"name\">Int8</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L144-L145","name":"Int8.div","line":144,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.div\"><span class=\"name\">Int8</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L142-L143","name":"Int8.mul","line":142,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.mul\"><span class=\"name\">Int8</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L140-L141","name":"Int8.sub","line":140,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.sub\"><span class=\"name\">Int8</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L138-L139","name":"Int8.add","line":138,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.add\"><span class=\"name\">Int8</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L128-L136","name":"Int8.ofIntTruncate","line":128,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.ofIntTruncate","doc":"Constructs an `Int8` from an `Int`, clamping if the value is too small or too large. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.ofIntTruncate\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L124-L127","name":"Int8.ofIntLE","line":124,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.ofIntLE","doc":"Constructs an `Int8` from an `Int` which is known to be in bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hl</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hr</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L122-L123","name":"Int8.minValue","line":122,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.minValue","doc":"The minimum value an `Int8` may attain, that is, `-2^7 = -128`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.minValue\"><span class=\"name\">Int8</span>.<span class=\"name\">minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L120-L121","name":"Int8.maxValue","line":120,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.maxValue","doc":"The maximum value an `Int8` may attain, that is, `2^7 - 1 = 127`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\"><span class=\"name\">Int8</span>.<span class=\"name\">maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L117-L118","name":"Int8.instNeg","line":117,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int8.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.instNeg\"><span class=\"name\">Int8</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L116-L116","name":"Int8.instOfNat","line":116,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int8.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.instOfNat\"><span class=\"name\">Int8</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L113-L114","name":"instHashableInt8","line":113,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instHashableInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instHashableInt8\"><span class=\"name\">instHashableInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L111-L111","name":"instReprAtomInt8","line":111,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprAtomInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprAtomInt8\"><span class=\"name\">instReprAtomInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L109-L110","name":"instReprInt8","line":109,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprInt8\"><span class=\"name\">instReprInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L107-L108","name":"instToStringInt8","line":107,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instToStringInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instToStringInt8\"><span class=\"name\">instToStringInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L104-L105","name":"Int8.neg","line":104,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.neg\"><span class=\"name\">Int8</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L102-L103","name":"Int8.ofBitVec","line":102,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.ofBitVec","doc":"Obtains the `Int8` whose 2's complement representation is the given `BitVec 8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L100-L101","name":"Int8.toNat","line":100,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toNat","doc":"This function has the same behavior as `Int.toNat` for negative numbers.\nIf you want to obtain the 2's complement representation use `toBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toNat\"><span class=\"name\">Int8</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L95-L99","name":"Int8.toNatClampNeg","line":95,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg","doc":"This function has the same behavior as `Int.toNat` for negative numbers.\nIf you want to obtain the 2's complement representation use `toBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L93-L94","name":"Int8.toInt","line":93,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toInt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L92-L92","name":"Nat.toInt8","line":92,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Nat.toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Nat.toInt8\"><span class=\"name\">Nat</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L91-L91","name":"Int.toInt8","line":91,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int.toInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int.toInt8\"><span class=\"name\">Int</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L89-L90","name":"Int8.ofNat","line":89,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L87-L88","name":"Int8.ofInt","line":87,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.ofInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L85-L86","name":"Int8.mk","line":85,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.mk","doc":"Obtains the `Int8` that is 2's complement equivalent to the `UInt8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.mk\"><span class=\"name\">Int8</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L83-L84","name":"UInt8.toInt8","line":83,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#UInt8.toInt8","doc":"Obtains the `Int8` that is 2's complement equivalent to the `UInt8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L80-L81","name":"Int8.toBitVec.inj","line":80,"kind":"theorem","docLink":"./Init/Data/SInt/Basic.html#Int8.toBitVec.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec.inj\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L75-L78","name":"Int8.toBitVec","line":75,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toBitVec","doc":"Obtain the `BitVec` that contains the 2's complement representation of the `Int8`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L72-L73","name":"Int8.size","line":72,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.size","doc":"The size of type `Int8`, that is, `2^8 = 256`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.size\"><span class=\"name\">Int8</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L70-L70","name":"ISize.toUSize","line":70,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toUSize","doc":"Obtain the `USize` that is 2's complement equivalent to the `ISize`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L59-L70","name":"ISize","line":59,"kind":"structure","docLink":"./Init/Data/SInt/Basic.html#ISize","doc":"A `ISize` is a signed integer with the size of a word for the platform's architecture.\n\nFor example, if running on a 32-bit machine, ISize is equivalent to `Int32`.\nOr on a 64-bit machine, `Int64`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize\"><span class=\"name\">ISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L57-L57","name":"Int64.toUInt64","line":57,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toUInt64","doc":"Obtain the `UInt64` that is 2's complement equivalent to the `Int64`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L48-L57","name":"Int64","line":48,"kind":"structure","docLink":"./Init/Data/SInt/Basic.html#Int64","doc":"The type of signed 64-bit integers. This type has special support in the\ncompiler to make it actually 64 bits rather than wrapping a `Nat`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64\"><span class=\"name\">Int64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L46-L46","name":"Int32.toUInt32","line":46,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toUInt32","doc":"Obtain the `UInt32` that is 2's complement equivalent to the `Int32`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L37-L46","name":"Int32","line":37,"kind":"structure","docLink":"./Init/Data/SInt/Basic.html#Int32","doc":"The type of signed 32-bit integers. This type has special support in the\ncompiler to make it actually 32 bits rather than wrapping a `Nat`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32\"><span class=\"name\">Int32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L35-L35","name":"Int16.toUInt16","line":35,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toUInt16","doc":"Obtain the `UInt16` that is 2's complement equivalent to the `Int16`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L26-L35","name":"Int16","line":26,"kind":"structure","docLink":"./Init/Data/SInt/Basic.html#Int16","doc":"The type of signed 16-bit integers. This type has special support in the\ncompiler to make it actually 16 bits rather than wrapping a `Nat`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16\"><span class=\"name\">Int16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L24-L24","name":"Int8.toUInt8","line":24,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toUInt8","doc":"Obtain the `UInt8` that is 2's complement equivalent to the `Int8`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Init/Data/SInt/Basic.lean#L15-L24","name":"Int8","line":15,"kind":"structure","docLink":"./Init/Data/SInt/Basic.html#Int8","doc":"The type of signed 8-bit integers. This type has special support in the\ncompiler to make it actually 8 bits rather than wrapping a `Nat`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8\"><span class=\"name\">Int8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}