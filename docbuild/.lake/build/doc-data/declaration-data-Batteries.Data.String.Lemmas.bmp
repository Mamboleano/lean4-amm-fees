{"name":"Batteries.Data.String.Lemmas","instances":[{"typeNames":["String"],"name":"String.instTransOrd","className":"Batteries.TransCmp"},{"typeNames":["String"],"name":"String.instLTOrd","className":"Batteries.LTCmp"},{"typeNames":["String"],"name":"String.instBEqOrd","className":"Batteries.BEqCmp"}],"imports":["Init","Batteries.Data.Char","Batteries.Data.List.Lemmas","Batteries.Data.String.Basic","Batteries.Tactic.Lint.Misc","Batteries.Tactic.SeqFocus"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1089-L1090","name":"String.data_dropWhile","line":1089,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_dropWhile\"><span class=\"name\">String</span>.<span class=\"name\">data_dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.dropWhile\">dropWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1086-L1087","name":"String.dropWhile_eq","line":1086,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.dropWhile_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.dropWhile_eq\"><span class=\"name\">String</span>.<span class=\"name\">dropWhile_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.dropWhile\">dropWhile</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1083-L1084","name":"String.data_takeWhile","line":1083,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_takeWhile\"><span class=\"name\">String</span>.<span class=\"name\">data_takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.takeWhile\">takeWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1080-L1081","name":"String.takeWhile_eq","line":1080,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.takeWhile_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.takeWhile_eq\"><span class=\"name\">String</span>.<span class=\"name\">takeWhile_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.takeWhile\">takeWhile</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1078-L1078","name":"String.data_take","line":1078,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_take\"><span class=\"name\">String</span>.<span class=\"name\">data_take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.take\">take</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1075-L1076","name":"String.take_eq","line":1075,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.take_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.take_eq\"><span class=\"name\">String</span>.<span class=\"name\">take_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.take\">take</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1073-L1073","name":"String.drop_empty","line":1073,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.drop_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.drop_empty\"><span class=\"name\">String</span>.<span class=\"name\">drop_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.<a href=\"./Init/Data/String/Basic.html#String.drop\">drop</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1071-L1071","name":"String.data_drop","line":1071,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_drop\"><span class=\"name\">String</span>.<span class=\"name\">data_drop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.drop\">drop</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1068-L1069","name":"String.drop_eq","line":1068,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.drop_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.drop_eq\"><span class=\"name\">String</span>.<span class=\"name\">drop_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.drop\">drop</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1057-L1059","name":"Substring.Valid.data_dropWhile","line":1057,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">dropWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1054-L1055","name":"Substring.Valid.dropWhile","line":1054,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">dropWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1050-L1052","name":"Substring.Valid.data_takeWhile","line":1050,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">takeWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1047-L1048","name":"Substring.Valid.takeWhile","line":1047,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">takeWhile</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1044-L1045","name":"Substring.Valid.contains","line":1044,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.contains\">contains</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1041-L1042","name":"Substring.Valid.all","line":1041,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.all\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.all\">all</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.all\">all</a></span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1038-L1039","name":"Substring.Valid.any","line":1038,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.any\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.any\">any</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.any\">any</a></span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1035-L1036","name":"Substring.Valid.foldr","line":1035,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldr\">Substring.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1032-L1033","name":"Substring.Valid.foldl","line":1032,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldl\">Substring.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1023-L1030","name":"Substring.Valid.toString_extract","line":1023,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.toString_extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.toString_extract\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">toString_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.extract\">extract</a></span> <span class=\"fn\">b</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Data/String/Basic.html#String.extract\">extract</a></span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1015-L1021","name":"Substring.Valid.extract","line":1015,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.extract\">extract</a></span> <span class=\"fn\">b</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1012-L1013","name":"Substring.Valid.atEnd","line":1012,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.atEnd\">atEnd</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1007-L1008","name":"Substring.Valid.data_take","line":1007,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_take\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.take\">take</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1004-L1005","name":"Substring.Valid.take","line":1004,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.take\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.take\">take</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L1001-L1002","name":"Substring.Valid.data_drop","line":1001,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.data_drop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">data_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.drop\">drop</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L998-L999","name":"Substring.Valid.drop","line":998,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.drop\">drop</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L995-L996","name":"Substring.Valid.front","line":995,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.front\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">front</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m</span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.front\">front</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L989-L993","name":"Substring.Valid.prevn","line":989,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂ </span><span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.prevn\">prevn</a></span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m₁</span>)</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L983-L987","name":"Substring.Valid.nextn","line":983,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span> →\n    <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.nextn\">nextn</a></span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m₂</span>)</span></span> }</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L980-L981","name":"Substring.Valid.nextn_stop","line":980,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.nextn_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">nextn_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.nextn\">nextn</a></span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L974-L978","name":"Substring.Valid.prev","line":974,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.prev\">prev</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L971-L972","name":"Substring.Valid.next_stop","line":971,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.next_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.next_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.next\">next</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L965-L969","name":"Substring.Valid.next","line":965,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.next\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.next\">next</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L960-L963","name":"Substring.Valid.get","line":960,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.get\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.get\">get</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L957-L958","name":"Substring.Valid.isEmpty","line":957,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → (<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L954-L955","name":"Substring.Valid.bsize","line":954,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.bsize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.bsize\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">bsize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L951-L952","name":"String.valid_toSubstring","line":951,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.valid_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.valid_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">valid_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.toSubstring\">toSubstring</a></span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L948-L949","name":"Substring.Valid.valid","line":948,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.valid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L936-L946","name":"Substring.Valid.validFor","line":936,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.validFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.validFor\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">validFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">m</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L923-L928","name":"Substring.ValidFor.dropWhile","line":923,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.dropWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span>) <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.dropWhile\">dropWhile</a></span> <span class=\"fn\">p</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L916-L921","name":"Substring.ValidFor.takeWhile","line":916,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.takeWhile","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span> (<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.takeWhile\">takeWhile</a></span> <span class=\"fn\">p</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L913-L914","name":"Substring.ValidFor.contains","line":913,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.contains\">contains</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L910-L911","name":"Substring.ValidFor.all","line":910,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.all\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.all\">all</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Data/List/Basic.html#List.all\">all</a></span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L907-L908","name":"Substring.ValidFor.any","line":907,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.any","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.any\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.any\">any</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Data/List/Basic.html#List.any\">any</a></span> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L904-L905","name":"Substring.ValidFor.foldr","line":904,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldr\">Substring.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L901-L902","name":"Substring.ValidFor.foldl","line":901,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.foldl\">Substring.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L884-L897","name":"Substring.ValidFor.extract","line":884,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r </span><span class=\"fn\">ml </span><span class=\"fn\">mm </span><span class=\"fn\">mr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">ml</span> <span class=\"fn\">mm</span> <span class=\"fn\">mr</span> <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">b</span>, <span class=\"fn\">stopPos</span> := <span class=\"fn\">e</span> }</span></span> →\n    <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l'</span> <span class=\"fn\">mm</span> <span class=\"fn\">r'</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.extract\">extract</a></span> <span class=\"fn\">b</span> <span class=\"fn\">e</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L881-L882","name":"Substring.ValidFor.atEnd","line":881,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.atEnd\">atEnd</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L868-L877","name":"Substring.ValidFor.take","line":868,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.take","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.take\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">take</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span> (<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.take\">take</a></span> <span class=\"fn\">n</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L857-L866","name":"Substring.ValidFor.drop","line":857,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.drop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>) <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.drop\">drop</a></span> <span class=\"fn\">n</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L854-L855","name":"Substring.ValidFor.front","line":854,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.front","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.front\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">front</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.front\">front</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L843-L852","name":"Substring.ValidFor.prevn","line":843,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m₂ </span><span class=\"fn\">r </span><span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.prevn\">prevn</a></span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">m₁</span>)</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L831-L841","name":"Substring.ValidFor.nextn","line":831,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m₁ </span><span class=\"fn\">m₂ </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> →\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.nextn\">nextn</a></span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">m₂</span>)</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L827-L829","name":"Substring.ValidFor.nextn_stop","line":827,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.nextn_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.nextn\">nextn</a></span> <span class=\"fn\">n</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L817-L825","name":"Substring.ValidFor.prev","line":817,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂ </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.prev\">prev</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L814-L815","name":"Substring.ValidFor.next_stop","line":814,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next_stop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next_stop\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next_stop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.next\">next</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L802-L812","name":"Substring.ValidFor.next","line":802,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.next\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂ </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.next\">next</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L799-L800","name":"Substring.ValidFor.get","line":799,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.get\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₂ </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">m₂</span>) <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.get\">get</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m₁</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L794-L797","name":"Substring.ValidFor.toIterator","line":794,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toIterator\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">String.Iterator.ValidFor</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>) <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toIterator\">toIterator</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L791-L792","name":"Substring.ValidFor.toString","line":791,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.toString\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L788-L789","name":"Substring.ValidFor.isEmpty","line":788,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → (<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L785-L786","name":"Substring.ValidFor.bsize","line":785,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.bsize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.bsize\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">bsize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L782-L783","name":"Substring.ValidFor.stopPos","line":782,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.stopPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.stopPos\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">stopPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L779-L780","name":"Substring.ValidFor.startPos","line":779,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.startPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.startPos\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">startPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L776-L777","name":"Substring.ValidFor.str","line":776,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.str\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">str</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L773-L774","name":"String.validFor_toSubstring","line":773,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.validFor_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.validFor_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">validFor_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">Substring.ValidFor</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.toSubstring\">toSubstring</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L766-L771","name":"Substring.ValidFor.of_eq","line":766,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.of_eq\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span>.<a href=\"./Init/Prelude.html#String.Pos.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span>.<a href=\"./Init/Prelude.html#String.Pos.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L763-L764","name":"Substring.ValidFor.valid","line":763,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.valid\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L758-L759","name":"Substring.ValidFor.mk","line":758,"kind":"ctor","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.mk","doc":"The constructor for `ValidFor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor.mk\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">m</span> <span class=\"fn\">r</span>\n  <span class=\"fn\">{ <span class=\"fn\">str</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span>, <span class=\"fn\">startPos</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> }</span>,\n    <span class=\"fn\">stopPos</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">String.utf8Len</a> <span class=\"fn\">m</span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L755-L759","name":"Substring.ValidFor","line":755,"kind":"inductive","docLink":"./Batteries/Data/String/Lemmas.html#Substring.ValidFor","doc":"A substring is represented by three lists `l m r`, where `m` is the middle section\n(the actual substring) and `l ++ m ++ r` is the underlying string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.ValidFor\"><span class=\"name\">Substring</span>.<span class=\"name\">ValidFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L753-L753","name":"Substring.Valid_default","line":753,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid_default\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid_default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited.default\">default</a>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L751-L751","name":"Substring.Valid.le","line":751,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.le","doc":"The stop position of a substring is at least the start. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.le\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L749-L749","name":"Substring.Valid.stopValid","line":749,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.stopValid","doc":"The stop position of a valid substring is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.stopValid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">stopValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L747-L747","name":"Substring.Valid.startValid","line":747,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.startValid","doc":"The start position of a valid substring is valid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.startValid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">startValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L745-L745","name":"Substring.Valid.mk","line":745,"kind":"ctor","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid.mk\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startValid</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopValid</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">String.Pos.Valid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.str\">str</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.startPos\">startPos</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.stopPos\">stopPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L744-L751","name":"Substring.Valid","line":744,"kind":"structure","docLink":"./Batteries/Data/String/Lemmas.html#Substring.Valid","doc":"Validity for a substring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#Substring.Valid\"><span class=\"name\">Substring</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L725-L736","name":"String.takeWhileAux_of_valid","line":725,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.takeWhileAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.takeWhileAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">takeWhileAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#Substring.takeWhileAux\">Substring.takeWhileAux</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> }</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L718-L719","name":"String.map_eq","line":718,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.map_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.map_eq\"><span class=\"name\">String</span>.<span class=\"name\">map_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L708-L716","name":"String.mapAux_of_valid","line":708,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.mapAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.mapAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">mapAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.mapAux\">mapAux</a> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">r</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L705-L706","name":"String.contains_iff","line":705,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.contains_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.contains_iff\"><span class=\"name\">String</span>.<span class=\"name\">contains_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.contains\">contains</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L703-L703","name":"String.all_iff","line":703,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.all_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.all_iff\"><span class=\"name\">String</span>.<span class=\"name\">all_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.all\">all</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>), <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L700-L701","name":"String.all_eq","line":700,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.all_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.all_eq\"><span class=\"name\">String</span>.<span class=\"name\">all_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.all\">all</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.all\">all</a></span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L698-L698","name":"String.any_iff","line":698,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.any_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.any_iff\"><span class=\"name\">String</span>.<span class=\"name\">any_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.any\">any</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Char\">Char</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L695-L696","name":"String.any_eq","line":695,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.any_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.any_eq\"><span class=\"name\">String</span>.<span class=\"name\">any_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.any\">any</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.any\">any</a></span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L682-L693","name":"String.anyAux_of_valid","line":682,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.anyAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.anyAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">anyAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.anyAux\">anyAux</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> }</span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Data/List/Basic.html#List.any\">any</a></span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L679-L680","name":"String.foldr_eq","line":679,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldr_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldr_eq\"><span class=\"name\">String</span>.<span class=\"name\">foldr_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L668-L677","name":"String.foldrAux_of_valid","line":668,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldrAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldrAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">foldrAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldrAux\">foldrAux</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L665-L666","name":"String.foldl_eq","line":665,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldl_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldl_eq\"><span class=\"name\">String</span>.<span class=\"name\">foldl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L654-L663","name":"String.foldlAux_of_valid","line":654,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.foldlAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.foldlAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">foldlAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.foldlAux\">foldlAux</a> <span class=\"fn\">f</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L651-L652","name":"String.offsetOfPos_of_valid","line":651,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.offsetOfPos_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.offsetOfPos_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPos_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.offsetOfPos\">offsetOfPos</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L639-L649","name":"String.offsetOfPosAux_of_valid","line":639,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.offsetOfPosAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.offsetOfPosAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPosAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.offsetOfPosAux\">offsetOfPosAux</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L632-L634","name":"String.Iterator.Valid.prevn","line":632,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\">prevn</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L628-L630","name":"String.Iterator.Valid.remainingToString","line":628,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\">remainingToString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">r</span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L626-L626","name":"String.Iterator.Valid.toEnd","line":626,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.toEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">toEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">toEnd</a></span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L621-L624","name":"String.Iterator.Valid.setCurr","line":621,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.setCurr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">setCurr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">setCurr</a></span> <span class=\"fn\">c</span>)</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L615-L619","name":"String.Iterator.Valid.prev","line":615,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">prev</a></span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L609-L613","name":"String.Iterator.Valid.next","line":609,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">next</a></span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L606-L607","name":"String.Iterator.Valid.remainingBytes_le","line":606,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingBytes_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.remainingBytes_le\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">remainingBytes_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\">remainingBytes</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L604-L604","name":"String.valid_mkIterator","line":604,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.valid_mkIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.valid_mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">valid_mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.mkIterator\">mkIterator</a></span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L600-L602","name":"String.Iterator.Valid.validFor","line":600,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.validFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid.validFor\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span>.<span class=\"name\">validFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">r</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L588-L594","name":"String.Iterator.ValidFor.prevn","line":588,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prevn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span>)</span> (<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\">prevn</a></span> <span class=\"fn\">n</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L580-L586","name":"String.Iterator.ValidFor.nextn","line":580,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> (<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">n</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>) <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">n</span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\">nextn</a></span> <span class=\"fn\">n</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L576-L578","name":"String.Iterator.ValidFor.remainingToString","line":576,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\">remainingToString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">r</span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L567-L574","name":"String.Iterator.ValidFor.extract","line":567,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.extract","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.extract\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it₁ </span><span class=\"fn\">it₂</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span>) <span class=\"fn\">it₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> (<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>) <span class=\"fn\">r</span> <span class=\"fn\">it₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it₁</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.extract\">extract</a></span> <span class=\"fn\">it₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L563-L565","name":"String.Iterator.ValidFor.toEnd'","line":563,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toEnd'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">toEnd</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L559-L561","name":"String.Iterator.ValidFor.toEnd","line":559,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> (<span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>) <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\">toEnd</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L556-L557","name":"String.Iterator.ValidFor.setCurr","line":556,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">setCurr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>) <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">setCurr</a></span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L547-L554","name":"String.Iterator.ValidFor.setCurr'","line":547,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.setCurr'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">setCurr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c</span>)</span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\">setCurr</a></span> <span class=\"fn\">c</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L544-L545","name":"String.Iterator.ValidFor.hasPrev","line":544,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasPrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasPrev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">hasPrev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → (<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasPrev\">hasPrev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L541-L542","name":"String.Iterator.ValidFor.hasNext","line":541,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasNext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">hasNext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → (<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L535-L539","name":"String.Iterator.ValidFor.atEnd","line":535,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.atEnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → (<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.atEnd\">atEnd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L529-L533","name":"String.Iterator.ValidFor.prev_nil","line":529,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev_nil\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">prev</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L520-L527","name":"String.Iterator.ValidFor.prev","line":520,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>) <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>) <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.prev\">prev</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L514-L518","name":"String.Iterator.ValidFor.next","line":514,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">r</span>) <span class=\"fn\">it</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>) <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">next</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L511-L512","name":"String.Iterator.ValidFor.curr","line":511,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.curr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.curr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">curr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.curr\">curr</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L507-L509","name":"String.Iterator.ValidFor.pos_eq_endPos","line":507,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos_eq_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.i\">i</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L504-L505","name":"String.Iterator.ValidFor.pos_eq_zero","line":504,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.i\">i</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L501-L502","name":"String.Iterator.ValidFor.pos","line":501,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.pos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.i\">i</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L498-L499","name":"String.Iterator.ValidFor.toString","line":498,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.toString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\">r</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L495-L496","name":"String.Iterator.ValidFor.remainingBytes","line":495,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingBytes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.remainingBytes\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">remainingBytes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\">remainingBytes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L493-L493","name":"String.validFor_mkIterator","line":493,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.validFor_mkIterator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.validFor_mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">validFor_mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">Iterator.ValidFor</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.mkIterator\">mkIterator</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L490-L491","name":"String.Iterator.ValidFor.of_eq","line":490,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.of_eq\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\">r</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.i\">i</a></span>.<a href=\"./Init/Prelude.html#String.Pos.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L487-L488","name":"String.Iterator.ValidFor.mk'","line":487,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L484-L485","name":"String.Iterator.ValidFor.out'","line":484,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">out'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">it</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L481-L482","name":"String.Iterator.ValidFor.out","line":481,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.out\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\">it</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L478-L479","name":"String.Iterator.ValidFor.valid","line":478,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.valid\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">it</span></span> → <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\">Valid</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L471-L472","name":"String.Iterator.ValidFor.mk","line":471,"kind":"ctor","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk","doc":"The canonical constructor for `ValidFor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor.mk\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\">ValidFor</a> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\">r</span></span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L468-L472","name":"String.Iterator.ValidFor","line":468,"kind":"inductive","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor","doc":"`it.ValidFor l r` means that `it` is a string iterator whose underlying string is\n`l.reverse ++ r`, and where the cursor is pointing at the end of `l.reverse`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.ValidFor\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">ValidFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L465-L466","name":"String.Iterator.Valid","line":465,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid","doc":"Validity for a string iterator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.Valid\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L461-L463","name":"String.Iterator.hasNext_cons_addChar","line":461,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.hasNext_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.hasNext_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasNext_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L458-L459","name":"String.Iterator.forward_eq_nextn","line":458,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Iterator.forward_eq_nextn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Iterator.forward_eq_nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">forward_eq_nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator.forward\">forward</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\">nextn</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L453-L454","name":"String.data_join","line":453,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.data_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.data_join\"><span class=\"name\">String</span>.<span class=\"name\">data_join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.join\">join</a> <span class=\"fn\">ss</span>)</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">data</a> <span class=\"fn\">ss</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L449-L451","name":"String.join_eq.go","line":449,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.join_eq.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.join_eq.go\"><span class=\"name\">String</span>.<span class=\"name\">join_eq</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#String\">String</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span> <span class=\"fn\">ss</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">data</a> <span class=\"fn\">ss</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L448-L451","name":"String.join_eq","line":448,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.join_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.join_eq\"><span class=\"name\">String</span>.<span class=\"name\">join_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.join\">join</a> <span class=\"fn\">ss</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.data\">data</a> <span class=\"fn\">ss</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L443-L444","name":"String.toString_toSubstring","line":443,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.toString_toSubstring","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.toString_toSubstring\"><span class=\"name\">String</span>.<span class=\"name\">toString_toSubstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.toSubstring\">toSubstring</a></span>.<a href=\"./Init/Data/String/Basic.html#Substring.toString\">toString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L438-L439","name":"String.split_of_valid","line":438,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.split_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.split_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">split_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.split\">split</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.mk\">mk</a> <span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.splitOnP\">List.splitOnP</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L416-L436","name":"String.splitAux_of_valid","line":416,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.splitAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.splitAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">splitAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.splitAux\">splitAux</a></span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> }</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#String.mk\">mk</a> <span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.splitOnP.go\">List.splitOnP.go</a> <span class=\"fn\">p</span> <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L408-L414","name":"String.extract_of_valid","line":408,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">extract_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.extract\">extract</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">m</span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L400-L406","name":"String.extract_zero_endPos","line":400,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract_zero_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract_zero_endPos\"><span class=\"name\">String</span>.<span class=\"name\">extract_zero_endPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.extract\">extract</a></span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L395-L398","name":"String.extract_cons_addChar","line":395,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">extract_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.extract\">extract</a></span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) (<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.extract\">extract</a></span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L391-L393","name":"String.extract.go₁_zero_utf8Len","line":391,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_zero_utf8Len","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_zero_utf8Len\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_zero_utf8Len</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">s</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L383-L389","name":"String.extract.go₁_append_right","line":383,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_append_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_append_right\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_append_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>) <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">go₂</a> <span class=\"fn\">t</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L377-L381","name":"String.extract.go₁_cons_addChar","line":377,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>) <span class=\"fn\">0</span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) (<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> <span class=\"fn\">cs</span> <span class=\"fn\">0</span> <span class=\"fn\">b</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L364-L375","name":"String.extract.go₁_add_right_cancel","line":364,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₁_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₁_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">b </span><span class=\"fn\">e </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₁\">go₁</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">b</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L356-L362","name":"String.extract.go₂_append_left","line":356,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₂_append_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₂_append_left\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂_append_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">go₂</a> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>) <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L345-L354","name":"String.extract.go₂_add_right_cancel","line":345,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.extract.go₂_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.extract.go₂_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">e </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">go₂</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.extract.go₂\">go₂</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">e</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L340-L343","name":"String.firstDiffPos_eq","line":340,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_eq\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/String/Basic.html#String.firstDiffPos\">firstDiffPos</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.takeWhile₂\">List.takeWhile₂</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L310-L338","name":"String.firstDiffPos_loop_eq","line":310,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_loop_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.firstDiffPos_loop_eq\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos_loop_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂ </span><span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl₁</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl₂</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hstop</span> : <span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> (<span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">r₁</span></span>) (<span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">r₂</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.firstDiffPos.loop\">firstDiffPos.loop</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r₂</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">stop</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.takeWhile₂\">List.takeWhile₂</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span>)</span>)</span> <span class=\"fn\">r₁</span> <span class=\"fn\">r₂</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L306-L308","name":"String.revFind_of_valid","line":306,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revFind_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revFind_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">revFind_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.revFind\">revFind</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">x</span></span> }</span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.tail?\">tail?</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L292-L304","name":"String.revFindAux_of_valid","line":292,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revFindAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revFindAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">revFindAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.revFindAux\">revFindAux</a></span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">x</span></span> }</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.dropWhile\">List.dropWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.tail?\">tail?</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L289-L290","name":"String.find_of_valid","line":289,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.find_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.find_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">find_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.find\">find</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>)</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L269-L287","name":"String.findAux_of_valid","line":269,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.findAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.findAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">findAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">r</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.findAux\">findAux</a></span> <span class=\"fn\">p</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">m</span></span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.takeWhile\">List.takeWhile</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">m</span>)</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L267-L267","name":"String.revPosOf_eq","line":267,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revPosOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revPosOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">revPosOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.revPosOf\">revPosOf</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.revFind\">revFind</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L264-L264","name":"String.revPosOfAux_eq","line":264,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.revPosOfAux_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.revPosOfAux_eq\"><span class=\"name\">String</span>.<span class=\"name\">revPosOfAux_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.revPosOfAux\">revPosOfAux</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.revFindAux\">revFindAux</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L261-L261","name":"String.posOf_eq","line":261,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.posOf_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.posOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">posOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.posOf\">posOf</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.find\">find</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L258-L258","name":"String.posOfAux_eq","line":258,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.posOfAux_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.posOfAux_eq\"><span class=\"name\">String</span>.<span class=\"name\">posOfAux_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.posOfAux\">posOfAux</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.findAux\">findAux</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L252-L255","name":"String.atEnd_of_valid","line":252,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.atEnd_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.atEnd_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">atEnd_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.atEnd\">atEnd</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">cs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L247-L250","name":"String.back_eq","line":247,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.back_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.back_eq\"><span class=\"name\">String</span>.<span class=\"name\">back_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.back\">back</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.getLastD\">getLastD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L244-L245","name":"String.front_eq","line":244,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.front_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.front_eq\"><span class=\"name\">String</span>.<span class=\"name\">front_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.front\">front</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L238-L242","name":"String.prev_of_valid'","line":238,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.prev_of_valid'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.prev_of_valid'\"><span class=\"name\">String</span>.<span class=\"name\">prev_of_valid'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.prev\">prev</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">cs</span>.<a href=\"./Init/Data/List/Basic.html#List.dropLast\">dropLast</a></span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L232-L236","name":"String.prev_of_valid","line":232,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.prev_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.prev_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">prev_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.prev\">prev</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L217-L230","name":"String.utf8PrevAux_of_valid","line":217,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8PrevAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8PrevAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8PrevAux_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8PrevAux\">utf8PrevAux</a> (<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span>) <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L210-L215","name":"String.valid_next","line":210,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.valid_next","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.valid_next\"><span class=\"name\">String</span>.<span class=\"name\">valid_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Pos.Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.next\">next</a></span> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L207-L208","name":"String.atEnd_iff","line":207,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.atEnd_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.atEnd_iff\"><span class=\"name\">String</span>.<span class=\"name\">atEnd_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.atEnd\">atEnd</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L204-L205","name":"String.next_of_valid","line":204,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.next_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.next_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">next_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs'</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.next\">next</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L200-L202","name":"String.next_of_valid'","line":200,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.next_of_valid'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.next_of_valid'\"><span class=\"name\">String</span>.<span class=\"name\">next_of_valid'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.next\">next</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs'</span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a>)</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L196-L198","name":"String.modify_of_valid","line":196,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.modify_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.modify_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">modify_of_valid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.modify\">modify</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">f</span> <span class=\"fn\">cs'</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L192-L194","name":"String.set_of_valid","line":192,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.set_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.set_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">set_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c'</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.set\">set</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span> <span class=\"fn\">c'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c'</span>)</span> <span class=\"fn\">cs'</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L180-L190","name":"String.utf8SetAux_of_valid","line":180,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8SetAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8SetAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8SetAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c'</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8SetAux\">utf8SetAux</a> <span class=\"fn\">c'</span> (<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span>) <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.modifyHead\">List.modifyHead</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\">c'</span>)</span> <span class=\"fn\">cs'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L177-L178","name":"String.get?_of_valid","line":177,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.get?_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.get?_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">get?_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.get?\">get?</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs'</span>.<a href=\"./Init/Data/List/Basic.html#List.head?\">head?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L165-L175","name":"String.utf8GetAux?_of_valid","line":165,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux?_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux?_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux?_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux?\">utf8GetAux?</a> (<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span>) <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">cs'</span>.<a href=\"./Init/Data/List/Basic.html#List.head?\">head?</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L161-L163","name":"String.get_cons_addChar","line":161,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.get_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.get_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">get_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.get\">get</a></span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L158-L159","name":"String.get_of_valid","line":158,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.get_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.get_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">get_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.get\">get</a></span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cs'</span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L146-L156","name":"String.utf8GetAux_of_valid","line":146,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_of_valid","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_of_valid\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_of_valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">utf8GetAux</a> (<span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span>) <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cs'</span>.<a href=\"./Init/Data/List/Basic.html#List.headD\">headD</a></span> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L143-L144","name":"String.utf8GetAux_addChar_right_cancel","line":143,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_addChar_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_addChar_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_addChar_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">utf8GetAux</a> <span class=\"fn\">s</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L132-L141","name":"String.utf8GetAux_add_right_cancel","line":132,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_add_right_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8GetAux_add_right_cancel\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux_add_right_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">p </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.utf8GetAux\">utf8GetAux</a> <span class=\"fn\">s</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L115-L130","name":"String.utf8InductionOn","line":115,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8InductionOn","doc":"Induction along the valid positions in a list of characters.\n(This definition is intended only for specification purposes.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8InductionOn\"><span class=\"name\">String</span>.<span class=\"name\">utf8InductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos\">Pos</a> → <a href=\"./foundational_types.html\">Sort</a> u</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) → <span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>) <span class=\"fn\">p</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ind</span> : <span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) → <span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>) → <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">cs</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>) <span class=\"fn\">i</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L112-L113","name":"String.isEmpty_iff","line":112,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.isEmpty_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.isEmpty_iff\"><span class=\"name\">String</span>.<span class=\"name\">isEmpty_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L109-L110","name":"String.endPos_eq_zero","line":109,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.endPos_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.endPos_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L104-L105","name":"String.Pos.Valid.le_endPos","line":104,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.le_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.le_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span>.<span class=\"name\">le_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> → <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L102-L102","name":"String.Pos.Valid.mk","line":102,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid.mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs </span><span class=\"fn\">cs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Valid</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs'</span> }</span> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L100-L100","name":"String.Pos.valid_endPos","line":100,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.valid_endPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.valid_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">valid_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Valid</a> <span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L98-L98","name":"String.Pos.valid_zero","line":98,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.valid_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.valid_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">valid_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\">Valid</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L94-L96","name":"String.Pos.Valid","line":94,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.Valid","doc":"A string position is valid if it is equal to the UTF-8 length of an initial substring of `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.Valid\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Valid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L89-L89","name":"String.Pos.lt_addChar","line":89,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.Pos.lt_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.Pos.lt_addChar\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">lt_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L82-L82","name":"String.endPos_eq","line":82,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.endPos_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.endPos_eq\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L78-L79","name":"String.utf8Len_le_of_prefix","line":78,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_prefix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">cs₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">cs₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L75-L76","name":"String.utf8Len_le_of_suffix","line":75,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_suffix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">cs₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">cs₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L72-L73","name":"String.utf8Len_le_of_infix","line":72,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_infix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_infix\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_infix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">cs₁</span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">cs₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L67-L70","name":"String.utf8Len_le_of_sublist","line":67,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_sublist","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_le_of_sublist\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_le_of_sublist</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cs₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">cs₂</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L62-L63","name":"String.utf8Len_eq_zero","line":62,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_eq_zero\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L60-L60","name":"String.utf8Len_reverse","line":60,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverse\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_reverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\"><span class=\"fn\">cs</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L56-L58","name":"String.utf8Len_reverseAux","line":56,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverseAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_reverseAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_reverseAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">cs₁</span>.<a href=\"./Init/Data/List/Basic.html#List.reverseAux\">reverseAux</a></span> <span class=\"fn\">cs₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L53-L54","name":"String.utf8Len_append","line":53,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_append\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> (<span class=\"fn\">cs₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cs₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L51-L51","name":"String.utf8Len_cons","line":51,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_cons\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L49-L49","name":"String.utf8Len_nil","line":49,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len_nil\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L47-L47","name":"String.utf8ByteSize_mk","line":47,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize_mk\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs</span> }</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a> <span class=\"fn\">cs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L45-L45","name":"String.utf8ByteSize.go_eq","line":45,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize.go_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8ByteSize.go_eq\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize</span>.<span class=\"name\">go_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.utf8ByteSize.go\">go</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\">utf8Len</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L42-L43","name":"String.utf8Len","line":42,"kind":"def","docLink":"./Batteries/Data/String/Lemmas.html#String.utf8Len","doc":"The UTF-8 byte length of a list of characters. (This is intended for specification purposes.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.utf8Len\"><span class=\"name\">String</span>.<span class=\"name\">utf8Len</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L29-L29","name":"String.mk_length","line":29,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.mk_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.mk_length\"><span class=\"name\">String</span>.<span class=\"name\">mk_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">s</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L27-L27","name":"String.instBEqOrd","line":27,"kind":"instance","docLink":"./Batteries/Data/String/Lemmas.html#String.instBEqOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.instBEqOrd\"><span class=\"name\">String</span>.<span class=\"name\">instBEqOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.BEqOrd\">Batteries.BEqOrd</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L24-L25","name":"String.instLTOrd","line":24,"kind":"instance","docLink":"./Batteries/Data/String/Lemmas.html#String.instLTOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.instLTOrd\"><span class=\"name\">String</span>.<span class=\"name\">instLTOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.LTOrd\">Batteries.LTOrd</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L21-L22","name":"String.instTransOrd","line":21,"kind":"instance","docLink":"./Batteries/Data/String/Lemmas.html#String.instTransOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.instTransOrd\"><span class=\"name\">String</span>.<span class=\"name\">instTransOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Classes/Order.html#Batteries.TransOrd\">Batteries.TransOrd</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/613510345e4d4b3ce3d8c129595e7241990d5b39/Batteries/Data/String/Lemmas.lean#L17-L19","name":"String.lt_antisymm","line":17,"kind":"theorem","docLink":"./Batteries/Data/String/Lemmas.html#String.lt_antisymm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/String/Lemmas.html#String.lt_antisymm\"><span class=\"name\">String</span>.<span class=\"name\">lt_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></div></div>"}]}