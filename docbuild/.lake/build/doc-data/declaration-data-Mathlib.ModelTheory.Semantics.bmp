{"name":"Mathlib.ModelTheory.Semantics","instances":[{"typeNames":["EmptyCollection.emptyCollection"],"name":"FirstOrder.Language.model_empty","className":"FirstOrder.Language.Theory.Model"},{"typeNames":["FirstOrder.Language.completeTheory"],"name":"FirstOrder.Language.model_completeTheory","className":"FirstOrder.Language.Theory.Model"},{"typeNames":["FirstOrder.Language.infiniteTheory"],"name":"FirstOrder.Language.model_infiniteTheory","className":"FirstOrder.Language.Theory.Model"},{"typeNames":["FirstOrder.Language.nonemptyTheory"],"name":"FirstOrder.Language.model_nonempty","className":"FirstOrder.Language.Theory.Model"}],"imports":["Init","Mathlib.Data.Finset.Basic","Mathlib.ModelTheory.Syntax","Mathlib.Data.List.ProdSigma"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1045-L1046","name":"FirstOrder.Language.ElementarilyEquivalent.infinite","line":1045,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.infinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.infinite\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span>.<span class=\"name\">infinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">Mi</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1042-L1043","name":"FirstOrder.Language.ElementarilyEquivalent.infinite_iff","line":1042,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.infinite_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.infinite_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span>.<span class=\"name\">infinite_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1039-L1040","name":"FirstOrder.Language.ElementarilyEquivalent.nonempty","line":1039,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.nonempty\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span>.<span class=\"name\">nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">Mn</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1036-L1037","name":"FirstOrder.Language.ElementarilyEquivalent.nonempty_iff","line":1036,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.nonempty_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.nonempty_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span>.<span class=\"name\">nonempty_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">M</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1033-L1034","name":"FirstOrder.Language.ElementarilyEquivalent.theory_model","line":1033,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.theory_model","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.theory_model\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span>.<span class=\"name\">theory_model</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">MT</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">N</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1029-L1031","name":"FirstOrder.Language.ElementarilyEquivalent.theory_model_iff","line":1029,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.theory_model_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.theory_model_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span>.<span class=\"name\">theory_model_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">N</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1026-L1027","name":"FirstOrder.Language.ElementarilyEquivalent.realize_sentence","line":1026,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.realize_sentence","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.realize_sentence\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span>.<span class=\"name\">realize_sentence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">N</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1023-L1024","name":"FirstOrder.Language.ElementarilyEquivalent.completeTheory_eq","line":1023,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.completeTheory_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.completeTheory_eq\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span>.<span class=\"name\">completeTheory_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.completeTheory\">completeTheory</a></span> <span class=\"fn\">M</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.completeTheory\">completeTheory</a></span> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1019-L1021","name":"FirstOrder.Language.ElementarilyEquivalent.trans","line":1019,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.trans\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">MN</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">NP</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">N</span> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1015-L1017","name":"FirstOrder.Language.ElementarilyEquivalent.symm","line":1015,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent.symm\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">N</span> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L1007-L1009","name":"FirstOrder.Language.card_le_of_model_distinctConstantsTheory","line":1007,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.card_le_of_model_distinctConstantsTheory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.card_le_of_model_distinctConstantsTheory\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">card_le_of_model_distinctConstantsTheory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.distinctConstantsTheory\">distinctConstantsTheory</a></span> <span class=\"fn\">s</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.lift\">Cardinal.lift.{w, u'}</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.lift\">Cardinal.lift.{u', w}</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">M</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L993-L1005","name":"FirstOrder.Language.model_distinctConstantsTheory","line":993,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_distinctConstantsTheory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_distinctConstantsTheory\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">model_distinctConstantsTheory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.distinctConstantsTheory\">distinctConstantsTheory</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.InjOn\">Set.InjOn</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.con\">con</a></span> <span class=\"fn\">i</span>)</span></span>)</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L990-L991","name":"FirstOrder.Language.model_nonempty","line":990,"kind":"instance","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_nonempty\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">model_nonempty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.nonemptyTheory\">nonemptyTheory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L985-L988","name":"FirstOrder.Language.model_nonemptyTheory_iff","line":985,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_nonemptyTheory_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_nonemptyTheory_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">model_nonemptyTheory_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.nonemptyTheory\">nonemptyTheory</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L982-L983","name":"FirstOrder.Language.model_infiniteTheory","line":982,"kind":"instance","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_infiniteTheory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_infiniteTheory\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">model_infiniteTheory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.infiniteTheory\">infiniteTheory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L978-L980","name":"FirstOrder.Language.model_infiniteTheory_iff","line":978,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_infiniteTheory_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_infiniteTheory_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">model_infiniteTheory_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.infiniteTheory\">infiniteTheory</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Infinite\">Infinite</a> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L960-L976","name":"FirstOrder.Language.Sentence.realize_cardGe","line":960,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.realize_cardGe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.realize_cardGe\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Sentence</span>.<span class=\"name\">realize_cardGe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence.cardGe\">Sentence.cardGe</a> <span class=\"fn\">L</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L950-L953","name":"FirstOrder.Language.Relations.realize_total","line":950,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_total","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_total\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Relations</span>.<span class=\"name\">realize_total</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.total\">total</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Total\">Total</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">M</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">r</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\">x</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">,</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L944-L948","name":"FirstOrder.Language.Relations.realize_transitive","line":944,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_transitive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_transitive\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Relations</span>.<span class=\"name\">realize_transitive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.transitive\">transitive</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Transitive\">Transitive</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">M</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">r</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\">x</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">,</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L938-L942","name":"FirstOrder.Language.Relations.realize_antisymmetric","line":938,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_antisymmetric","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_antisymmetric\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Relations</span>.<span class=\"name\">realize_antisymmetric</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.antisymmetric\">antisymmetric</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#AntiSymmetric\">AntiSymmetric</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">M</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">r</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\">x</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">,</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L934-L936","name":"FirstOrder.Language.Relations.realize_symmetric","line":934,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_symmetric","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_symmetric\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Relations</span>.<span class=\"name\">realize_symmetric</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.symmetric\">symmetric</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Symmetric\">Symmetric</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">M</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">r</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\">x</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">,</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L930-L932","name":"FirstOrder.Language.Relations.realize_irreflexive","line":930,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_irreflexive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_irreflexive\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Relations</span>.<span class=\"name\">realize_irreflexive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.irreflexive\">irreflexive</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Irreflexive\">Irreflexive</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">M</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">r</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\">x</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">,</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L926-L928","name":"FirstOrder.Language.Relations.realize_reflexive","line":926,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_reflexive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Relations.realize_reflexive\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Relations</span>.<span class=\"name\">realize_reflexive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.reflexive\">reflexive</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Reflexive\">Reflexive</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\">M</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">r</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\">x</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">,</a> <span class=\"fn\">y</span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L915-L916","name":"FirstOrder.Language.StrongHomClass.elementarilyEquivalent","line":915,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.StrongHomClass.elementarilyEquivalent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.StrongHomClass.elementarilyEquivalent\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">StrongHomClass</span>.<span class=\"name\">elementarilyEquivalent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Equiv.html#EquivLike\">EquivLike</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.StrongHomClass\">StrongHomClass</a></span> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L912-L913","name":"FirstOrder.Language.StrongHomClass.theory_model","line":912,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.StrongHomClass.theory_model","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.StrongHomClass.theory_model\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">StrongHomClass</span>.<span class=\"name\">theory_model</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Equiv.html#EquivLike\">EquivLike</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.StrongHomClass\">StrongHomClass</a></span> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">N</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L908-L910","name":"FirstOrder.Language.StrongHomClass.realize_sentence","line":908,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.StrongHomClass.realize_sentence","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.StrongHomClass.realize_sentence\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">StrongHomClass</span>.<span class=\"name\">realize_sentence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Equiv.html#EquivLike\">EquivLike</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.StrongHomClass\">StrongHomClass</a></span> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">N</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L900-L904","name":"FirstOrder.Language.StrongHomClass.realize_formula","line":900,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.StrongHomClass.realize_formula","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.StrongHomClass.realize_formula\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">StrongHomClass</span>.<span class=\"name\">realize_formula</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Equiv.html#EquivLike\">EquivLike</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.StrongHomClass\">StrongHomClass</a></span> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> (<span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">v</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L876-L898","name":"FirstOrder.Language.StrongHomClass.realize_boundedFormula","line":876,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.StrongHomClass.realize_boundedFormula","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.StrongHomClass.realize_boundedFormula\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">StrongHomClass</span>.<span class=\"name\">realize_boundedFormula</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Equiv.html#EquivLike\">EquivLike</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.StrongHomClass\">StrongHomClass</a></span> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> (<span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">v</span>) (<span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L864-L868","name":"FirstOrder.Language.BoundedFormula.realize_iExsUnique","line":864,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iExsUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iExsUnique\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_iExsUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.iExsUnique\">Formula.iExsUnique</a> <span class=\"fn\">γ</span> <span class=\"fn\">φ</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">i</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">M</span></span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L851-L862","name":"FirstOrder.Language.Formula.realize_iExsUnique","line":851,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_iExsUnique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_iExsUnique\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_iExsUnique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.iExsUnique\">iExsUnique</a> <span class=\"fn\">γ</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">i</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">M</span></span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L844-L849","name":"FirstOrder.Language.BoundedFormula.realize_iInf","line":844,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iInf\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_iInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.iInf\">iInf</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L837-L842","name":"FirstOrder.Language.BoundedFormula.realize_iSup","line":837,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iSup\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_iSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.iSup\">iSup</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L807-L835","name":"FirstOrder.Language.BoundedFormula.realize_toFormula","line":807,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_toFormula","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_toFormula\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_toFormula</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.toFormula\">toFormula</a></span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a>) (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L801-L805","name":"FirstOrder.Language.BoundedFormula.realize_iExs","line":801,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iExs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iExs\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_iExs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.iExs\">Formula.iExs</a> <span class=\"fn\">γ</span> <span class=\"fn\">φ</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">M</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L783-L799","name":"FirstOrder.Language.Formula.realize_iExs","line":783,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_iExs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_iExs\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_iExs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.iExs\">iExs</a> <span class=\"fn\">γ</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">M</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L777-L781","name":"FirstOrder.Language.BoundedFormula.realize_iAlls","line":777,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iAlls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iAlls\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_iAlls</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.iAlls\">Formula.iAlls</a> <span class=\"fn\">β</span> <span class=\"fn\">φ</span>)</span> <span class=\"fn\">v</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L759-L775","name":"FirstOrder.Language.Formula.realize_iAlls","line":759,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_iAlls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_iAlls\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_iAlls</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.iAlls\">iAlls</a> <span class=\"fn\">β</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">i</span> <span class=\"fn\">a</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L746-L757","name":"FirstOrder.Language.BoundedFormula.realize_exs","line":746,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_exs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_exs\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_exs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.exs\">exs</a></span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L738-L744","name":"FirstOrder.Language.BoundedFormula.realize_alls","line":738,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_alls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_alls\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_alls</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.alls\">alls</a></span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L727-L732","name":"FirstOrder.Language.realize_iff_of_model_completeTheory","line":727,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.realize_iff_of_model_completeTheory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.realize_iff_of_model_completeTheory\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">realize_iff_of_model_completeTheory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">N</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.completeTheory\">completeTheory</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">N</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L722-L723","name":"FirstOrder.Language.model_completeTheory","line":722,"kind":"instance","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_completeTheory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_completeTheory\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">model_completeTheory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.completeTheory\">completeTheory</a></span> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L717-L718","name":"FirstOrder.Language.Theory.completeTheory.subset","line":717,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.completeTheory.subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.completeTheory.subset\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">completeTheory</span>.<span class=\"name\">subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">MT</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">T</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.completeTheory\">completeTheory</a></span> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L714-L715","name":"FirstOrder.Language.Theory.model_iff_subset_completeTheory","line":714,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.model_iff_subset_completeTheory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.model_iff_subset_completeTheory\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">model_iff_subset_completeTheory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">T</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.completeTheory\">completeTheory</a></span> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L711-L712","name":"FirstOrder.Language.Theory.model_insert_iff","line":711,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.model_insert_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.model_insert_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">model_insert_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">φ</span> <span class=\"fn\">T</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L708-L709","name":"FirstOrder.Language.Theory.model_singleton_iff","line":708,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.model_singleton_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.model_singleton_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">model_singleton_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">φ</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L703-L706","name":"FirstOrder.Language.Theory.model_union_iff","line":703,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.model_union_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.model_union_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">model_union_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T </span><span class=\"fn\">T'</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">T'</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L699-L701","name":"FirstOrder.Language.Theory.Model.union","line":699,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model.union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model.union\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">Model</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T </span><span class=\"fn\">T'</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">T'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L696-L697","name":"FirstOrder.Language.Theory.Model.mono","line":696,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model.mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model.mono\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">Model</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T </span><span class=\"fn\">T'</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_h</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">T</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">T'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L691-L692","name":"FirstOrder.Language.model_empty","line":691,"kind":"instance","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.model_empty\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">model_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L685-L687","name":"FirstOrder.Language.LHom.onTheory_model","line":685,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.onTheory_model","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.onTheory_model\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">LHom</span>.<span class=\"name\">onTheory_model</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L'</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">L</span> <a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom\">→ᴸ</a> <span class=\"fn\">L'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.LHom.onTheory\">onTheory</a></span> <span class=\"fn\">T</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L682-L683","name":"FirstOrder.Language.Theory.realize_sentence_of_mem","line":682,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.realize_sentence_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.realize_sentence_of_mem\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">realize_sentence_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L678-L680","name":"FirstOrder.Language.Theory.model_iff","line":678,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.model_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.model_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">model_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">φ</span> ∈ <span class=\"fn\">T</span>, <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L673-L674","name":"FirstOrder.Language.«term_⊨__1»","line":673,"kind":"def","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.«term_⊨__1»","doc":"A model of a theory is a structure in which every sentence is realized as true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.«term_⊨__1»\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">«term_⊨__1»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L670-L670","name":"FirstOrder.Language.Theory.Model.realize_of_mem","line":670,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model.realize_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model.realize_of_mem\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">Model</span>.<span class=\"name\">realize_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span> → <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L669-L669","name":"FirstOrder.Language.Theory.Model.mk","line":669,"kind":"ctor","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model.mk\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">Model</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">realize_of_mem</span> : <span class=\"fn\">∀ <span class=\"fn\">φ</span> ∈ <span class=\"fn\">T</span>, <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\">⊨</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L668-L670","name":"FirstOrder.Language.Theory.Model","line":668,"kind":"class","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model","doc":"A model of a theory is a structure in which every sentence is realized as true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Theory.Model\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Theory</span>.<span class=\"name\">Model</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L663-L664","name":"FirstOrder.Language.elementarilyEquivalent_iff","line":663,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.elementarilyEquivalent_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.elementarilyEquivalent_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">elementarilyEquivalent_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\">ElementarilyEquivalent</a></span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>), <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">N</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L659-L661","name":"FirstOrder.Language.mem_completeTheory","line":659,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.mem_completeTheory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.mem_completeTheory\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">mem_completeTheory</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.completeTheory\">completeTheory</a></span> <span class=\"fn\">M</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L653-L655","name":"FirstOrder.«term_≅[_]_»","line":653,"kind":"def","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.«term_≅[_]_»","doc":"Two structures are elementarily equivalent when they satisfy the same sentences. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.«term_≅[_]_»\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">«term_≅[_]_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L649-L651","name":"FirstOrder.Language.ElementarilyEquivalent","line":649,"kind":"def","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent","doc":"Two structures are elementarily equivalent when they satisfy the same sentences. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.ElementarilyEquivalent\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">ElementarilyEquivalent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L643-L645","name":"FirstOrder.Language.completeTheory","line":643,"kind":"def","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.completeTheory","doc":"The complete theory of a structure `M` is the set of all sentences `M` satisfies. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.completeTheory\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">completeTheory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Theory\">Theory</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L636-L639","name":"FirstOrder.Language.LHom.realize_onSentence","line":636,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.realize_onSentence","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.realize_onSentence\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">LHom</span>.<span class=\"name\">realize_onSentence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L'</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">L</span> <a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom\">→ᴸ</a> <span class=\"fn\">L'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.LHom.onSentence\">onSentence</a></span> <span class=\"fn\">ψ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">ψ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L627-L632","name":"FirstOrder.Language.Formula.realize_equivSentence_symm","line":627,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_equivSentence_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_equivSentence_symm\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_equivSentence_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.equivSentence\">equivSentence</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L622-L625","name":"FirstOrder.Language.Formula.realize_equivSentence","line":622,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_equivSentence","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_equivSentence\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_equivSentence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.lhomWithConstants\">lhomWithConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.equivSentence\">equivSentence</a> <span class=\"fn\">φ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.con\">con</a></span> <span class=\"fn\">a</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L610-L620","name":"FirstOrder.Language.Formula.realize_equivSentence_symm_con","line":610,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_equivSentence_symm_con","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_equivSentence_symm_con\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_equivSentence_symm_con</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.lhomWithConstants\">lhomWithConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.equivSentence\">equivSentence</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.con\">con</a></span> <span class=\"fn\">a</span>)</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L604-L606","name":"FirstOrder.Language.Sentence.realize_not","line":604,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.realize_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.realize_not\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Sentence</span>.<span class=\"name\">realize_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.not\">Formula.not</a> <span class=\"fn\">φ</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">M</span> <a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\">⊨</a> <span class=\"fn\">φ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L601-L602","name":"FirstOrder.Language.«term_⊨_»","line":601,"kind":"def","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.«term_⊨_»","doc":"A sentence can be evaluated as true or false in a structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.«term_⊨_»\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">«term_⊨_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L596-L598","name":"FirstOrder.Language.Sentence.Realize","line":596,"kind":"def","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize","doc":"A sentence can be evaluated as true or false in a structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Sentence.Realize\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Sentence</span>.<span class=\"name\">Realize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Sentence\">Sentence</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L588-L592","name":"FirstOrder.Language.LHom.setOf_realize_onFormula","line":588,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.setOf_realize_onFormula","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.setOf_realize_onFormula\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">LHom</span>.<span class=\"name\">setOf_realize_onFormula</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L'</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">L</span> <a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom\">→ᴸ</a> <span class=\"fn\">L'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">setOf</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.LHom.onFormula\">onFormula</a></span> <span class=\"fn\">ψ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">setOf</a> <span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L583-L586","name":"FirstOrder.Language.LHom.realize_onFormula","line":583,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.realize_onFormula","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.realize_onFormula\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">LHom</span>.<span class=\"name\">realize_onFormula</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L'</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">L</span> <a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom\">→ᴸ</a> <span class=\"fn\">L'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.LHom.onFormula\">onFormula</a></span> <span class=\"fn\">ψ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L575-L579","name":"FirstOrder.Language.Formula.boundedFormula_realize_eq_realize","line":575,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.boundedFormula_realize_eq_realize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.boundedFormula_realize_eq_realize\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">boundedFormula_realize_eq_realize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">0</span></span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">BoundedFormula.Realize</a> <span class=\"fn\">φ</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L569-L573","name":"FirstOrder.Language.Formula.realize_graph","line":569,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_graph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_graph\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_graph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">M</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.graph\">graph</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.cons\">Fin.cons</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Structure.funMap</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L565-L567","name":"FirstOrder.Language.Formula.realize_equal","line":565,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_equal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_equal\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_equal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.equal\">equal</a></span> <span class=\"fn\">t₂</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">x</span> <span class=\"fn\">t₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">x</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L563-L563","name":"FirstOrder.Language.Formula.realize_relabel_sum_inr","line":563,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_relabel_sum_inr","doc":"**Alias** of `FirstOrder.Language.Formula.realize_relabel_sumInr`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_relabel_sum_inr\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_relabel_sum_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Empty\">Empty</a> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.relabel\">BoundedFormula.relabel</a> <a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L557-L561","name":"FirstOrder.Language.Formula.realize_relabel_sumInr","line":557,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_relabel_sumInr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_relabel_sumInr\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_relabel_sumInr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Empty\">Empty</a> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.relabel\">BoundedFormula.relabel</a> <a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L551-L555","name":"FirstOrder.Language.Formula.realize_relabel","line":551,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_relabel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_relabel\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_relabel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.relabel\">relabel</a> <span class=\"fn\">g</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L547-L549","name":"FirstOrder.Language.Formula.realize_iff","line":547,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.iff\">iff</a></span> <span class=\"fn\">ψ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L543-L545","name":"FirstOrder.Language.Formula.realize_sup","line":543,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_sup\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">ψ</span>).<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L535-L541","name":"FirstOrder.Language.Formula.realize_rel₂","line":535,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_rel₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_rel₂\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_rel₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.formula₂\">formula₂</a></span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">t₁</span></span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">t₂</span></span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L528-L533","name":"FirstOrder.Language.Formula.realize_rel₁","line":528,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_rel₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_rel₁\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_rel₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.formula₁\">formula₁</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span></span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L523-L526","name":"FirstOrder.Language.Formula.realize_rel","line":523,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_rel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_rel\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ts</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.formula\">formula</a></span> <span class=\"fn\">ts</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">R</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">ts</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L519-L521","name":"FirstOrder.Language.Formula.realize_imp","line":519,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_imp\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.imp\">imp</a></span> <span class=\"fn\">ψ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L515-L517","name":"FirstOrder.Language.Formula.realize_inf","line":515,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_inf\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">ψ</span>).<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L511-L513","name":"FirstOrder.Language.Formula.realize_top","line":511,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_top\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L507-L509","name":"FirstOrder.Language.Formula.realize_bot","line":507,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_bot\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#False\">False</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L503-L505","name":"FirstOrder.Language.Formula.realize_not","line":503,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.realize_not\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">realize_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula.not\">not</a></span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\">Realize</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L497-L499","name":"FirstOrder.Language.Formula.Realize","line":497,"kind":"def","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize","doc":"A formula can be evaluated as true or false by giving values to each free variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Formula.Realize\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Formula</span>.<span class=\"name\">Realize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Formula\">Formula</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L479-L491","name":"FirstOrder.Language.LHom.realize_onBoundedFormula","line":479,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.realize_onBoundedFormula","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.realize_onBoundedFormula\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">LHom</span>.<span class=\"name\">realize_onBoundedFormula</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L'</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">L</span> <a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom\">→ᴸ</a> <span class=\"fn\">L'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.LHom.onBoundedFormula\">onBoundedFormula</a></span> <span class=\"fn\">ψ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L463-L471","name":"FirstOrder.Language.BoundedFormula.realize_all_liftAt_one_self","line":463,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_all_liftAt_one_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_all_liftAt_one_self\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_all_liftAt_one_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.liftAt\">liftAt</a> <span class=\"fn\">1</span> <span class=\"fn\">n</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.all\">all</a></span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L452-L459","name":"FirstOrder.Language.BoundedFormula.realize_relabelEquiv","line":452,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_relabelEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_relabelEquiv\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_relabelEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.relabelEquiv\">relabelEquiv</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">g</span></span>) <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L440-L450","name":"FirstOrder.Language.BoundedFormula.realize_constantsVarsEquiv","line":440,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_constantsVarsEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_constantsVarsEquiv\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_constantsVarsEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.lhomWithConstants\">lhomWithConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.constantsVarsEquiv\">constantsVarsEquiv</a> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.con\">con</a></span> <span class=\"fn\">a</span>)</span></span>)</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L432-L438","name":"FirstOrder.Language.BoundedFormula.realize_restrictFreeVar'","line":432,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_restrictFreeVar'","doc":"A special case of `realize_restrictFreeVar`, included because we can add the `simp` attribute\nto it "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_restrictFreeVar'\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_restrictFreeVar'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.freeVarFinset\">freeVarFinset</a></span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.restrictFreeVar\">restrictFreeVar</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Inclusion.html#Set.inclusion\">Set.inclusion</a> <span class=\"fn\">h</span>)</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a>) <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L409-L430","name":"FirstOrder.Language.BoundedFormula.realize_restrictFreeVar","line":409,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_restrictFreeVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_restrictFreeVar\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_restrictFreeVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.freeVarFinset\">freeVarFinset</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv'</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.freeVarFinset\">freeVarFinset</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v'</span> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.restrictFreeVar\">restrictFreeVar</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v'</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L397-L407","name":"FirstOrder.Language.BoundedFormula.realize_subst","line":397,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_subst\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_subst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tf</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.subst\">subst</a></span> <span class=\"fn\">tf</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">tf</span> <span class=\"fn\">a</span>)</span></span>)</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L390-L395","name":"FirstOrder.Language.BoundedFormula.realize_liftAt_one_self","line":390,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_liftAt_one_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_liftAt_one_self\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_liftAt_one_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.liftAt\">liftAt</a> <span class=\"fn\">1</span> <span class=\"fn\">n</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">Fin.castSucc</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L384-L388","name":"FirstOrder.Language.BoundedFormula.realize_liftAt_one","line":384,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_liftAt_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_liftAt_one\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_liftAt_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmn</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.liftAt\">liftAt</a> <span class=\"fn\">1</span> <span class=\"fn\">m</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L362-L382","name":"FirstOrder.Language.BoundedFormula.realize_liftAt","line":362,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_liftAt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_liftAt\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_liftAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">n' </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n'</span>)</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmn</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.liftAt\">liftAt</a> <span class=\"fn\">n'</span> <span class=\"fn\">m</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castAdd\">Fin.castAdd</a> <span class=\"fn\">n'</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.addNat\">addNat</a></span> <span class=\"fn\">n'</span></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L355-L360","name":"FirstOrder.Language.BoundedFormula.realize_relabel","line":355,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_relabel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_relabel\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_relabel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">m</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>)</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.relabel\">relabel</a> <span class=\"fn\">g</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> (<span class=\"fn\"><a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castAdd\">Fin.castAdd</a> <span class=\"fn\">n</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>) (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.natAdd\">Fin.natAdd</a> <span class=\"fn\">m</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L337-L353","name":"FirstOrder.Language.BoundedFormula.realize_mapTermRel_add_castLe","line":337,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_mapTermRel_add_castLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_mapTermRel_add_castLe\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_mapTermRel_add_castLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L'</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ft</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>)</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fr</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">n</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>)</span> → <span class=\"fn\">M</span>)</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>)</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span>) (<span class=\"fn\">xs'</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>)</span> → <span class=\"fn\">M</span></span>),\n    <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v'</span> <span class=\"fn\">xs'</span>)</span> <span class=\"fn\">(<span class=\"fn\">ft</span> <span class=\"fn\">n</span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">xs'</span>)</span> (<span class=\"fn\">xs'</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.natAdd\">Fin.natAdd</a> <span class=\"fn\">k</span></span>))</span> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">n</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>), <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">(<span class=\"fn\">fr</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">R</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>)</span> → <span class=\"fn\">M</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.snoc\">Fin.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.mapTermRel\">mapTermRel</a> <span class=\"fn\">ft</span> <span class=\"fn\">fr</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.castLE\">castLE</a> <span class=\"fn\">⋯</span></span>)</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v'</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">xs</span>)</span> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.natAdd\">Fin.natAdd</a> <span class=\"fn\">k</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L321-L335","name":"FirstOrder.Language.BoundedFormula.realize_mapTermRel_id","line":321,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_mapTermRel_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_mapTermRel_id\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_mapTermRel_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L'</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ft</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fr</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">n</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span>) (<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>),\n    <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v'</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">(<span class=\"fn\">ft</span> <span class=\"fn\">n</span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">n</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>), <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">(<span class=\"fn\">fr</span> <span class=\"fn\">n</span> <span class=\"fn\">R</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">R</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.mapTermRel\">mapTermRel</a> <span class=\"fn\">ft</span> <span class=\"fn\">fr</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Init/Prelude.html#id\">id</a>)</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v'</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L316-L319","name":"FirstOrder.Language.BoundedFormula.realize_castLE_of_eq","line":316,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_castLE_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_castLE_of_eq\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_castLE_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.castLE\">castLE</a> <span class=\"fn\">h'</span> <span class=\"fn\">φ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.cast\">Fin.cast</a> <span class=\"fn\">h</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L312-L314","name":"FirstOrder.Language.BoundedFormula.realize_iff","line":312,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_iff\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.iff\">iff</a></span> <span class=\"fn\">ψ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L307-L310","name":"FirstOrder.Language.BoundedFormula.realize_ex","line":307,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_ex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_ex\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_ex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">θ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">θ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.ex\">ex</a></span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">θ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.snoc\">Fin.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L303-L305","name":"FirstOrder.Language.BoundedFormula.realize_all","line":303,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_all","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_all\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">θ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">θ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.all\">all</a></span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">M</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">θ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Tuple/Basic.html#Fin.snoc\">Fin.snoc</a> <span class=\"fn\">xs</span> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L295-L301","name":"FirstOrder.Language.BoundedFormula.realize_foldr_sup","line":295,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_foldr_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_foldr_sup\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_foldr_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">x2</span>)</span> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">φ</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L290-L293","name":"FirstOrder.Language.BoundedFormula.realize_sup","line":290,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_sup\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">ψ</span>).<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L281-L288","name":"FirstOrder.Language.BoundedFormula.realize_rel₂","line":281,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_rel₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_rel₂\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_rel₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.boundedFormula₂\">boundedFormula₂</a></span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">t₁</span></span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">t₂</span></span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L274-L279","name":"FirstOrder.Language.BoundedFormula.realize_rel₁","line":274,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_rel₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_rel₁\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_rel₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.boundedFormula₁\">boundedFormula₁</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">t</span></span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L269-L272","name":"FirstOrder.Language.BoundedFormula.realize_rel","line":269,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_rel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_rel\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ts</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">R</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Relations.boundedFormula\">boundedFormula</a></span> <span class=\"fn\">ts</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.RelMap\">Structure.RelMap</a> <span class=\"fn\">R</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">(<span class=\"fn\">ts</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L265-L267","name":"FirstOrder.Language.BoundedFormula.realize_imp","line":265,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_imp\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.imp\">imp</a></span> <span class=\"fn\">ψ</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L258-L263","name":"FirstOrder.Language.BoundedFormula.realize_foldr_inf","line":258,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_foldr_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_foldr_inf\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_foldr_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">x2</span>)</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">φ</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L254-L256","name":"FirstOrder.Language.BoundedFormula.realize_inf","line":254,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_inf\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">ψ</span>).<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ψ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L251-L252","name":"FirstOrder.Language.BoundedFormula.realize_top","line":251,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_top\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L246-L249","name":"FirstOrder.Language.BoundedFormula.realize_bdEqual","line":246,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_bdEqual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_bdEqual\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_bdEqual</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.bdEqual\">bdEqual</a></span> <span class=\"fn\">t₂</span>)</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">t₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L242-L244","name":"FirstOrder.Language.BoundedFormula.realize_not","line":242,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_not","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_not\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">l</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.not\">not</a></span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L238-L240","name":"FirstOrder.Language.BoundedFormula.realize_bot","line":238,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.realize_bot\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">realize_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\">Realize</a></span> <span class=\"fn\">v</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#False\">False</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L227-L233","name":"FirstOrder.Language.BoundedFormula.Realize","line":227,"kind":"def","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize","doc":"A bounded formula can be evaluated as true or false by giving values to each free variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.BoundedFormula.Realize\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">Realize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">l</span></span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L210-L219","name":"FirstOrder.Language.HomClass.realize_term","line":210,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.HomClass.realize_term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.HomClass.realize_term\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">HomClass</span>.<span class=\"name\">realize_term</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.HomClass\">HomClass</a></span> <span class=\"fn\">F</span> <span class=\"fn\">M</span> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> (<span class=\"fn\">⇑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">v</span>) <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L201-L206","name":"FirstOrder.Language.LHom.realize_onTerm","line":201,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.realize_onTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.LHom.realize_onTerm\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">LHom</span>.<span class=\"name\">realize_onTerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L'</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L'</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">L</span> <a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom\">→ᴸ</a> <span class=\"fn\">L'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.LHom.onTerm\">onTerm</a></span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">Term.realize</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L186-L195","name":"FirstOrder.Language.Term.realize_constantsVarsEquivLeft","line":186,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_constantsVarsEquivLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_constantsVarsEquivLeft\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_constantsVarsEquivLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.lhomWithConstants\">lhomWithConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.con\">con</a></span> <span class=\"fn\">a</span>)</span></span>)</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.constantsVarsEquivLeft\">constantsVarsEquivLeft</a> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L176-L184","name":"FirstOrder.Language.Term.realize_varsToConstants","line":176,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_varsToConstants","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_varsToConstants\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_varsToConstants</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.lhomWithConstants\">lhomWithConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.varsToConstants\">varsToConstants</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.con\">con</a></span> <span class=\"fn\">a</span>)</span></span>)</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L157-L174","name":"FirstOrder.Language.Term.realize_constantsToVars","line":157,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_constantsToVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_constantsToVars\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_constantsToVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.lhomWithConstants\">lhomWithConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.LHom.IsExpansionOn\">IsExpansionOn</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.withConstants\">withConstants</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.con\">con</a></span> <span class=\"fn\">a</span>)</span></span>)</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.constantsToVars\">constantsToVars</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L148-L155","name":"FirstOrder.Language.Term.realize_restrictVarLeft'","line":148,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_restrictVarLeft'","doc":"A special case of `realize_restrictVarLeft`, included because we can add the `simp` attribute\nto it "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_restrictVarLeft'\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_restrictVarLeft'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.varFinsetLeft\">varFinsetLeft</a></span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a>) <span class=\"fn\">xs</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.restrictVarLeft\">restrictVarLeft</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Inclusion.html#Set.inclusion\">Set.inclusion</a> <span class=\"fn\">h</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L139-L146","name":"FirstOrder.Language.Term.realize_restrictVarLeft","line":139,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_restrictVarLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_restrictVarLeft\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_restrictVarLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.varFinsetLeft\">varFinsetLeft</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><span class=\"fn\">β</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxs'</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.varFinsetLeft\">varFinsetLeft</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><span class=\"fn\">xs</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">xs'</span> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.restrictVarLeft\">restrictVarLeft</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">xs'</span> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a>))</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L132-L137","name":"FirstOrder.Language.Term.realize_restrictVar'","line":132,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_restrictVar'","doc":"A special case of `realize_restrictVar`, included because we can add the `simp` attribute\nto it "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_restrictVar'\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_restrictVar'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.varFinset\">varFinset</a></span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.restrictVar\">restrictVar</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Inclusion.html#Set.inclusion\">Set.inclusion</a> <span class=\"fn\">h</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L124-L130","name":"FirstOrder.Language.Term.realize_restrictVar","line":124,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_restrictVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_restrictVar\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_restrictVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.varFinset\">varFinset</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv'</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.varFinset\">varFinset</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v'</span> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.restrictVar\">restrictVar</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v'</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L117-L122","name":"FirstOrder.Language.Term.realize_subst","line":117,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_subst\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_subst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tf</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.subst\">subst</a></span> <span class=\"fn\">tf</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">tf</span> <span class=\"fn\">a</span>)</span></span>)</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L114-L115","name":"FirstOrder.Language.Term.realize_con","line":114,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_con","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_con\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_con</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">↑<span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/LanguageMap.html#FirstOrder.Language.con\">con</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Constants.term\">term</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L106-L112","name":"FirstOrder.Language.Term.realize_functions_apply₂","line":106,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_functions_apply₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_functions_apply₂\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_functions_apply₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Functions.apply₂\">apply₂</a></span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Structure.funMap</a> <span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">t₁</span></span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">t₂</span></span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L99-L104","name":"FirstOrder.Language.Term.realize_functions_apply₁","line":99,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_functions_apply₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_functions_apply₁\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_functions_apply₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Functions.apply₁\">apply₁</a></span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Structure.funMap</a> <span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">![</a><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span></span><a href=\"./Mathlib/Data/Fin/VecNotation.html#Matrix.vecCons\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L95-L97","name":"FirstOrder.Language.Term.realize_constants","line":95,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_constants","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_constants\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_constants</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Constants\">Constants</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Constants.term\">term</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L88-L93","name":"FirstOrder.Language.Term.realize_liftAt","line":88,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_liftAt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_liftAt\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_liftAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">n' </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n'</span>)</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.liftAt\">liftAt</a> <span class=\"fn\">n'</span> <span class=\"fn\">m</span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Data/Sum/Basic.html#Sum.map\">Sum.map</a> <a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Data/Fin/Basic.html#Fin.castAdd\">Fin.castAdd</a> <span class=\"fn\">n'</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.addNat\">addNat</a></span> <span class=\"fn\">n'</span></span></span></span>) <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L81-L86","name":"FirstOrder.Language.Term.realize_relabel","line":81,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_relabel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_relabel\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_relabel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">M</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.relabel\">relabel</a> <span class=\"fn\">g</span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>) <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L77-L79","name":"FirstOrder.Language.Term.realize_func","line":77,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_func","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_func\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_func</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ts</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.func\">func</a> <span class=\"fn\">f</span> <span class=\"fn\">ts</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure.funMap\">Structure.funMap</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<span class=\"fn\">ts</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L74-L75","name":"FirstOrder.Language.Term.realize_var","line":74,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize_var\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize_var</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\">realize</a> <span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term.var\">var</a> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/aa936c36e8484abd300577139faf8e945850831a/Mathlib/ModelTheory/Semantics.lean#L69-L72","name":"FirstOrder.Language.Term.realize","line":69,"kind":"def","docLink":"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize","doc":"A term `t` with variables indexed by `α` can be evaluated by giving a value to each variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Semantics.html#FirstOrder.Language.Term.realize\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">realize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Structure\">Structure</a></span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">M</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_t</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M</span></div></div>"}]}