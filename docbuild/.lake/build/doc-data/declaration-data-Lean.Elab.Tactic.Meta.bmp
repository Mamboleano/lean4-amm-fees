{"name":"Lean.Elab.Tactic.Meta","instances":[],"imports":["Lean.Elab.SyntheticMVars","Lean.Elab.Tactic.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/Meta.lean#L13-L18","name":"Lean.Elab.runTactic","line":13,"kind":"def","docLink":"./Lean/Elab/Tactic/Meta.html#Lean.Elab.runTactic","doc":"Apply the give tactic code to `mvarId` in `MetaM`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Meta.html#Lean.Elab.runTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">runTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticCode</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Term.Context</a> :=\n  <span class=\"fn\">{ <span class=\"fn\">declName?</span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>, <span class=\"fn\">auxDeclToFullName</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>, <span class=\"fn\">macroStack</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">mayPostpone</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">errToSorry</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>,\n    <span class=\"fn\">autoBoundImplicit</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>,\n    <span class=\"fn\">autoBoundImplicits</span> :=\n      <span class=\"fn\">{ <span class=\"fn\">root</span> := <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArrayNode.node\">PersistentArrayNode.node</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array.mkEmpty\">Array.mkEmpty</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.branching\">PersistentArray.branching</a>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span>)</span></span>,\n        <span class=\"fn\">tail</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Array.mkEmpty\">Array.mkEmpty</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.branching\">PersistentArray.branching</a>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span></span>, <span class=\"fn\">size</span> := <span class=\"fn\">0</span>, <span class=\"fn\">shift</span> := <a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray.initShift\">PersistentArray.initShift</a>,\n        <span class=\"fn\">tailOff</span> := <span class=\"fn\">0</span> }</span>,\n    <span class=\"fn\">autoBoundImplicitForbidden</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>, <span class=\"fn\">sectionVars</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>, <span class=\"fn\">sectionFVars</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>, <span class=\"fn\">implicitLambda</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>,\n    <span class=\"fn\">heedElabAsElim</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">isNoncomputableSection</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">ignoreTCFailures</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">inPattern</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>,\n    <span class=\"fn\">tacSnap?</span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>, <span class=\"fn\">saveRecAppSyntax</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <span class=\"fn\">holesAsSyntheticOpaque</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">checkDeprecated</span> := <a href=\"./Init/Prelude.html#Bool.true\">true</a> }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">Term.State</a> :=\n  <span class=\"fn\">{ <span class=\"fn\">levelNames</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">syntheticMVars</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>, <span class=\"fn\">pendingMVars</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>, <span class=\"fn\">mvarErrorInfos</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">levelMVarErrorInfos</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>,\n    <span class=\"fn\">mvarArgNames</span> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>, <span class=\"fn\">letRecsToLift</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">Term.State</a>)</span></div></div>"}]}