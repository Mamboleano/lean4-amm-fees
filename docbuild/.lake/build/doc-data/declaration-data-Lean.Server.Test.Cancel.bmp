{"name":"Lean.Server.Test.Cancel","instances":[],"imports":["Lean.Elab.Tactic.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Server/Test/Cancel.lean#L80-L83","name":"Lean.Server.Test.Cancel.tacticUnblock","line":80,"kind":"def","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticUnblock","doc":"Unblocks a `wait_for_unblock*` task. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticUnblock\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">tacticUnblock</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Server/Test/Cancel.lean#L58-L78","name":"Lean.Server.Test.Cancel.tacticWait_for_unblock_async","line":58,"kind":"def","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_unblock_async","doc":"Spawns a `logSnapshotTask` that waits for `unblock` to be called, which is expected to happen in a\nsubsequent document version that does not invalidate this tactic. Complains if cancellation token\nwas set before unblocking, i.e. if the tactic was invalidated after all.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_unblock_async\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">tacticWait_for_unblock_async</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Server/Test/Cancel.lean#L56-L56","name":"Lean.Server.Test.Cancel.unblockedCancelTk","line":56,"kind":"opaque","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.unblockedCancelTk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.unblockedCancelTk\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">unblockedCancelTk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Server/Test/Cancel.lean#L19-L25","name":"Lean.Server.Test.Cancel.tacticWait_for_cancel_once","line":19,"kind":"def","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_cancel_once","doc":"On first invocation, sends a diagnostics \"blocked\", blocks until cancelled, and then eprints\n\"cancelled!\"; further invocations complete when this wait is done but do not wait for their own\ncancellation. Thus all document versions should complete strictly after the printing has completed\nand we avoid terminating the server too early to see the message.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_cancel_once\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">tacticWait_for_cancel_once</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Server/Test/Cancel.lean#L17-L17","name":"Lean.Server.Test.Cancel.onceRef","line":17,"kind":"opaque","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.onceRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.onceRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">onceRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span>)</span></span></div></div>"}]}