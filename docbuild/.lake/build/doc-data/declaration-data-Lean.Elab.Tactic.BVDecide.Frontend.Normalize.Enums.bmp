{"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.Enums","instances":[],"imports":["Lean.Elab.Tactic.BVDecide.Frontend.Normalize.Basic","Lean.Meta.Tactic.Simp"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L285-L309","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPass.postprocess","line":285,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPass.postprocess","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPass.postprocess\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">enumsPass</span>.<span class=\"name\">postprocess</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Assert.html#Lean.Meta.Hypothesis\">Meta.Hypothesis</a>)</span> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L257-L309","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPass","line":257,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPass\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">enumsPass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Basic.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.Pass\">Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L234-L255","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPassPost","line":234,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPassPost","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPassPost\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">enumsPassPost</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L166-L210","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecLeFor","line":166,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecLeFor","doc":"Assuming that `declName` is an enum inductive, construct a proof of\n`∀ (x : declName) : x.enumToBitVec ≤ domainSize - 1` where `domainSize` is the amount of\nconstructors of `declName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecLeFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">getEnumToBitVecLeFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L150-L164","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEqIffEnumToBitVecEqFor.mkInverse","line":150,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEqIffEnumToBitVecEqFor.mkInverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEqIffEnumToBitVecEqFor.mkInverse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">getEqIffEnumToBitVecEqFor</span>.<span class=\"name\">mkInverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input </span><span class=\"fn\">retType </span><span class=\"fn\">instBEq</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctors</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counter</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L72-L164","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEqIffEnumToBitVecEqFor","line":72,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEqIffEnumToBitVecEqFor","doc":"Assuming that `declName` is an enum inductive, construct a proof of\n`∀ (x y : declName) : x = y ↔ x.enumToBitVec = y.enumToBitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEqIffEnumToBitVecEqFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">getEqIffEnumToBitVecEqFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L35-L70","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecFor","line":35,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecFor","doc":"Assuming that `declName` is an enum inductive construct a function of type `declName → BitVec w`\nthat maps `declName` constructors to their numeric indices as `BitVec`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">getEnumToBitVecFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L33-L33","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecLeSuffix","line":33,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecLeSuffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecLeSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">enumToBitVecLeSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L32-L32","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.eqIffEnumToBitVecEqSuffix","line":32,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.eqIffEnumToBitVecEqSuffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.eqIffEnumToBitVecEqSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">eqIffEnumToBitVecEqSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/11ccbced796476be020459a83c599b301a765d3e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L31-L31","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecSuffix","line":31,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecSuffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">enumToBitVecSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"}]}